//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class TripLogJSONClass {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Vehicle {
        public Integer id {get;set;} 
        public String url {get;set;} 
        public String lastUpdated {get;set;} 
        public String display {get;set;} 

        public Vehicle(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else if (text == 'lastUpdated') {
                            lastUpdated = parser.getText();
                        } else if (text == 'display') {
                            display = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Vehicle consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class User {
        public Integer id {get;set;} 
        public String url {get;set;} 
        public String email {get;set;} 
        public String display {get;set;} 

        public User(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else if (text == 'email') {
                            email = parser.getText();
                        } else if (text == 'display') {
                            display = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'User consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class TripLogJSONClassInner {
        public String message {get;set;} 
        public List<Trips> trips {get;set;} 

        public TripLogJSONClassInner(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'message') {
                            message = parser.getText();
                        } else if (text == 'trips') {
                            trips = new List<Trips>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                trips.add(new Trips(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'TripLogJSONClass consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Trips {
        public Integer id {get;set;} 
        public String url {get;set;} 
        public String lastUpdated {get;set;} 
        public User user {get;set;} 
        public Vehicle vehicle {get;set;} 
        public String startTime {get;set;} 
        public String endTime {get;set;} 
        public Integer startOdometer {get;set;} 
        public Integer endOdometer {get;set;} 
        public Double mileage {get;set;} 
        public Vehicle fromLocation {get;set;} 
        public Vehicle toLocation {get;set;} 
        public String activity {get;set;} 
        public Integer parking {get;set;} 
        public Integer toll {get;set;} 
        public String tags {get;set;} 
        public String notes {get;set;} 
        public String status {get;set;} 
        public String statusUpdateTime {get;set;} 
        public User statusUpdatedBy {get;set;} 
        public String polyline {get;set;} 
        public String route {get;set;} 
        public String receipts {get;set;} 
        public String map_Z {get;set;} // in json: map
        public String trackingMethod {get;set;} 
        public Integer stayTimeMins {get;set;} 

        public Trips(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getIntegerValue();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else if (text == 'lastUpdated') {
                            lastUpdated = parser.getText();
                        } else if (text == 'user') {
                            user = new User(parser);
                        } else if (text == 'vehicle') {
                            vehicle = new Vehicle(parser);
                        } else if (text == 'startTime') {
                            startTime = parser.getText();
                        } else if (text == 'endTime') {
                            endTime = parser.getText();
                        } else if (text == 'startOdometer') {
                            startOdometer = parser.getIntegerValue();
                        } else if (text == 'endOdometer') {
                            endOdometer = parser.getIntegerValue();
                        } else if (text == 'mileage') {
                            mileage = parser.getDoubleValue();
                        } else if (text == 'fromLocation') {
                            fromLocation = new Vehicle(parser);
                        } else if (text == 'toLocation') {
                            toLocation = new Vehicle(parser);
                        } else if (text == 'activity') {
                            activity = parser.getText();
                        } else if (text == 'parking') {
                            parking = parser.getIntegerValue();
                        } else if (text == 'toll') {
                            toll = parser.getIntegerValue();
                        } else if (text == 'tags') {
                            tags = parser.getText();
                        } else if (text == 'notes') {
                            notes = parser.getText();
                        } else if (text == 'status') {
                            status = parser.getText();
                        } else if (text == 'statusUpdateTime') {
                            statusUpdateTime = parser.getText();
                        } else if (text == 'statusUpdatedBy') {
                            statusUpdatedBy = new User(parser);
                        } else if (text == 'polyline') {
                            polyline = parser.getText();
                        } else if (text == 'route') {
                            route = parser.getText();
                        } else if (text == 'receipts') {
                            receipts = parser.getText();
                        } else if (text == 'map') {
                            map_Z = parser.getText();
                        } else if (text == 'trackingMethod') {
                            trackingMethod = parser.getText();
                        } else if (text == 'stayTimeMins') {
                            stayTimeMins = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Trips consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static TripLogJSONClassInner parse(String json) {
        return new TripLogJSONClassInner(System.JSON.createParser(json));
    }
}