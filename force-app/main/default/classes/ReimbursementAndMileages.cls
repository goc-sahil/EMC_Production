//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ReimbursementAndMileages {
	public ReimbursementAndMileages()
	{

	}

	public class Attributes {
		public Attributes()
		{

		} 

		public String type_Z {get;set;} // in json: type
		public String url {get;set;} 

		public Attributes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Employee_Reimbursement_class {
		public Employee_Reimbursement_class()
		{

		}
		public Attributes attributes {get;set;} 
		public String Month {get;set;} 
		public Integer Total_Mileage {get;set;} 
		public String Contact_Id {get;set;} 
		public Integer Total_Pending {get;set;} 
		public String Id {get;set;} 

		public Employee_Reimbursement_class(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'attributes') {
							attributes = new Attributes(parser);
						} else if (text == 'Month') {
							Month = parser.getText();
						} else if (text == 'Total_Mileage') {
							Total_Mileage = parser.getIntegerValue();
						} else if (text == 'Contact_Id') {
							Contact_Id = parser.getText();
						} else if (text == 'Total_Pending') {
							Total_Pending = parser.getIntegerValue();
						} else if (text == 'Id') {
							Id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Employee_Reimbursement_class consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MileagesList {
		public MileagesList()
		{
			
		}
		public Attributes attributes {get;set;} 
		public String Employee_Reimbursement {get;set;} 
		public String Id {get;set;} 
		public String Name {get;set;} 
		public String Trip_Status {get;set;} 
		public String Trip_Date {get;set;} 
		public String Trip_Origin {get;set;} 
		public String Trip_Destination {get;set;} 
		public Integer Mileage {get;set;} 
		public Double Variable {get;set;} 
		public String CreatedDate {get;set;} 
		public Boolean Rejected {get;set;} 
		public Employee_Reimbursement_class Employee_Reim {get;set;} 

		public MileagesList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'attributes') {
							attributes = new Attributes(parser);
						} else if (text == 'Employee_Reimbursement') {
							Employee_Reimbursement = parser.getText();
						} else if (text == 'Id') {
							Id = parser.getText();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'Trip_Status') {
							Trip_Status = parser.getText();
						} else if (text == 'Trip_Date') {
							Trip_Date = parser.getText();
						} else if (text == 'Trip_Origin') {
							Trip_Origin = parser.getText();
						} else if (text == 'Trip_Destination') {
							Trip_Destination = parser.getText();
						} else if (text == 'Mileage') {
							Mileage = parser.getIntegerValue();
						} else if (text == 'Variable') {
							Variable = parser.getDoubleValue();
						} else if (text == 'CreatedDate') {
							CreatedDate = parser.getText();
						} else if (text == 'Rejected') {
							Rejected = parser.getBooleanValue();
						} else if (text == 'Employee_Reimbursement_class') {
							Employee_Reim = new Employee_Reimbursement_class(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'MileagesList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String totalMileages {get;set;} 
	public String threshold {get;set;} 
	public String reimbursementid {get;set;} 
	public String name {get;set;} 
	public String month {get;set;} 
	public List<MileagesList> mileagesList {get;set;} 
	public Object mileageid {get;set;} 
	public Boolean isSelected {get;set;} 
	public String contactid {get;set;} 
	public String approvedMileages {get;set;} 

	public ReimbursementAndMileages(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'totalMileages') {
						totalMileages = parser.getText();
					} else if (text == 'threshold') {
						threshold = parser.getText();
					} else if (text == 'reimbursementid') {
						reimbursementid = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'month') {
						month = parser.getText();
					} else if (text == 'mileagesList') {
						mileagesList = arrayOfMileagesList(parser);
					} else if (text == 'mileageid') {
						mileageid = parser.getText();
					} else if (text == 'isSelected') {
						isSelected = parser.getBooleanValue();
					} else if (text == 'contactid') {
						contactid = parser.getText();
					} else if (text == 'approvedMileages') {
						approvedMileages = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'ReimbursementAndMileages consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static List<ReimbursementAndMileages> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfReimbursementAndMileages(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<ReimbursementAndMileages> arrayOfReimbursementAndMileages(System.JSONParser p) {
        List<ReimbursementAndMileages> res = new List<ReimbursementAndMileages>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ReimbursementAndMileages(p));
        }
        return res;
    }






    private static List<MileagesList> arrayOfMileagesList(System.JSONParser p) {
        List<MileagesList> res = new List<MileagesList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new MileagesList(p));
        }
        return res;
    }





}