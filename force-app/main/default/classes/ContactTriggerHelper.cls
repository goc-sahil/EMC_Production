public without sharing class ContactTriggerHelper {
    public static Boolean isRecursive = false;
    public static Boolean isFirstTime = true;
    Public static date fuelPriceDate;
    Public static string[] splitdate;
    Public static map<string, Decimal> monthStateCityVsFuelPriceMap = new map<string, Decimal>(); 
    Public static map<string, Decimal> monthStateCityVsFuelPricereimMap = new map<string, Decimal>(); 
    

    public static void checkVehicalYearAndModel(List<Contact> contactList){
        Map<String,String> urlMap = new Map<String,String>();
        set<String> vehicleNamesset = new set<String>();
        
        for(Contact conRec : contactList) {
            if(conRec.Vehicle_Type__c!=null) {
                vehicleNamesset.add(conRec.Vehicle_Type__c.replace(' ','').toUpperCase());
            }            
        }
        for(Vehicle_URL_Mapping__c u : [SELECT Id, Year__c, Vehicle__c, URL__c,Vehicle_Mapping__c FROM Vehicle_URL_Mapping__c WHERE Vehicle_Mapping__c IN: vehicleNamesset]){
            if((u.URL__c != null || u.URL__c != '') &&(!urlMap.containsKey(u.Vehicle_Mapping__c))){
                urlMap.put(u.Vehicle_Mapping__c,u.URL__c);
            }
        } 
        
        for(Contact conRec : contactList) {
            if(conRec.Role__c == StaticValues.ROLE_DRIVER || conRec.Role__c == StaticValues.ROLE_DRIVERMANAGER || conRec.Role__c == StaticValues.roleAdminDriver ) {
                if(conRec.Vehicle_Type__c != '') {
                    if(urlMap.containsKey(conRec.Vehicle_Type__c.replace(' ','').toUpperCase())) {
                        conRec.Car_Image__c = urlMap.get(conRec.Vehicle_Type__c.replace(' ','').toUpperCase());
                    } else {
                        conRec.addError('Please Enter Valid Standard Vehicle Make Model and Year');
                    }
                }
            }
        }
        
    }
    
    @Future(callout = true)
    public static void putHTTPUpdateUserPhoneTriplog(Map<String,String> tripIdWisePhone,Map<String,String> triplogidwiseAPIkey) {
        Http h;
        HttpRequest req;
        HttpResponse res;
        String mLOGACCOUNT = System.Label.Triplog_New_URL + ',' + System.Label.Triplog_New_URL2;
        for(String currentUserId : triplogidwiseAPIkey.keySet()) {
            String baseURL = !mLOGACCOUNT.Contains( triplogidwiseAPIkey.get(currentUserId) ) ? StaticValues.TRIPLOG_BASEURL : StaticValues.MLOG_BASEURL;
            if(tripIdWisePhone.containsKey(currentUserId) && tripIdWisePhone.get(currentUserId) != null) {
                JSONGenerator gen = JSON.createGenerator(true);
                gen.writeStartObject();
                gen.writeStringField('phone',tripIdWisePhone.get(currentUserId));
                gen.writeEndObject();
                h = new Http();
                req = new HttpRequest();
                req.setEndpoint( baseURL + '/api/users/' + currentUserId);
                req.setMethod('PUT');
                req.setTimeout(120000);
                req.setbody(gen.getAsString());
                req.setHeader('Content-Type', 'application/json');
                req.setHeader('Authorization', 'apikey '+ triplogidwiseAPIkey.get(currentUserId));
                if(!Test.isRunningTest()) {
                    res = h.send(req);            
                }
            }           
        }
    }
    
    public static void  CommunityUserCreate(List<Contact> contactList) {
        List<User> createUserList = new List<User>();
        list<Profile> profileList = [SELECT Id, Name FROM Profile WHERE Name = 'Customer Community Login User - Driver' OR  Name = 'Customer Community Login User - Manager' OR  Name = 'Customer Community Login User - Super Manager' OR  Name = 'Customer Community Login User - Manager/Driver' OR  Name = 'Customer Community Login User - Super Manager/Driver'];
        
        Map<string,Id> profilemap = new Map<string,ID>();
        for(Profile profileObj : profileList){
            if(profileObj.Name == 'Customer Community Login User - Driver' ){
                profilemap.put('Driver',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Manager'){
                profilemap.put('Manager',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Manager/Driver'){
                profilemap.put('Driver/Manager',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Super Manager/Driver'){
                profilemap.put(StaticValues.roleAdminDriver ,profileObj.id);
            }  else if(profileObj.Name == 'Customer Community Login User - Super Manager'){
                profilemap.put('Admin',profileObj.id);
            }
        }
        for(Contact conObj : contactList) {
            if(conObj.IsCreatedFROMCommunity__c == true && profilemap.containskey(conObj.Role__c))  {
                createUserList.add(CreateUserFROMCommunity(conObj,profilemap.get(conObj.Role__c)));
            }
        }
        if(createUserList.size()>0) {
            insert createUserList;
    }
    }
    
    public static User CreateUserFROMCommunity(Contact contObj, Id profileId){
        User userObj = new User();
        userObj.FirstName = contObj.FirstName;
        userObj.LastName = contObj.LastName; 
        userObj.Email = contObj.External_Email__c; 
        userObj.EmailEncodingKey = 'UTF-8'; 
        userObj.LanguageLocaleKey = 'en_US'; 
        userObj.LocaleSidKey = 'en_US'; 
        userObj.TimeZoneSidKey = 'America/Los_Angeles'; 
        userObj.UserName = contObj.External_Email__c; 
        userObj.Profileid = profileId; 
        userObj.Alias = contObj.External_Email__c.left(8); 
        userObj.ContactId = contObj.id;
        return userObj;
    }
    
    public static void updateComplianceStatus(List<Contact> newCon, Map<ID, Contact> conOldMap) {
        List<String> emails = new List<String>();
        EmailTemplate emTmp = new EmailTemplate();
        Messaging.SingleEmailMessage mail;
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>();
        // Define Email Template
        Map<String,EmailTemplate> nameWithTemplate = new Map<String,EmailTemplate>();
        for(EmailTemplate e : [SELECT Id, Name, developerName, Subject, body FROM EmailTemplate Limit 1]) {
            nameWithTemplate.put(e.developerName, e);
        }
        OrgWideEmailAddress[] owea;
        owea = [SELECT Id, address FROM OrgWideEmailAddress WHERE Address = 'driverservices@mburse.com'];
        
        for(Contact con : newCon) {
            if(con.Role__c == 'Driver' && (conOldMap.get(con.id).compliancestatus__c != con.compliancestatus__c)) {
                emails.add(con.External_Email__c);
                if(con.compliancestatus__c == 'Yes' && nameWithTemplate.containskey('Driver_Compliance_Status_Yes')) {
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_Yes');
                } else if(con.compliancestatus__c == 'No – Vehicle Age' && nameWithTemplate.containskey('Driver_Compliance_Status_No_Vehicle_Age')) {
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_No_Vehicle_Age');
                } else if(con.compliancestatus__c == 'No – Vehicle Value' && nameWithTemplate.containskey('Driver_Compliance_Status_No_Vehicle_Value')) {
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_No_Vehicle_Value');
                } else if(con.compliancestatus__c == 'No – Insurance not meeting minimum' && nameWithTemplate.containskey('Driver_Compliance_Status_No_Insurance_not_meeting_minimum')) {
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_No_Insurance_not_meeting_minimum');
                } else if(con.compliancestatus__c == 'Resubmit Insurance – you submitted an insurance card' && nameWithTemplate.containskey('Driver_Compliance_Status_Resubmit_Insurance')) {
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_Resubmit_Insurance');
                } else if(con.compliancestatus__c == 'Expired Insurance' && nameWithTemplate.containskey('Driver_Compliance_Status_Expired_Insurance')){
                    emTmp = nameWithTemplate.get('Driver_Compliance_Status_Expired_Insurance');
                } else{
                    emTmp = null;
                }
                if(!emails.isEmpty() && emTmp != null) {
                    mail = new Messaging.SingleEmailMessage();
                    mail.setToAddresses(emails);
                    mail.setSubject(emTmp.Subject);
                    mail.setPlainTextBody(emTmp.Body.replace('{!Contact.FirstName}', con.FirstName));
                    if(owea.size()>0) {
                        mail.setOrgWideEmailAddressId(owea.get(0).Id);
                    }
                    mail.setBccAddresses(new String[] {'minkeshp@askemc.com','sanket.goswami@getoncrm.com'});
                    mails.add(mail);
                }
            }
        }
        //Sending the Email
        SendEmail__c  objSendEmail = SendEmail__c.getValues('Send Email For Compliance');
        if(objSendEmail.Send_email_FROM_code__c==true) {
            Messaging.sendEmail(mails);
        }
        
    }
    
    //This method is used when deactivate date is removed and create a new reimbursement for that driver.
    public static void createReimRecord(List<Contact> newCon, Map<ID, Contact> conOldMap) {
        List<Employee_Reimbursement__c> reimToInsert   = new List<Employee_Reimbursement__c>();
        List<Bi_Weekly_Reimbursement__c> bireimToInsert   = new List<Bi_Weekly_Reimbursement__c>();
        map<string, Decimal> gasPriceMap = GetGasPrice();
        List<IRS_Mileage_Rate__c> objIRSRate = [SELECT id,year__c,IRS_Rate__c FROM IRS_Mileage_Rate__c WHERE year__c =: String.valueOf(System.today().year()) Limit 1];
        String IRSRateId;
        if(!objIRSRate.isEmpty()){

        IRSRateId= objIRSRate[0].id;
        }
        Boolean monthlyReimValue;

        for(Contact con : newCon) {
            if (con.Monthly_Reimbursement__c == true) {
                monthlyReimValue = true;
            }
            else{
                monthlyReimValue = false;
            }

            if(conOldMap.get(con.id).Deactivated_Date__c != null  && con.Deactivated_Date__c == null && (conOldMap.get(con.id).Deactivated_Date__c != con.Deactivated_Date__c) && con.Activation_Date__c <= System.today()){
                if(con.Role__c != 'Admin' && con.Role__c != 'Manager') {
                    TriggerConfig__c customSetting = TriggerConfig__c.getInstance('Defaulttrigger');
                    if(customSetting.ContactTriCommunityReimCreate__c == true && IRSRateId!=null) {
                        reimToInsert.add(CreateReimbursement(con,gasPriceMap,IRSRateId));
                        if(customSetting.ContactTriBiReimCreate__c == true) {
                            bireimToInsert.add(CreateBiweekReimbursement(con,gasPriceMap,monthlyReimValue));
                        }
                    }
                }
            }
            if(!reimToInsert.isEmpty()){
                try{
                    upsert reimToInsert;
                    if(!bireimToInsert.isEmpty()){
                        upsert bireimToInsert;
                    }
                } catch (DMLException e) {
                    system.debug('DMLException='+e);
                }
                
                ContactTriggerHelper.putHTTPEnableUserTriplog(con.id,false);
                RosterController.resetPassword(con.id);
                putHTTP(con.AccountId,con.External_Email__c);
            }
        }
    }
    
    public static map<string, Decimal> GetGasPrice(){
        map<string, Decimal> fuelPricereimMap = new map<string, Decimal>();
        String currentDate = String.valueOf(system.today());
        String[] splitDate = currentDate.split('-');
        
        if(integer.valueOf(splitDate[1]) == 01){
            fuelPriceDate = date.valueOf(string.valueOf(integer.valueOf(splitDate[0])-1) + '-12' + '-01' );   
        } else {
            fuelPriceDate = date.valueOf(splitDate[0] + '-' + string.valueOf(integer.valueOf(splitDate[1])-1) + '-01');
        }
        SYSTEM.DEBUG('fuelPriceDate===' + fuelPriceDate);
        for(Gas_Prices__c objGasPrice : [SELECT id,
                                         name,
                                         City__c,
                                         State__c, 
                                         Fuel_Price__c, 
                                         Month_Year__c,
                                         Month_State_City__c 
                                         FROM Gas_Prices__c 
                                         WHERE  Month_Year__c =: date.valueOf(fuelPriceDate)
                                         ]) {
                                             fuelPricereimMap.put(objGasPrice.Month_State_City__c, objGasPrice.Fuel_Price__c); 
                                         }
         return fuelPricereimMap;
    }
    
    public static Employee_Reimbursement__c CreateReimbursement(Contact con, map<string, Decimal> monthFuelPricereimMap,String IRSRateId){
        //EMC-283 Update Fuel Price based on the contact city and state as past month's fuel price FROM Gas price object. 
        
        String currentDate = String.valueOf(system.today());
        String[] splitDate = currentDate.split('-');
        String lastMonth = Utils.fetchMonths(1, -1)[0];
        Employee_Reimbursement__c er = new Employee_Reimbursement__c();
        er.Fixed_Amount__c = con.Fixed_Amount__c;
        er.Status__c = 'Pending';
        er.Maintenance_and_Tires__c = con.Maintenance_and_Tires__c;
        er.MPG__c = con.MPG__c;
        er.Contact_Id__c = con.id;
        er.Name = con.Name__c + ':' + lastMonth;
        er.Month__c = lastMonth;
        
        if(integer.valueOf(splitDate[1]) == 01){
            if (monthFuelPricereimMap.containsKey(con.MailingCity+ con.MailingState + '12' + string.valueOf(integer.valueOf(splitDate[0])-1)) ) {
                er.Fuel_Price__c = monthFuelPricereimMap.get(con.MailingCity+ con.MailingState + '12' + string.valueOf(integer.valueOf(splitDate[0])-1)) ;
            }   else {
                er.Fuel_Price__c = 0;
            }
        }   else {   
            if (monthFuelPricereimMap.containsKey(con.MailingCity + con.MailingState + string.valueOf(integer.valueOf(splitDate[1])-1) + splitDate[0]) ) {
                er.Fuel_Price__c = monthFuelPricereimMap.get(con.MailingCity + con.MailingState + string.valueOf(integer.valueOf(splitDate[1])-1) + splitDate[0]);
            }   else {
                er.Fuel_Price__c = 0;
            }
        }
        er.IRS_Mileage_Rate__c = IRSRateId;
        return er;
    }    
    public static void  communityReimCreate(List<Contact> contactList) {
        List<Employee_Reimbursement__c> reimToInsert   = new List<Employee_Reimbursement__c>();
        List<Bi_Weekly_Reimbursement__c> bireimToInsert   = new List<Bi_Weekly_Reimbursement__c>();
        List<IRS_Mileage_Rate__c> objIRSRate = [SELECT id,year__c,IRS_Rate__c FROM IRS_Mileage_Rate__c WHERE year__c =: String.valueOf(System.today().year()) Limit 1];
        String IRSRateId;
        if(!objIRSRate.isEmpty()){
             IRSRateId= objIRSRate[0].id;
        }
        map<string, Decimal> gasPriceMap = GetGasPrice();
        Boolean monthlyReimValue;

        TriggerConfig__c customSetting = TriggerConfig__c.getInstance('Defaulttrigger');
        for(Contact con : contactList){
            if (con.Monthly_Reimbursement__c == true) {
                monthlyReimValue = true;
            }
            else{
                monthlyReimValue = false;
            }

            if(!System.isBatch()){
                putHTTP(con.AccountId,con.External_Email__c);
            }
            if(con.Role__c != 'Admin' && con.Role__c != 'Manager' && con.Deactivated_Date__c == null) {
                if(con != null && customSetting.ContactTriCommunityReimCreate__c == true && IRSRateId!=null ) {
                    reimToInsert.add(CreateReimbursement(con,gasPriceMap,IRSRateId));
                    if(customSetting.ContactTriBiReimCreate__c == true ) {
                        bireimToInsert.add(CreateBiweekReimbursement(con,gasPriceMap,monthlyReimValue)); 
                    }
                }               
            }
        }
        if(!reimToInsert.isEmpty()) {
            insert reimToInsert;            
        }
        if(!bireimToInsert.isEmpty()){
            insert bireimToInsert;
        }
    }

   /* public static map<string, Decimal> CreateBiweekReimbursementForMap(){
        map<string, Decimal> monthlyFuelPriceMap = new map<string, Decimal>(); 
        List<String> dtList = new list<String>();
        string splitEndDate;
        splitdate = dtList[1].split('-');
        splitEndDate = splitdate[1]+'/'+splitdate[2]+'/'+splitdate[0];

        if(integer.valueOf(splitdate[1]) == 01){
            fuelPriceDate = date.valueOf(string.valueOf(integer.valueOf(splitdate[0])-1) + '-12' + '-01' );   
        } else {
            fuelPriceDate = date.valueOf(splitdate[0] + '-' + string.valueOf(integer.valueOf(splitdate[1])-1) + '-01');
        } 
        
        for(Gas_Prices__c objGasPrice : [SELECT id,
                                         name,
                                         City__c,
                                         State__c, 
                                         Fuel_Price__c, 
                                         Month_Year__c,
                                         Month_State_City__c 
                                         FROM Gas_Prices__c 
                                         WHERE  Month_Year__c =: date.valueOf(fuelPriceDate)]) {
                                             
                                            monthlyFuelPriceMap.put(objGasPrice.Month_State_City__c, objGasPrice.Fuel_Price__c); 
                                         }
        return monthlyFuelPriceMap;
    }*/
    //This method is used to create a Bi-Weekly reimbursment
    public static Bi_Weekly_Reimbursement__c CreateBiweekReimbursement(Contact con, map<string, Decimal> monthlyFuelPriceMap, Boolean monthlyReimbursecheckValue){        
        contact contest = [select id,account.Pay_Period_Days__c,account.Pay_Period_Start_Date__c FROM contact WHERE id =: con.id];
        List<String> dtList = new list<String>();
        Date payStartDate = contest.Account.Pay_Period_Start_Date__c;
        Date endDate;
        do {
            endDate = payStartdate.addDays(Integer.valueof(contest.Account.Pay_Period_Days__c));
            if(payStartdate != null && payStartdate <= System.today() && System.today() <= endDate) {
                dtList.add(String.valueof(payStartdate));
                dtList.add(String.valueof(endDate));
            }
            payStartdate = endDate.addDays(1);
        } while(endDate <= System.today());
        string splitStartDate;
        string splitEndDate;
        if(dtList.size() > 0){
            string[] splitsdate = dtList[0].split('-');
            splitStartDate = splitsdate[1]+'/'+splitsdate[2]+'/'+splitsdate[0];
            splitdate = dtList[1].split('-');
            splitEndDate = splitdate[1]+'/'+splitdate[2]+'/'+splitdate[0];
            //EMC -283 use to update fuel price of biweekly reim based on the contact city and state of past month's fuel price FROM gas price object
            
        }
        Bi_Weekly_Reimbursement__c er = new Bi_Weekly_Reimbursement__c();
        er.Fixed_Amount__c = con.Fixed_Amount__c;
        er.Status__c = 'Pending';
        er.Maintenance_and_Tires__c = con.Maintenance_and_Tires__c;
        er.MPG__c = con.MPG__c;
        er.Contact__c = con.id;
        er.Name = splitStartDate+' to '+ splitEndDate;
        er.Count_Error_Check__c = 0;
        if(monthlyReimbursecheckValue != true){
            if(integer.valueOf(splitdate[1]) == 01){
                if (monthlyFuelPriceMap.containsKey(con.MailingCity+ con.MailingState + '12' + string.valueOf(integer.valueOf(splitdate[0])-1)) ) {
                    er.Fuel_Price__c = monthlyFuelPriceMap.get(con.MailingCity+ con.MailingState + '12' + string.valueOf(integer.valueOf(splitdate[0])-1)) ;
                }   else {
                    er.Fuel_Price__c = 0;
                }
            }   else {
                if (monthlyFuelPriceMap.containsKey(con.MailingCity+ con.MailingState + string.valueOf(integer.valueOf(splitdate[1])-1) + splitdate[0]) ) {
                    er.Fuel_Price__c = monthlyFuelPriceMap.get(con.MailingCity+ con.MailingState + string.valueOf(integer.valueOf(splitdate[1])-1) + splitdate[0]);
                }   else {
                    er.Fuel_Price__c = 0;
                }
            }
        } else{
            er.Fuel_Price__c = 0;
        }
        er.Start_Date__c = Date.valueOf(dtList[0]);
        er.End_Date__c = Date.valueOf(dtList[1]);
        return er;
    }
    //This method is used send a welcome email FROM triplog or mlog to install a application.
    @future (callout=true)
    Public static void putHTTP(String accountID,String empEmail) {
        putHTTPCallout(AccountId, empEmail);
    }
    
    Public static void putHTTPCallout(String accountID,String empEmail) {
        List<Account> accountList = [SELECT id,Triplog_API__c,MburseDashboardRedirect__c  
                                     FROM Account 
                                     WHERE Id =: accountID];
         if(accountList.size() > 0 && accountList[0].MburseDashboardRedirect__c == false){
            String MLOGACCOUNT = System.Label.Triplog_New_URL  + ',' + System.Label.Triplog_New_URL2;
            String body, apiToken;
            
            if(accountList.size() > 0 ){
                apiToken = accountList[0].Triplog_API__c;
            }
            String jsonSubset;
            String baseURL;
            if(apiToken != null){
                baseURL = !mLOGACCOUNT.Contains(apiToken) ? StaticValues.TRIPLOG_BASEURL : StaticValues.MLOG_BASEURL;
            }
            String rosterURL = baseURL + StaticValues.WELCOME_SUFFIX;
            body = '{"emails":[';
            body = body + String.valueof(empEmail) +']}';
            TriplogPutCall__c objTriplog = TriplogPutCall__c.getValues('RosterControllerPutCall');
            HttpRequest putReq = new HttpRequest();
            Http putHTTP = new Http();
            HttpResponse putRes = new HttpResponse();
            
            putReq.setEndpoint(rosterURL);
            putReq.setMethod('PUT');
            putReq.setBody(body);
            putReq.setTimeout(120000);
            putReq.setHeader('Authorization', 'apikey ' + apiToken);
            putReq.setHeader('Content-Type', 'application/json');
            if(!Test.isRunningTest() && objTriplog.TriplogPut__c == true){
                if(objTriplog.TriplogPut__c == true){
                    putRes = putHTTP.send(putReq);
                    Map<String,Object> jsonMap = (Map<String, Object>)JSON.deserializeUntyped(putRes.getBody());
                    jsonSubset = JSON.serialize(jsonMap.get('message'));
                }
            } 
         }
          
    }

/**
 * @Date: 11-01-2023 | Niraj Sahedani
 * @description: This Method is used to Deacivate user in mLog if user change their role in salesforce
 */
    @InvocableMethod(label='Get Role Change Value' description='Returns the list of Role Change Contacts' category='Contact')
    public static void roleChange(List<String> ids){
        System.debug('Call Method from Flow');
        ContactTriggerHelper.putHTTPEnableUserTriplog(ids[0],true);
    }

    @Future(callout = true)
    public static void putHTTPEnableUserTriplog(String conId, Boolean userStatus) {
        System.debug('putHTTPEnableUserTriplog: '+ conId);
        Http h;
        HttpRequest req;
        HttpResponse res;
        String mLOGACCOUNT = System.Label.Triplog_New_URL + ',' + System.Label.Triplog_New_URL2; 
        for(Contact conObj : [SELECT id,Triplog_UserID__c,Email, Account.Triplog_API__c  FROM Contact WHERE id =: conId]) {
            if(conObj.Triplog_UserID__c != null && conObj.Account.Triplog_API__c != null){
                String baseURL = !mLOGACCOUNT.Contains( conObj.Account.Triplog_API__c ) ? StaticValues.TRIPLOG_BASEURL : StaticValues.MLOG_BASEURL;
                JSONGenerator gen = JSON.createGenerator(true);
                gen.writeStartObject();
                gen.writeBooleanField('disabled',userStatus);
                System.debug('mail id: '+ conObj.Email);
                gen.writeStringField('email',conObj.Email);
                gen.writeEndObject();
                h = new Http();
                req = new HttpRequest();
                req.setEndpoint( baseURL + '/api/users/' + conObj.Triplog_UserID__c);
                req.setMethod('PUT');
                req.setTimeout(120000);
                req.setbody(gen.getAsString());
                req.setHeader('Content-Type', 'application/json');
                req.setHeader('Authorization', 'apikey '+ conObj.Account.Triplog_API__c);
                if(!Test.isRunningTest())
                {
                    res = h.send(req);            
                }
            }
        }
    }    
    
    //Send Email regarding New Drivers AI-000437
    public static void sendEmailForNewContact(List<Contact> contactList) {
        Map<Id,String> accountNameMap = new Map<Id,String>();
        for(Account objAccount : [SELECT ID,Name FROM account WHERE isUsingTriplog__c = true]){
            accountNameMap.put(objAccount.id,objAccount.Name);
        }
        
        EmailTemplate templateId = [SELECT Id, Subject,HtmlValue, body FROM EmailTemplate WHERE developerName = 'New_Contact_Inform_Driver_Services' Limit 1];
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>();
        OrgWideEmailAddress[] owea = [SELECT Id,Address FROM OrgWideEmailAddress WHERE Address = 'driverservices@mburse.com'];
        for(Contact contObj : contactList){
            String newemailBody = templateId.HtmlValue;
            Messaging.SingleEmailMessage mail =  new Messaging.SingleEmailMessage();
            mail.setTargetObjectId(contObj.OwnerId);
            string[] toAddresses = new string[]{System.Label.DriverServicesEmail};
                mail.setToAddresses(toAddresses);
            mail.setReplyTo('mburse@driverservices.com');            
            if(accountNameMap.get(contObj.AccountId) != null){
                newemailBody = newemailBody.replace('{!Account.Name}',accountNameMap.get(contObj.AccountId));
            }
            IF(contObj.Role__c != null){
                newemailBody = newemailBody.replace('{!Role}',contObj.Role__c ); 
            }
            newemailBody = newemailBody.replace('{!date}',String.valueOf(System.today())); 
            newemailBody = newemailBody.replace('{!Email}',contObj.External_Email__c); 
            newemailBody = newemailBody.replace('{!$Label.Driver_Forword_Logo}', System.Label.Driver_Forword_Logo);
            mail.setSubject(templateId.Subject);
            mail.setHtmlBody(newemailBody);
            mail.setOrgWideEmailAddressId(owea.get(0).Id);
            mail.setSaveAsActivity(false);
            mails.add(mail);
            
        }      
        if(!Test.isRunningTest()){  
            Messaging.sendEmail(mails);
        }
    }
    
    
    //Track History of Contact
    public static void TrackHistory(Map<ID,Contact> conOld,List<Contact> contactListNew,Map<String,String> managerNames){
        //Map for Manager Name
        //Audit Trial
        list<AuditTrail__c> newAuditTrialCreate=new list<AuditTrail__c>();
        for(Contact c:contactListNew){
            if(c.id == conOld.get(c.id).id){
                if(c.Fixed_Amount__c != conOld.get(c.id).Fixed_Amount__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Fixed Amount',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = string.valueof(c.Fixed_Amount__c),OldValue__c = String.Valueof(conOld.get(c.id).Fixed_Amount__c),Contact__c=c.id));
                if(c.Maintenance_and_Tires__c != conOld.get(c.id).Maintenance_and_Tires__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Maintenance and Tires',Timestamp__c=Datetime.now(),Modifiedby__c=UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c=String.valueof(c.Maintenance_and_Tires__c),OldValue__c=string.valueof(conOld.get(c.id).Maintenance_and_Tires__c),Contact__c=c.id));
                if(c.Vehicle1Odometer__c != conOld.get(c.id).Vehicle1Odometer__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Vehicle 1 Odometer',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = String.Valueof(c.Vehicle1Odometer__c),OldValue__c = String.Valueof(conOld.get(c.id).Vehicle1Odometer__c),Contact__c = c.id));
                if(c.Vehicle2Odometer__c != conOld.get(c.id).Vehicle2Odometer__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Vehicle 2 Odometer',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = String.Valueof(c.Vehicle2Odometer__c),OldValue__c = String.Valueof(conOld.get(c.id).Vehicle2Odometer__c),Contact__c = c.id));
                if(c.MailingStreet != conOld.get(c.id).MailingStreet || c.MailingCity != conOld.get(c.id).MailingCity || c.MailingState != conOld.get(c.id).MailingState || c.MailingPostalCode != conOld.get(c.id).MailingPostalCode || c.MailingCountry != conOld.get(c.id).MailingCountry ){
                    string newval = (c.MailingStreet != null?c.MailingStreet:'') +' '+ (c.MailingCity != null?c.MailingCity:'') +' '+ (c.MailingState != null?c.MailingState:'') +' '+ (c.MailingPostalCode != null?c.MailingPostalCode:'') +' '+ (c.MailingCountry != null?c.MailingCountry:'');
                    string oldVal = (conOld.get(c.id).MailingStreet != null?conOld.get(c.id).MailingStreet:'') +' '+ (conOld.get(c.id).MailingCity != null?conOld.get(c.id).MailingCity:'') +' '+ (conOld.get(c.id).MailingState!=null?conOld.get(c.id).MailingState:'') +' '+ (conOld.get(c.id).MailingPostalCode!=null?conOld.get(c.id).MailingPostalCode:'') +' '+ (conOld.get(c.id).MailingCountry!=null?conOld.get(c.id).MailingCountry:'');
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c='Address',Timestamp__c = Datetime.now(),Modifiedby__c=UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c=newval,OldValue__c=oldVal,Contact__c=c.id));
                }
                if(c.MPG__c != conOld.get(c.id).MPG__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Miles per Gallon',Timestamp__c = Datetime.now(),Modifiedby__c=UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = String.Valueof(c.MPG__c),OldValue__c = String.Valueof(conOld.get(c.id).MPG__c),Contact__c = c.id));
                if(c.Manager__c != conOld.get(c.id).Manager__c) 
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Manager',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = managerNames.get(c.Manager__c),OldValue__c = managerNames.get(conOld.get(c.id).Manager__c),Contact__c = c.id));
                if(c.compliancestatus__c != conOld.get(c.id).compliancestatus__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Compliance Status',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = String.Valueof(c.compliancestatus__c),OldValue__c = String.Valueof(conOld.get(c.id).compliancestatus__c),Contact__c = c.id));
                if(c.Vehicle_Type__c != conOld.get(c.id).Vehicle_Type__c)
                    newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Standard Vehicle Make Model and Year',Timestamp__c = Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c=c.Vehicle_Type__c,OldValue__c = conOld.get(c.id).Vehicle_Type__c,Contact__c=c.id));
            }
            if(c.Deactivated_Date__c != conOld.get(c.Id).Deactivated_Date__c)
                newAuditTrialCreate.add(new AuditTrail__c(Field__c = 'Deactivation Date',Timestamp__c=Datetime.now(),Modifiedby__c = UserInfo.getFirstName()+' '+UserInfo.getLastName(),NewValue__c = String.valueOf(c.Deactivated_Date__c),OldValue__c = String.valueOf(conOld.get(c.id).Deactivated_Date__c),Contact__c = c.id));
        }
        
        if(newAuditTrialCreate.Size()>0)
            upsert newAuditTrialCreate; 
    }
    
    //Populate Contact Fields
    public static void populatestaticValue(List<Contact> conList){
        Boolean isEMCUser = [select UserRole.name FROM User WHERE Id=:userinfo.getUserId()].UserRole.Name == 'EMC' ? true : false;
        
        for(Contact c : conList) {
            if(!isEMCUser){
                c.Pay_Number__c = '3';
                c.Batch_ID_Fixed__c = 'M351';
                c.Adjust_Ded_Code_Fixed__c = 'MR';
                c.Batch_Variable_ID__c = 'M352';
                c.Adjust_Ded_Code_Variable__c = 'VR';
                c.Special_Action__c = 'W';  
            }  else {
                c.Pay_Number__c = String.IsBlank(c.Pay_Number__c) ? '3' : c.Pay_Number__c;
                c.Batch_ID_Fixed__c = String.IsBlank(c.Batch_ID_Fixed__c) ? 'M351' : c.Batch_ID_Fixed__c;
                c.Adjust_Ded_Code_Fixed__c = String.IsBlank(c.Adjust_Ded_Code_Fixed__c) ? 'MR' : c.Adjust_Ded_Code_Fixed__c;
                c.Batch_Variable_ID__c = String.IsBlank(c.Batch_Variable_ID__c) ? 'M352' : c.Batch_Variable_ID__c;
                c.Adjust_Ded_Code_Variable__c = String.IsBlank(c.Adjust_Ded_Code_Variable__c) ? 'VR' : c.Adjust_Ded_Code_Variable__c;
                c.Special_Action__c = String.IsBlank(c.Special_Action__c) ? 'W' : c.Special_Action__c;  
            } 
        }
    }
    
    /* EMC - 333
* This Method is used to when driver is insert, driver packet is  automatically added in file section 
* FROM his Account's file section.
*/
    Public Static void insertDriverAggrementFile(Map<Id, Contact> conNewMap) {
        Map<id, List<ID>> mapOfAccountIDvsCon  = new Map<ID, List<Id>>();
        List<ID> accIdList = new List<ID>();
        Map<ID, contact> mapConIdvsCon = new Map<ID, Contact>();
        set<Id> lstConId = new set<Id>();
        Map<Id, Id> mapConIdvsCdlId = new Map<Id, Id>();
        
        for(Contact objcon : [SELECT id,name,Account.isUsingTriplog__c,AccountID 
                              FROM Contact
                              WHERE id in: conNewMap.keyset()]){
                                  accIdList.add(objcon.AccountID);
                                  mapConIdvsCon.put(objcon.Id, objcon);
                                  lstConId.add(objcon.Id);
                                  if(!mapOfAccountIDvsCon.containsKey(objCon.AccountID)){
                                      mapOfAccountIDvsCon.put(objCon.AccountID, new List<Id> { objCon.ID });
                                  }else{
                                      mapOfAccountIDvsCon.get(objCon.AccountID).add(objCon.ID);
                                  }   
                              }
        List<ContentDocumentLink> lstContentDocumentLink = new List<ContentDocumentLink>();
        if(accIdList != null && accIdList.size() > 0){
            for(ContentDocumentLink cdl : [SELECT ContentDocument.title,LinkedEntityId,ContentDocumentId 
                                           FROM ContentDocumentLink 
                                           WHERE LinkedEntityId IN :  lstConId
                                           AND ContentDocument.Title like '%Driver Agreement%'
                                           ORDER BY ContentDocument.CreatedDate]){
                                               mapConIdvsCdlId.put(cdl.LinkedEntityId, cdl.Id);
                                           }
            for(ContentDocumentLink cdl : [SELECT ContentDocument.title,LinkedEntityId,ContentDocumentId 
                                           FROM ContentDocumentLink 
                                           WHERE LinkedEntityId IN :  accIdList
                                           AND ContentDocument.Title like '%Driver Agreement%'
                                           ORDER BY ContentDocument.CreatedDate DESC LIMIT 1]) {
                                               
                                               if(mapOfAccountIDvsCon.containsKey(cdl.LinkedEntityId)){
                                                   for(ID obj: mapOfAccountIDvsCon.get(cdl.LinkedEntityId)){
                                                       if(!mapConIdvsCdlId.containsKey(obj)){
                                                           ContentDocumentLink objCDL = new ContentDocumentLink();
                                                           objCDL.ContentDocumentId = cdl.ContentDocumentId;
                                                           objCDL.LinkedEntityId = obj;
                                                           objCDL.ShareType = 'I'; 
                                                           objCDL.Visibility = 'AllUsers'; 
                                                           lstContentDocumentLink.add(objCDL);
                                                       }
                                                   }        
                                               }
                                           }
        }
        if(lstContentDocumentLink != null && lstContentDocumentLink.size() > 0){
            Insert lstContentDocumentLink;
        }
    }
    
    /* EMC - 357 
New Contact is created at that time we have to update plan parameter section's field 
(Insurance Plan,Plan Years,Vehicle Value and Business Use) value update automatically based on account's same fields .
*/
    public static void updatePlanParameter(Set<String> conIdList, Set<String> setaccountid) {
        Map<Id,String> mapIdvsInsplan = new Map<Id, String>();
        Map<Id,Decimal> mapIdvsPlanyear = new Map<Id, Decimal>();
        Map<Id,Decimal> mapIdvsBusinessUse = new Map<Id, Decimal>();
        Map<String,Decimal> mapVehicleValue = new Map<String, Decimal>();
        String[] splitactivationdate ; 
       
        // monthvsCompMilieageMap is used for count compliance mileages.
        Map<String,Decimal> monthvsCompMilieageMap = new Map<String,Decimal> {'12' => 4583.3334, '01' => 4166.6668, '02' => 3750, '03' => 3333.3336, '04' => 2916.667,
                                                                                    '05' => 2500, '06' => 2083.3334, '07' => 1666.6668, '08' => 1250, '09' => 833.3334,
                                                                                    '10' => 416.6668, '11' => 0};
        
        
        for (Vehicle_Value__c vehValue : [SELECT id,Account__c, Vehicle_URL_Mapping__r.Name,Value__c  
                                          FROM Vehicle_Value__c 
                                          WHERE Account__c IN :setaccountid]){
                                              mapVehicleValue.put(vehValue.Account__c + '-' + vehValue.Vehicle_URL_Mapping__r.Name.toUpperCase() , vehValue.Value__c);
                                          }
        for(Account acc : [SELECT id,name,Insurance_Plan__c, Plan_Years__c, Vehicle_Types__c, Business_Use__c 
                           FROM Account 
                           WHERE ID IN :setaccountid]){
                               mapIdvsInsplan.put(acc.ID, acc.Insurance_Plan__c);
                               mapIdvsPlanyear.put(acc.ID, acc.Plan_Years__c);
                               mapIdvsBusinessUse.put(acc.ID, acc.Business_Use__c);
                           }
        List<contact> updateConList = new List<Contact>();
        if(conIdList.size() > 0) {
        for(Contact con : [SELECT id,name,AccountId,Activation_Date__c,Vehicle_Type__c,Insurance_Plan__c, Plan_Years__c,Business_Use__c,Role__c 
                            FROM contact 
                            WHERE Id IN :conIdList]) {
                                if(mapIdvsInsplan.containsKey(con.AccountId)){
                                    con.Insurance_Plan__c = mapIdvsInsplan.get(con.AccountID);
                                    con.Plan_Years__c = mapIdvsPlanyear.get(con.AccountID);
                                    con.Business_Use__c = mapIdvsBusinessUse.get(con.AccountID);
                                }
                                if(mapVehicleValue.containsKey(con.AccountId + '-' + con.Vehicle_Type__c.toUpperCase())){
                                    con.Vehicle_Value__c = mapVehicleValue.get(con.AccountId + '-' + con.Vehicle_Type__c.toUpperCase());
                                }    else {
                                    con.Vehicle_Value__c = null;
                                }
                /*
                        EMC-372        
                based On the activation date of drivers compliance mileages auto calculate.
                Maximum Compliance Mileages per year is 5000 mileage.

                for single month compliance mileages are  5000/12 =  416.66666
                now if the contact is activated from 1st date of the moth to 7th date of the month than compliance mileages for that month is  416.66666
                if Driver is activate from 8th to 15th date of the month than compliance mileages for that month is (416.6666/4) * 3 = 312.495(three week of proration)
                if Driver is activate from 16th to 23th date of the month than compliance mileages for that month is (416.6666/4) * 2 = 208.33(Two week of proration)
                And if Driver is activate after 23th date of the month than compliance mileages for that month is 416.6666/4 = 104.165(One week of proration)

                Example :- 
                if any driver is activate on the 5th of march than Compliance Mileages are 10(From March to December )*416.6666 = 416.666
                if driver is activate on the 8th of march than Compliance Mileages are (9 (From April to December )* 416.6666) + 312.495(March month 3 Weeks of Prorations) = 4062.4944
                if driver is activate on the 20th of march than Compliance Mileages are (9(From April to December )* 416.6666) + 208.33 (March month's 2 Weeks of Prorations) = 3958.33
                if driver is activate on the 28th of march than Compliance Mileages are (9 (From April to December )* 416.6666) + 104.165 (March month's 1 Weeks of Prorations) = 3854.1644
                */
                                if(con.Activation_Date__c != null){
                                   splitactivationdate = String.valueOf(con.Activation_Date__c).split('-');
                                    system.debug('splitactivationdate==' + splitactivationdate[1]);
                                    system.debug('date==' + splitactivationdate[2]);
                                    system.debug('year==' + splitactivationdate[0]);
                                    if(Integer.valueOf(splitactivationdate[0]) == System.today().year()){
                                        if(monthvsCompMilieageMap.containsKey(splitactivationdate[1])){
                                            if(Integer.valueOf(splitactivationdate[2]) < 8){
                                                con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 416.6666;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 8 && Integer.valueOf(splitactivationdate[2]) <= 15) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 312.495;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 16 && Integer.valueOf(splitactivationdate[2]) <= 23) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 208.33;
                                            }   else {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 104.165;
                                            }
                                        }
                                    } else if(Integer.valueOf(splitactivationdate[0]) < System.today().year()){
                                        if(splitactivationdate[1] == '12'){
                                           // con.Compliance_Mileage__c = 5000;
                                           if(Integer.valueOf(splitactivationdate[2]) < 8){
                                                con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 416.6666;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 8 && Integer.valueOf(splitactivationdate[2]) <= 15) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 312.495;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 16 && Integer.valueOf(splitactivationdate[2]) <= 23) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 208.33;
                                            }   else {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 104.165;
                                            }
                                        } else {
                                            con.Compliance_Mileage__c = 5000;
                                        }
                                        
                                    }  else if(Integer.valueOf(splitactivationdate[0]) > System.today().year()){                                            
                                            if(Integer.valueOf(splitactivationdate[2]) < 8){
                                                con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 416.6666;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 8 && Integer.valueOf(splitactivationdate[2]) <= 15) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 312.495;
                                            }   else if (Integer.valueOf(splitactivationdate[2]) >= 16 && Integer.valueOf(splitactivationdate[2]) <= 23) {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 208.33;
                                            }   else {
                                                    con.Compliance_Mileage__c = (monthvsCompMilieageMap.get(splitactivationdate[1])) + 104.165;
                                            }
                                    }
                                    /*else if(Integer.valueOf(splitactivationdate[0]) > System.today().year() || Integer.valueOf(splitactivationdate[0]) < System.today().year()){
                                        con.Compliance_Mileage__c = 5000;
                                    }*/
                                } 
                                    updateConList.add(con);
                            }   
        }
        if(updateConList.size() > 0){
            Update updateConList;
        }
    }
    /*********************************************************************************************************************************
     * this class update the value of map_country field on the contact with every change in zipcode of contact in the contact object * 
     *********************************************************************************************************************************/
    @future(callout=true)
    public static void updateMapCountry(set<String> conlist1){
        list<contact> conlist =[SELECT id,Map_Country__c,MailingPostalCode FROM contact WHERE id IN :conlist1 AND MailingPostalCode!=null];
        list<contact> conlistUpdated =new list<contact>();
            for(contact con :conlist){
                String zipCode= con.MailingPostalCode;
                Http h = new Http();
                HttpRequest req = new HttpRequest();
                req.setEndpoint('https://maps.googleapis.com/maps/api/geocode/json?address='+zipCode+'&sensor=false&key=AIzaSyDnaP6tZBTFOCUpfNbCXMZwnLDTQ3aOrug');
                req.setMethod('GET');
                req.setTimeout(5000);
                try{
                    HttpResponse res = h.send(req);
                    // System.debug('res.getBody(): '+res.getBody());
                    Map<String, Object> jsonMap = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                    List<Object> results = (List<Object>) jsonMap.get('results');
                    if (results != null && !results.isEmpty()) {
                        Map<String, Object> firstResult = (Map<String, Object>) results[0];
                        String formattedAddress = (String) firstResult.get('formatted_address');
                    // Print the result or use it as needed
                        System.debug(formattedAddress);
                        String Country ;
                        Country = formattedAddress.substring(formattedAddress.lastindexOf(',')+1);
                        System.debug(Country);
                
                        con.Map_Country__c=country;
                        conlistUpdated.add(con);
                    }
                }
                catch (Exception e) {
                    system.debug(e);
                }
            if(!conlistUpdated.isEmpty()){
                update conlistUpdated;  
            }
        }
    }
    /**************************************************************************************************************************************************************************
     * this method is there to create the user in mlog when the role is changed in the org from manager to driver manager and creating reimbersemner and biweekreimbersement  *
     **************************************************************************************************************************************************************************/
    public static void creatuserreimbermentrecrds(List<Contact> newCon, Map<ID, Contact> conOldMap){
        System.debug('inside the if statemen 5');
        List<Employee_Reimbursement__c> reimToInsert   = new List<Employee_Reimbursement__c>();
        List<Bi_Weekly_Reimbursement__c> bireimToInsert   = new List<Bi_Weekly_Reimbursement__c>();
        map<string, Decimal> gasPriceMap = GetGasPrice();
        List<IRS_Mileage_Rate__c> objIRSRate = [SELECT id,year__c,IRS_Rate__c FROM IRS_Mileage_Rate__c WHERE year__c =: String.valueOf(System.today().year()) Limit 1];
        Profile userProfile = [SELECT Id, Name FROM Profile WHERE   Name = 'Customer Community Login User - Manager/Driver' limit 1];
        System.debug('inside the if statemen 6');
        String IRSRateId;
        if(!objIRSRate.isEmpty()){

        IRSRateId= objIRSRate[0].id;
        }
    

        for(Contact con : newCon) {
            TriggerConfig__c customSetting = TriggerConfig__c.getInstance('Defaulttrigger');
            
            System.debug('inside the if statemen 7');
            System.debug('inside the if statemen 1');
            if(customSetting.ContactTriCommunityReimCreate__c == true && IRSRateId!=null) {
                System.debug('inside the if statemen 2');
                reimToInsert.add(CreateReimbursement(con,gasPriceMap,IRSRateId));
                if(customSetting.ContactTriBiReimCreate__c == true) {
                    System.debug('inside the if statemen 3');
                    bireimToInsert.add(CreateBiweekReimbursement(con,gasPriceMap,con.Monthly_Reimbursement__c));
                }
            }
                
            
            if(!reimToInsert.isEmpty()){
                try{
                    upsert reimToInsert;
                    if(!bireimToInsert.isEmpty()){
                        upsert bireimToInsert;
                    }
                } catch (DMLException e) {
                    system.debug('DMLException='+e);
                }
            }

        
            list<ContentDocumentLink> cdl = [SELECT ContentDocument.title,LinkedEntityId,ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId  =:  con.Id AND ContentDocument.Title like '%Driver Agreement%'ORDER BY ContentDocument.CreatedDate];
            if(Test.isRunningTest()){
                cdl.clear();
            }
            if(cdl.isempty()){
                List<ContentDocumentLink> lstContentDocumentLink = new List<ContentDocumentLink>();
                
                for(ContentDocumentLink cdl1 : [SELECT ContentDocument.title,LinkedEntityId,ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId  =:  con.AccountId AND ContentDocument.Title like '%Driver Agreement%' ORDER BY ContentDocument.CreatedDate DESC LIMIT 1]){
                    ContentDocumentLink objCDL = new ContentDocumentLink();
                    objCDL.ContentDocumentId = cdl1.ContentDocumentId;
                    objCDL.LinkedEntityId = con.Id;
                    objCDL.ShareType = 'I';
                    objCDL.Visibility = 'AllUsers';
                    lstContentDocumentLink.add(objCDL);
                }
                
                if(lstContentDocumentLink != null && lstContentDocumentLink.size() > 0 && !Test.isRunningTest()){
                    Insert lstContentDocumentLink;
                }
                if(con.Triplog_UserID__c==null){
                    list<Id> conIdList=new list<Id>{con.id};
                        //RosterController.postHTTPCreateNewUserTriplog(conIdList);
                        CreateNewUsermLogBatch crtmLogUser = new CreateNewUsermLogBatch();
                        Database.executebatch(crtmLogUser, 200);
                    system.debug('after creating user in the mlog ');
                }else{
                    updateUserInMlog(con.id);
                }
            }
        }

    }
    @future(callout=true)
    public static void updateUserInMlog(String conId){
        System.debug('IN updateUserInMlog');
        Http h;
        HttpRequest req;
        HttpResponse res;
        String mLOGACCOUNT = System.Label.Triplog_New_URL + ',' + System.Label.Triplog_New_URL2;
        for(Contact conObj : [SELECT id,Triplog_UserID__c,Email, Account.Triplog_API__c  FROM Contact WHERE id =: conId]) {
            if(conObj.Triplog_UserID__c != null && conObj.Account.Triplog_API__c != null){
                String baseURL = !mLOGACCOUNT.Contains( conObj.Account.Triplog_API__c ) ? StaticValues.TRIPLOG_BASEURL : StaticValues.MLOG_BASEURL;
                JSONGenerator gen = JSON.createGenerator(true);
                gen.writeStartObject();
                gen.writeStringField('isDriver','true');
                gen.writeEndObject();
                h = new Http();
                req = new HttpRequest();
                req.setEndpoint( baseURL + StaticValues.DEACTIVATE_USER_SUFFIX+'/'+conObj.Triplog_UserID__c);
                String st=baseURL + StaticValues.DEACTIVATE_USER_SUFFIX;
                system.debug('st--->>'+st);
                req.setMethod('PUT');
                req.setTimeout(120000);
                req.setbody(gen.getAsString());
                req.setHeader('Content-Type', 'application/json');
                req.setHeader('Authorization', 'apikey '+ conObj.Account.Triplog_API__c);
                if(!Test.isRunningTest())
                {
                    res = h.send(req);
                    system.debug('response--->>> '+res.getbody());
                }
            }
        }
    }
    @future
    public static void updateUser(String conId,String role){
        list<Profile> profileList = [SELECT Id, Name FROM Profile WHERE Name = 'Customer Community Login User - Driver' OR  Name = 'Customer Community Login User - Manager' OR  Name = 'Customer Community Login User - Super Manager' OR  Name = 'Customer Community Login User - Manager/Driver' OR  Name = 'Customer Community Login User - Super Manager/Driver'];
                
        Map<string,Id> profilemap = new Map<string,ID>();
        for(Profile profileObj : profileList){
            if(profileObj.Name == 'Customer Community Login User - Driver' ){
                profilemap.put('Driver',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Manager'){
                profilemap.put('Manager',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Manager/Driver'){
                profilemap.put('Driver/Manager',profileObj.id);
            } else if(profileObj.Name == 'Customer Community Login User - Super Manager/Driver'){
                profilemap.put(StaticValues.roleAdminDriver ,profileObj.id);
            }  else if(profileObj.Name == 'Customer Community Login User - Super Manager'){
                profilemap.put('Admin',profileObj.id);
            }
        }

        System.debug('inside the if statemen 4');
        List<User> conUser = new list<User>() ;
        conUser = [SELECT id FROM User WHERE ContactId =: conId limit 1];
        if(conUser.size()>0){
            conUser[0].profileId=profilemap.get(role);
        }
        update conUser;
    }
    
    /*EMC-2227
     * Description :- This Method is used to update Employee Mileage from mile to kelometer id the Driver's 
     * map Contry field on contact is updated from other map contry to "CANADA" than Actual Mileage field 
     * on Employee mileage object of that driver is update as "Actual Mileage * 1.609".
     *Precondition :- Trip status is not approved Yet.
     *  
     * 
     * Author :- PARAS DHANANI
     * Created Date :-18/09/2023 
     */ 
    public static void updtcanadianmil(List<Contact> conList, Map<Id, contact> conOldMap){
        system.debug('conList==' + conList);
        system.debug('conOldMap==' + conOldMap);
        set<Id> conIdList = new set<Id>();
        for(contact con: conList){
            if(con.Role__c != 'Admin' || con.Role__c != 'Manager'){
                if(conOldMap.get(con.ID).Map_Country__c != 'CANADA' && con.Map_Country__c ==  'CANADA'){
                    conIdList.add(con.Id);
                }
            }
            
            List<Employee_Mileage__c> updateMilList = new List<Employee_Mileage__c>();
            for(Employee_Mileage__c mil : [SELECT id,EMP_Mileage__c 
                                           FROM Employee_Mileage__c 
                                           WHERE EmployeeReimbursement__r.Contact_Id__c =: conIdList
                                               AND Trip_Status__c = 'Not Approved Yet'
                                               AND Activity__c = 'Business'
                                               AND EmployeeReimbursement__r.Status__c = 'Pending' ]){
                                                mil.EMP_Mileage__c = (mil.EMP_Mileage__c != null) ? mil.EMP_Mileage__c * 1.609 :mil.EMP_Mileage__c;
                                                   updateMilList.add(mil);
                                           }
            system.debug('conOldMap==' + conOldMap);
            if(updateMilList.size() > 0){
                update updateMilList;
            }
        }
    } 
    /*EMC-2227
     * Description :-this method update username and email of the user when the external email is changed on the contact
     *Email field on the contact is changed to trigger this method
     * username and email is changed of the related user
     *
     *   
     * Author :- KHUMAN SINGH
     * Created Date :-21/09/2023 
     */
    @future
    public static void updateEmailOfUser( set<String> conLstId){
        list<user>updateduser= new List<user>();
        for(String con :conLstId ){
            List<User> conUser = new list<User>() ;
            conUser = [SELECT id,contact.External_Email__c ,Email ,Username  FROM User WHERE ContactId =: con limit 1];
            if(conUser.size()>0){
                conUser[0].Email=conUser[0].contact.External_Email__c;
                conUser[0].Username=conUser[0].contact.External_Email__c;
                updateduser.add(conUser[0]);
            }
        }
        update updateduser;
    }
}