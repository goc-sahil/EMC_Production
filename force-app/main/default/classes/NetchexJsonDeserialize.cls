//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class NetchexJsonDeserialize {

    public Boolean IsSuccess {get;set;} 
    public List<String> Messages {get;set;} 
    public ObjectInstance ObjectInstance {get;set;} 

    public NetchexJsonDeserialize(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'IsSuccess') {
                        IsSuccess = parser.getBooleanValue();
                    } else if (text == 'Messages') {
                        Messages = arrayOfString(parser);
                    } else if (text == 'ObjectInstance') {
                        ObjectInstance = new ObjectInstance(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'NetchexJsonDeserialize consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Messages {

        public Messages(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Messages consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ObjectInstance {
        public String CompanyCode {get;set;} 
        public String EntryDate {get;set;} 
        public String EmployeeId {get;set;} 
        public String GrossToNetCode {get;set;} 
        public String TypeCode {get;set;} 
        public Double HoursOrAmount {get;set;} 
        public Double TemporaryRate {get;set;} 
        public Object DistributedDivisionCode {get;set;} 
        public Object DistributedBusinessUnitCode {get;set;} 
        public Object DistributedDepartmentCode {get;set;} 
        public Object WorkersCompCode {get;set;} 
        public Object ProjectClientName {get;set;} 
        public Object ProjectName {get;set;} 

        public ObjectInstance(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'CompanyCode') {
                            CompanyCode = parser.getText();
                        } else if (text == 'EntryDate') {
                            EntryDate = parser.getText();
                        } else if (text == 'EmployeeId') {
                            EmployeeId = parser.getText();
                        } else if (text == 'GrossToNetCode') {
                            GrossToNetCode = parser.getText();
                        } else if (text == 'TypeCode') {
                            TypeCode = parser.getText();
                        } else if (text == 'HoursOrAmount') {
                            HoursOrAmount = parser.getDoubleValue();
                        } else if (text == 'TemporaryRate') {
                            TemporaryRate = parser.getDoubleValue();
                        } else if (text == 'DistributedDivisionCode') {
                            DistributedDivisionCode = parser.readValueAs(Object.class);
                        } else if (text == 'DistributedBusinessUnitCode') {
                            DistributedBusinessUnitCode = parser.readValueAs(Object.class);
                        } else if (text == 'DistributedDepartmentCode') {
                            DistributedDepartmentCode = parser.readValueAs(Object.class);
                        } else if (text == 'WorkersCompCode') {
                            WorkersCompCode = parser.readValueAs(Object.class);
                        } else if (text == 'ProjectClientName') {
                            ProjectClientName = parser.readValueAs(Object.class);
                        } else if (text == 'ProjectName') {
                            ProjectName = parser.readValueAs(Object.class);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ObjectInstance consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static List<NetchexJsonDeserialize> parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return arrayOfJSON2Apex(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    



    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<Messages> arrayOfMessages(System.JSONParser p) {
        List<Messages> res = new List<Messages>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Messages(p));
        }
        return res;
    }




    private static List<NetchexJsonDeserialize> arrayOfJSON2Apex(System.JSONParser p) {
        List<NetchexJsonDeserialize> res = new List<NetchexJsonDeserialize>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new NetchexJsonDeserialize(p));
        }
        return res;
    }




}