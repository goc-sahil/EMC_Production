<apex:page sidebar="false" showHeader="false" lightningStylesheets="true" controller="ManageNotificationController">
    <!-- Begin Default Content REMOVE THIS -->
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">

    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8" />
        <meta http-equiv="x-ua-compatible" content="ie=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <!-- EMC Common Head -->
        <apex:include pageName="EMC_Common_Head" />
        <!-- Title of the page -->
        <title>Communications</title>
        <apex:slds />
        <!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script> -->
        <link href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel='stylesheet' />
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular.js')}"></script>
        <!--Toaster -->

        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/toastr.min.js')}"></script>
        <link href="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/css/toastr.min.css')}" rel="stylesheet" />
        <!-- Css Part Start -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/fontawesome.min.css" />
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.1.1/css/all.css" />

        <!-- read xl or csv files -->
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.15.6/xlsx.full.min.js"></script>
        <!-- Pagination -->
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        <!-- Excel Download -->
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/jszip.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/FileSaver.min.js')}"></script>
        <script>
            function isEllipsisActive(element) {
                if (element.offsetWidth < element.scrollWidth) {
                    element.title = element.innerText;
                }
                //return element.offsetWidth < element.scrollWidth;
            }
            // Array.from(document.querySelectorAll('.notify-para'))
            //     .forEach(element => {
            //         if (isEllipsisActive(element)) {
            //             element.title = element.innerText;
            //         }
            //     });
            $(document).ready(function () {
                $(function () {
                    $("#notifyTable").tooltip({
                        classes: {
                            "ui-tooltip": "tWarning",
                        },
                        show: { effect: "slideDown", duration: 800 },
                        open: function (event, ui) {
                            ui.tooltip.hover(function () {
                                $(this).fadeTo("slow", 0.5);
                            });
                        }
                    });
                });
            });
        </script>
        <style>
            @keyframes xA {
                0% {
                    box-shadow: #ff616196 0px 0px 0px 10px;
                }

                70% {
                    box-shadow: rgb(106 120 209 / 0%) 0px 0px 0px 6px;
                }

                100% {
                    box-shadow: rgb(106 120 209 / 0%) 0px 0px 0px 10px;
                }
            }

            /* Desktops and laptops ----------- */

            @media only screen and (min-width: 1224px) {
                /* Styles */
                .resendCheck {
                    width: 2.7em;
                }
            }

            /* Large screens ----------- */

            @media only screen and (min-width: 1824px) {
                /* Styles */
                .resendCheck {
                    width: 2.8em;
                }
                .custom-check {
                    width: 17px !important;
                    height: 17px !important;
                }
                /* .vw-12 {
                    width: 8vw !important;
                } */
                .n-width {
                    width: 34rem !important;
                }
                .notify-para-width {
                    width: 42rem !important;
                }
                .notification-space {
                    width: 83% !important;
                }
            }

            @media (min-width: 2000px) and (max-width: 2399px) {
                .resendCheck {
                    width: 2.8em;
                }
                .custom-check {
                    width: 17px !important;
                    height: 17px !important;
                }
                .vw-12 {
                    width: 9.5em !important;
                }
                .n-width {
                    width: 34rem !important;
                }
                .notify-para-width {
                    width: 42rem !important;
                }
                .notification-space {
                    width: 83% !important;
                }
                .em-10 {
                    width: 9.5em !important;
                }
            }

            @media (min-width: 2400px) and (max-width: 2700px) {
                .resendCheck {
                    width: 2.8em;
                }
                /* .vw-12 {
                    width: 5.62vw !important;
                } */
                .notify-para-width {
                    width: 76rem !important;
                }
                .n-width {
                    width: 67rem !important;
                }
                .notification-space {
                    width: 89% !important;
                }
            }

            @media (min-width: 1237px) and (max-width: 1440px) {
                #action-nav .action-nav-list a:before {
                    width: 47px !important
                }
                #action-nav .flex_basis:nth-of-type(1) a:before {
                    width: 8px !important
                }
                #action-nav .flex_basis:nth-of-type(3) a:before {
                    width: 24px !important
                }
            }

            .home {
                position: relative;
            }

            .overlay-navigation {
                position: fixed;
                z-index: 99;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: hsla(0, 0%, 0%, 0.8);
                transform: translateY(-100%);
            }

            .overlay-slide-down {
                transition: all .4s ease-in-out;
                transform: translateY(0)
            }

            .overlay-slide-up {
                transition: all .8s ease-in-out;
                transform: translateY(-100%)
            }

            #action-nav,
            #action-nav .un-list {
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #action-nav .un-list {
                display: flex;
                list-style: none;
            }

            .flex_basis {
                flex-basis: 35% !important;
            }

            .reverse-white {
                color: #ffffff;
            }

            #action-nav .un-list .action-nav-list {
                flex-basis: 100%;
                justify-content: center;
                align-items: center;
                height: 100%;
                overflow: hidden;
                transform: translateY(-100%);
            }

            #action-nav .action-nav-list a {
                position: relative;
                top: 46%;
                color: #fff;
                text-transform: uppercase;
                font-weight: 300;
                letter-spacing: 4px;
                text-decoration: none;
                display: block;
                text-align: center;
                font-size: 1rem;
                white-space: pre-line;
            }

            #action-nav .action-nav-list a:before {
                content: '';
                width: 70px;
                height: 2px;
                background-color: #fff;
                position: absolute;
                top: 50%;
                left: 0;
                z-index: 100;
                transform: translateX(-100%);
                opacity: 0;
                transition: all .2s linear;
            }

            #action-nav .action-nav-list a:after {
                content: attr(data-content);
                font-size: 0.9rem;
                transition: all .2s linear;
                opacity: 0;
                position: absolute;
                z-index: 100;
                color: #fff;
                display: block;
                margin-right: auto;
                margin-left: auto;
                left: 0;
                right: 0;
                /* bottom: -50px; */
                text-transform: none;
                font-weight: 300;
                font-style: italic;
                letter-spacing: 0;
            }

            #action-nav .action-nav-list a:hover:before {
                transform: translateX(0);
                opacity: 1;
            }

            #action-nav .action-nav-list a:hover:after {
                transform: translateY(15px);
                opacity: 1;
            }

            #action-nav .action-nav-list:nth-of-type(1) {
                background-color: #29363B
            }

            #action-nav .action-nav-list:nth-of-type(2) {
                background-color: #75ae72
            }

            /*#EA495F*/

            #action-nav .action-nav-list:nth-of-type(3) {
                background-color: #919496
            }

            /* #F4837D */

            #action-nav .action-nav-list:nth-of-type(4) {
                background-color: #99B998
            }

            /* background-color: #c3bfbf;*/

            #action-nav .action-nav-list:nth-of-type(5) {
                background-color: #78b642
            }

            #action-nav .action-nav-list:nth-of-type(6) {
                background-color: #ebbc36
            }

            .slide-in-nav-item {
                animation: slide-in-nav-item 0.4s linear 1 .2s both;
            }

            .slide-in-nav-item-delay-1 {
                animation: slide-in-nav-item 0.4s linear 1 .4s both;
            }

            .slide-in-nav-item-delay-2 {
                animation: slide-in-nav-item 0.4s linear 1 .6s both;
            }

            .slide-in-nav-item-delay-3 {
                animation: slide-in-nav-item 0.4s linear 1 .8s both;
            }

            .slide-in-nav-item-delay-4 {
                animation: slide-in-nav-item 0.4s linear 1 1s both;
            }

            .slide-in-nav-item-delay-5 {
                animation: slide-in-nav-item 0.4s linear 1 1.2s both;
            }

            .slide-in-nav-item-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 .6s both;
            }

            .slide-in-nav-item-delay-1-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 .5s both;
            }

            .slide-in-nav-item-delay-2-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 .4s both;
            }

            .slide-in-nav-item-delay-3-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 .3s both;
            }

            .slide-in-nav-item-delay-4-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 .2s both;
            }

            .slide-in-nav-item-delay-5-reverse {
                animation: slide-in-nav-item-reverse .3s linear 1 both;
            }

            .open-overlay {
                position: absolute;
                border: 1px solid transparent;
                cursor: pointer;
                border-color: #0c0c0c;
                right: 2.1rem;
                /* z-index: 100; */
                padding: 6px 20px;
                display: block;
                cursor: pointer;
            }

            .open-overlay span {
                display: block;
                height: 1px;
                background-color: #fff;
                cursor: pointer;
                margin-top: 8px;
            }

            .animate-top-bar {
                animation: animate-top-bar .6s linear 1 both
            }

            .animate-bottom-bar {
                animation: animate-bottom-bar .6s linear 1 both
            }

            .animate-middle-bar {
                animation: animate-middle-bar .6s linear 1 both
            }

            .animate-out-top-bar {
                animation: animate-out-top-bar .6s linear 1 both
            }

            .animate-out-bottom-bar {
                animation: animate-out-bottom-bar .6s linear 1 both
            }

            .animate-out-middle-bar {
                animation: animate-out-middle-bar .6s linear 1 both
            }


            /* ====================================
                Animation keyframes
                ==================================== */

            @keyframes slide-in-nav-item {
                from {
                    -webkit-transform: translateY(-100%);
                    transform: translateY(-100%)
                }
                to {
                    -webkit-transform: translateY(0);
                    transform: translateY(0)
                }
            }

            @keyframes slide-in-nav-item-reverse {
                from {
                    -webkit-transform: translateY(0);
                    transform: translateY(0)
                }
                to {
                    -webkit-transform: translateY(-100%);
                    transform: translateY(-100%)
                }
            }

            @keyframes animate-top-bar {
                0% {
                    background-color: #fff;
                }
                50% {
                    -webkit-transform: translateY(9px);
                    transform: translateY(9px)
                }
                80% {
                    -webkit-transform: translateY(5px);
                    transform: translateY(5px);
                    background-color: #fff
                }
                100% {
                    -webkit-transform: translateY(0);
                    transform: translateY(0);
                    background-color: #29363B;
                }
            }

            @keyframes animate-bottom-bar {
                0% {
                    background-color: #fff;
                }
                50% {
                    -webkit-transform: translateY(-9px);
                    transform: translateY(-9px)
                }
                80% {
                    -webkit-transform: translateY(-5px);
                    transform: translateY(-5px);
                    background-color: #fff;
                }
                100% {
                    -webkit-transform: translateY(0);
                    transform: translateY(0);
                    background-color: #29363B;
                }
            }

            @keyframes animate-middle-bar {
                0% {
                    background-color: #fff;
                }
                80% {
                    background-color: #fff;
                }
                100% {
                    background-color: #29363B;
                }
            }

            @keyframes animate-out-top-bar {
                0% {
                    background-color: #29363B
                }
                50% {
                    -webkit-transform: translateY(9px);
                    transform: translateY(9px)
                }
                80% {
                    -webkit-transform: translateY(5px);
                    transform: translateY(5px);
                    background-color: #29363B
                }
                100% {
                    -webkit-transform: translateY(0);
                    transform: translateY(0);
                    background-color: #FFF;
                }
            }

            @keyframes animate-out-bottom-bar {
                0% {
                    background-color: #29363B
                }
                50% {
                    -webkit-transform: translateY(-9px);
                    transform: translateY(-9px)
                }
                80% {
                    -webkit-transform: translateY(-5px);
                    transform: translateY(-5px);
                    background-color: #29363B;
                }
                100% {
                    -webkit-transform: translateY(0);
                    transform: translateY(0);
                    background-color: #FFF;
                }
            }

            @keyframes animate-out-middle-bar {
                0% {
                    background-color: #29363B
                }
                80% {
                    background-color: #29363B;
                }
                100% {
                    background-color: #fff;
                }
            }

            .menuToggler {
                position: fixed;
                top: 10px;
                cursor: pointer;
                z-index: 100;
                right: 5rem;
            }

            .home a {
                font-family: "Work Sans", sans-serif;
                color: #fff;
                font-weight: 300;
                font-size: 12px;
                text-transform: uppercase;
                text-decoration: none;
                position: absolute;
                z-index: 10;
                top: 50px;
                left: 50px;
                padding-bottom: 3px;
                border-bottom: 1px solid #fff;
            }

            @media (max-width: 640px) {
                #action-nav .un-list .action-nav-list a {
                    font-size: 11px;
                }
                #action-nav .action-nav-list a:after {
                    font-size: 0.6rem;
                }
                .open-overlay {
                    right: 1rem;
                }
                #action-nav .action-nav-list a:before {
                    width: 15px;
                }
            }

            /* custom width's */

            .em-8 {
                width: 8.2em;
            }

            .em-2 {
                width: 2.7em;
            }

            .em-10 {
                width: 10em;
            }

            .em-20 {
                width: 20em;
            }

            .em-15 {
                width: 15em;
            }

            .em-18 {
                width: 18em;
            }

            body {
                font-family: 'Proxima Nova';
                font-size: 1rem !important;
            }

            nav {
                display: flex !important;
            }

            .nav-link:focus,
            .nav-link:hover {
                text-decoration: none !important;
            }

            button:focus {
                outline: none !important;
            }

            textarea {
                font-family: 'Proxima Nova' !important;
            }

            table tbody tr {
                display: table;
                table-layout: fixed;
                width: 100%;
            }

            .table-thead {
                flex: 0 0 auto;
                width: calc(100% - 0em);
                display: table;
                table-layout: fixed;
                z-index: 1;
            }

            .table-scroll {
                flex: 1 1 auto;
                display: block;
                overflow-y: scroll;
                z-index: 1;
            }

            /* .slds-table th {
                background-color: #a7c8e8 !important;
            }

            .slds-table th:nth-child(2) {
                border-left: none !important;
            }

            .slds-table td:nth-child(2) {
                border-left: none !important;
            } */

            /* .slds-table td+td,  .slds-table th+th{
                border-left: none !important;
            } */

            .slds-table_bordered,
            .slds-table--bordered {
                border-top: none !important;
            }

            .slds-table td:nth-child(2) {
                border-left: none !important;
            }

            .slds-table tbody tr:nth-of-type(odd) {
                background-color: rgba(0, 0, 0, .05);
            }

            .slds-table_striped tbody tr:nth-of-type(even)>td {
                background-color: #ffffff !important;
            }

            .slds-table td {
                border-top: 1px solid #dee2e6 !important;
            }

            .slds-table thead th {
                border-bottom: 2px solid #78bc42 !important;
                color: #78bc42 !important;
                /* border-top: 1px solid rgb(217, 219, 221) !important; */
            }

            table th {
                font-family: 'Proxima Nova' !important;
                font-size: 15px !important;
            }

            .slds-table {
                width: 100%;
                display: flex !important;
                flex-flow: column !important;
                height: calc(100vh - 230px);
            }

            .slds-table td {
                font-family: 'Proxima Nova' !important;
                font-size: 15px;
            }

            .slds-table thead th {
                line-height: 2 !important;
            }

            .slds-table_cell-buffer tr>th:first-child,
            .slds-scope .slds-table_cell-buffer tr>td:first-child,
            .slds-scope .slds-table--cell-buffer tr>th:first-child,
            .slds-scope .slds-table--cell-buffer tr>td:first-child {
                padding-left: 0.5rem !important;
            }

            .name-td {
                white-space: pre-wrap !important;
            }

            .table_filter_input:focus {
                /* border: 2px solid #4285f4; */
                border: 2px solid #dee2e6;
                background-color: #efefef;
                border-radius: 0;
                outline: 0;
                -webkit-box-shadow: none;
                box-shadow: none !important
            }

            .table_filter_input {
                background-color: #efefef;
                border: 1px solid #dee2e6;
                border-radius: 0;
                outline: 0;
                -webkit-box-shadow: none;
                box-shadow: none;
            }

            /* .date-td {
                width: 9vw;
            } */

            .m-0 {
                margin: 0 !important;
            }

            .error-text {
                text-align: center;
            }

            .waves-effect:focus {
                outline: none !important;
            }

            .waves-effect:hover {
                opacity: 0.6;
            }

            .waves-effect.bc-red:hover {
                opacity: 1;
            }
            .tWarning {
                font-family: 'Proxima Nova';
                font-size: 12px;
                color: #fff;
                background: rgb(3, 45, 96);
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%), 0 2px 10px 0 rgb(0 0 0 / 22%);
            }

            .tWarning:before {
                content: '';
                border: 10px solid transparent;
                border-bottom-color: rgb(3, 45, 96);
                position: absolute;
                left: 2.8em;
                bottom: 100%
            }

            #filtericon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            #cancelicon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            #search_filter {
                margin-bottom: 14px;
                margin-top: 0.375rem;
            }

            .w-search {
                width: 23%;
            }

            .custom-check {
                width: 14px;
                height: 14px;
            }

            .align-text {
                text-align: center !important;
            }

            .tagquestion {
                top: -8px;
                position: relative;
                right: 5px;
                font-size: 14px;
            }

            .notify-edit {
                width: 31vw;
            }

            .pagination {
                display: inline-block;
                padding-left: 0;
                margin: 20px 0;
                border-radius: 4px;
            }

            .pagination>li {
                display: inline;
            }

            .pagination>li>a,
            .pagination>li>span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #78bc42;
                text-decoration: none;
                background-color: #fff;
                border: 1px solid #ddd;
            }

            .pagination>li:first-child>a,
            .pagination>li:first-child>span {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: rgb(167, 162, 162);
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.active>a,
            .pagination>.active>a:focus,
            .pagination>.active>a:hover,
            .pagination>.active>span,
            .pagination>.active>span:focus,
            .pagination>.active>span:hover {
                z-index: 3;
                color: #fff;
                cursor: default;
                background-color: #78bc42;
                border-color: #78bc42;
                /*#0176d3*/
            }

            .spinner-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 1;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .spinner-load {
                position: fixed;
                top: 49%;
                left: 49%;
                z-index: 1000000;
            }

            .custom-loading-text {
                width: 100%;
                text-align: center;
                color: #fff;
                font-weight: 700;
                font-size: 15px;
                position: fixed;
                top: 56%;
                left: 0%;
                z-index: 1000000;
                padding-left: 15px;
            }

            .margin-left {
                margin-left: .5rem !important;
            }

            .slds-context-bar_tab {
                background-color: #94cc67 !important;
                border-bottom: 3px solid #78b642 !important;
                color: rgb(255 255 255) !important;
                font-family: 'Proxima Nova Bold' !important;
            }

            .insurance-label {
                padding-right: 1rem !important;
            }

            th {
                position: sticky !important;
                top: 0px;
                z-index: 9;
            }

            #style-2::-webkit-scrollbar-track {
                -webkit-box-shadow: inset 0 0 6px rgb(25 49 220 / 87%);
                background-color: #F5F5F5;
            }

            #style-2::-webkit-scrollbar {
                width: 6px;
                background-color: #F5F5F5;
            }

            #style-2::-webkit-scrollbar-thumb {
                /* background-color: #0ae; */
                background-color: #78bc42
            }

            textarea:-moz-placeholder {
                /* Firefox 18- */
                color: rgb(206, 210, 211) !important;
            }

            textarea::-moz-placeholder {
                /* Firefox 19+ */
                color: rgb(206, 210, 211) !important;
            }

            textarea:-ms-input-placeholder {
                color: rgb(206, 210, 211) !important;
            }

            textarea::placeholder {
                color: rgb(206, 210, 211) !important;
            }

            .cursor-pointer {
                cursor: pointer;
            }

            .slds-selected {
                font-weight: 600;
            }

            .selected {
                font-weight: 600;
            }

            .selected .numinputedit{
                border-color: rgb(64 75 91);
                box-shadow: 0 0 0 0.2rem rgb(64 75 91 / 25%)!important;
            }

            .numinputedit:focus {
                color: #000 !important;
                box-shadow: 0 0 0 0.2rem rgb(64 75 91 / 25%)!important;
            }
            
            .slds-table .slds-cell-edit td {
                box-shadow: rgb(0 68 135) 0 0 0 1px inset;
            }

            .slds-modal__close {
                position: relative !important;
                top: 0 !important;
                right: -38.5rem !important;
            }

            .mt-20 {
                margin-top: 20px !important;
            }

            .mb-15 {
                margin-bottom: 15px !important;
            }

            .name-info-link {
                color: #404e5e !important;
                text-decoration: underline !important;
            }

            .slds-col-label {
                padding-bottom: calc(.175rem + 1px);
                margin-bottom: 0;
                font-size: inherit;
                line-height: 1.5;
                font-size: 16px;
                padding-top: calc(.175rem + 1px);
            }

            .slds-form-element__label {
                color: #000 !important;
                font-size: 14px !important;
            }

            .slds-button_confirm {
                background-color: #ecf0f1 !important;
                color: #000 !important;
                text-shadow: none;
                text-transform: uppercase !important;
                font-weight: 500 !important;
                font-size: 15px !important;
                border-radius: 4px !important;
                min-height: 1em;
                border: none !important;
            }

            .d-none {
                display: none;
            }

            .d-block {
                display: block;
            }

            .align-content {
                text-align: center;
                margin-top: 35px;
            }

            .mleft-0 {
                margin-left: 0rem;
            }

            .slds-container {
                width: 100%;
                padding-right: 40px;
                padding-left: 40px;
            }

            .td-text {
                text-align: center;
            }

            .pd-2 {
                padding-top: 2px;
            }

            .file-td {
                white-space: normal !important;
            }

            .span-error {
                color: rgb(255, 0, 0);
            }

            .border-error {
                border: 2px solid rgb(255, 0, 0) !important;
            }

            .float {
                z-index: 1;
                box-shadow: 2px 2px 3px #999 !important;
                text-align: center;
            }

            .notification-space {
                float: left;
                width: 68%;
            }

            .btn-neutral-padding {
                padding-top: 0.45rem !important;
                padding-bottom: 0.45rem !important;
                padding-right: 0.45rem !important;
                padding-left: 0.45rem !important;
            }

            .btn-brand-padding {
                padding-top: 0.45rem !important;
                padding-bottom: 0.45rem !important;
                padding-right: 0.6rem !important;
                padding-left: 0.6rem !important;
            }

            .slds-button_brand {
                background-color: #919496!important;
                border-color: #919496!important;
                color: #fff !important;
            }

            .slds-modal__header {
                margin-bottom: 0px !important;
                padding-bottom: 0 !important;
            }

            .sort-icon {
                cursor: pointer;
            }

            .m-icon {
                margin-left: .3em;
            }

            .notify-td {

                padding-right: 1rem !important;
            }

            .confirm-title {
                display: block;
                font-size: 22px;
                line-height: 20px;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                cursor: default;
                padding-bottom: 15px;
            }

            .confirm-icon {
                display: inline-block;
                vertical-align: middle;
                color: #f1c40f;
                margin-right: 8px;
            }

            .confirm-title-message {
                display: inline-block;
                vertical-align: middle;
                font-family: 'Proxima Nova';
                font-weight: bold;
            }

            .confirm-content {
                display: inline-block;
                width: 100%;
                position: relative;
                overflow-x: hidden;
                font-size: 20px;
                font-family: 'Proxima Nova';
                color: #000;
            }

            .slds-float-right {
                float: right;
            }

            .slds-float-left {
                float: left;
            }

            .pd-right {
                padding-right: 20px;
            }

            .slds-popover__body {
                padding: .25rem .25rem .25rem .25rem !important;
            }

            .sd-form {
                position: relative;
            }

            .sy-3 {
                margin-bottom: 1rem !important;
                margin-top: 1rem !important;
            }

            .file-field {
                position: relative;
                display: inline-flex;
                flex-flow: column;
            }

            .slds-btn-sm {
                padding: .5rem 1.6rem;
                font-size: .64rem;
            }

            .slds-btn-primary {
                color: #fff;
                background-color: #919496;
            }

            .slds-btn {
                margin: .375rem;
                text-transform: uppercase;
                word-wrap: break-word;
                white-space: normal;
                cursor: pointer;
                border: 0;
                border-radius: .125rem;
                -webkit-box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
            }

            .input-mileage{
                cursor: help;
            }

            .slds-button_neutral {
                background-color: #78bc42 !important;
                border-color: #78bc42 !important;
            }

            .file-field .file-path-wrapper {
                /* height: 2.5rem; */
                padding-left: 10px;
                /* overflow: hidden; */
            }

            .not-status {
                text-transform: uppercase;
                border: 1px solid rgb(217, 219, 221);
                padding: .5rem .6rem;
                font-size: 12px;
                color: #000;
                font-family: 'Proxima Nova' !important;
            }

            .not-meeting-status {
                text-transform: uppercase;
                white-space: break-spaces;
                font-size: 12px;
                color: #000;
                font-family: 'Proxima Nova' !important;
            }

            .n-message{
                white-space: break-spaces;
            }

            .dot {
                height: 15px;
                width: 15px;
                border-radius: 50%;
                display: inline-block;
            }

            .red-bg {
                background-color: rgb(167, 6, 6);
            }

            .green-bg {
                background-color: #78bc42;
            }

            .chat_background{
                padding: 0.25rem;
                background-color: #f1f5f7;
                border: 1px solid #f1f5f7;
                border-radius: 0.25rem;
            }

            .vw-12 {
                width: 10em;
            }

            .w-19 {
                width: 19rem;
            }

            .w-14 {
                width: 14rem;
            }

            .file-path:hover {
                overflow: visible;
            }

            .file-path {
                /* word-break: break-all; */
                overflow: hidden;
                text-overflow: ellipsis;
                width: 7em;
                border-left: 0 !important;
                border-right: 0 !important;
                border-top: 0 !important;
                border-bottom: 1px solid #00c851;
                -webkit-box-shadow: 0 1px 0 0 #00c851;
                box-shadow: 0 1px 0 0 #00c851;
            }

            .file-field input[type="file"] {
                position: absolute;
                top: 12px;
                right: 0;
                left: -7px;
                width: 100%;
                padding: 0;
                margin: 0;
                cursor: pointer;
                filter: alpha(opacity=0);
                opacity: 0;
            }

            .bc-blue {
                background: none !important;
                background-color: #404e5e !important;
            }

            .bc-red {
                background: none !important;
                background-color: #ff0000 !important;
            }

            .close-image{
                right: 0;
                top: -11px;
            }

            .bc-grey {
                background: none !important;
                color: #fff !important;
                background-color: #919496 !important;
            }

            .bc-black {
                background: none !important;
                background-color: #212121 !important;
                font-family: 'Proxima Nova Bold' !important;
            }

            .bc-green {
                background: none !important;
                background-color: #00c851 !important;
                font-family: 'Proxima Nova Bold' !important;
            }

            .bc-mburse-green {
                background: none !important;
                background-color: #78bc42 !important;
                font-family: 'Proxima Nova Bold' !important;
            }

            .waves-effect {
                text-transform: uppercase !important;
                color: #fff !important;
                font-size: .74rem !important;
            }

            #tableWrap{
                height: calc(100vh - 230px);
            }

            .mtop-1 {
                margin-top: 1rem;
            }

            .mleft {
                margin: .375rem !important;
            }

            .mleft-0 {
                margin: .375rem .375rem .375rem 0 !important;
            }

            .notify-para {
                position: relative;
                cursor: pointer;
                overflow-x: hidden;
                text-overflow: ellipsis;
            }

            .notify-para-width {
                width: 15rem;
            }

            .n-width {
                width: 7rem;
            }

            .notify-date {
                color: #78b642;
                /* position: absolute;
                top: 200px;
                right: 30px; */
            }

            .form-gray-divider-notify {
                border-top: 2px solid #d8d8d8;
                margin-bottom: 6px;
            }

            .slds-radio__label {
                margin-bottom: 0 !important;
            }

            .process-container {
                width: 100%;
                display: flex;
                justify-content: space-between;
            }

            .slds-textarea {
                border-radius: 0 !important;
            }

            .slds-text-color_weak {
                font-family: 'Proxima Nova Bold' !important;
                color: #78bc42 !important;
                font-size: 18px !important;
            }

            .footer_button {
                font-size: 18px;
                font-family: 'Proxima Nova Bold' !important;
            }

            .slds-button_success {
                background-color: #78bc42 !important;
                border-color: #78bc42 !important;
                border-radius: 0%;
                padding: .275rem .75rem;
                font-weight: bold;
                color: white;
            }

            button.close {
                appearance: none;
                padding: 0;
                background-color: transparent;
                border: 0;
            }

            .popup-close-btn span {
                background: #78bc42;
                font-size: 1.5rem !important;
                color: #ffffff !important;
                position: absolute !important;
                top: -36px !important;
                right: -28px !important;
                border-radius: 50% !important;
                opacity: 1 !important;
                height: 35px !important;
                width: 35px !important;
                text-align: center !important;
                line-height: 34px !important;
                padding-left: 1px !important;
            }

            .slds-button_neutral:hover {
                color: #ffffff !important;
            }

            .blur {
                z-index: 1050 !important;
            }

            .index-blur {
                z-index: 1060 !important;
            }

            .slds-scope .slds-icon-action-close {
                fill: var(--sds-c-icon-color-background, #78bc42);
            }

            .sort_icon {
                --sds-c-icon-color-foreground-default: #78bc42;
            }

            .greenfill svg {
                fill: #78bc42;
            }

            .green__icon {
                --sds-c-icon-color-foreground: #FFFFFF;
                --sds-c-icon-color-background: #78bc42;
            }

            .close {
                font-weight: 700;
                text-shadow: 0 1px 0 #fff;
            }

            .slds-text-heading_medium {
                font-size: 1.5rem !important;
            }

            .tagquestion1 {
                font-size: 12px !important;
                position: absolute;
                top: 1px;
            }

            .slds-text-heading_medium {
                font-family: 'Proxima Nova' !important;
                font-size: 1.5rem !important;
            }

            .disable-div {
                pointer-events: none;
                opacity: 0.6;
            }

            .vf-chat-iframe {
                position: fixed;
                bottom: 0;
                width: 100%;
                /* max-height: 550px; */
                z-index: 99999;
                left: auto;
                bottom: 0;
                right: 20px;
                margin: 0;
                height: 100vh;
            }

            .chatFrame-backdrop {
                position: fixed;
                z-index: 99;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: hsl(0deg 1% 44% / 96%);
            }

            .icon-button__badge {
                position: absolute;
                top: -10px;
                right: -10px;
                width: 18px;
                height: 18px;
                font-size: 12px;
                font-weight: 700;
                background: red;
                color: #ffffff;
                display: flex;
                justify-content: center;
                align-items: center;
                border-radius: 50%;
                animation: 2s ease 2.1s infinite normal none running xA
            }

        
            @keyframes fade-in {
                0% {
                    opacity: 0;
                }

                100% {
                    opacity: 1;
                }
            }

            .noti_Container {
                    width: 386px;
                    max-height: calc(100vh - 32px);
                    height: 572px;
                    position: fixed;
                    opacity: 1;
                    border: 0px;
                    transition-duration: 250ms;
                    transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
                    transition-property: opacity, top, bottom;
                    z-index: 999999;
                    right: 38px;
                    bottom: 0px;
                    top: 70px;
                    animation: fade-in .2s .2s ease-in-out both;
            }
            .noti_chat{
                max-width: 100vw;
            }
            .noti_Q{
                display: flex;
                flex-direction: column;
                box-sizing: border-box;
                color: rgb(47, 57, 65);
                height: calc(100vh - 78px);
                width: 100%;
                max-width: 100vw;
                position: relative;
                overflow: hidden;
                background-color: rgb(255, 255, 255);
                box-shadow: rgb(0 0 0 / 20%) 0px 0px 0.428571rem 0px;
                border-radius: 0.571429rem;
            }
            .noti_HeaderView {
                padding: 0.571429rem 1rem;
                background: #e5e6e9;
                color: rgb(44, 63, 29);
                margin-bottom: 0 !important;
            }
            .noti_HeaderRow {
                display: flex;
                align-content: stretch;
                -webkit-box-align: center;
                align-items: center;
                min-height: 2rem;
            }
            .noti_Title{
                font-family: 'Proxima Nova' !important;
                font-weight: 700;
                text-align: center;
                letter-spacing: 0.0214286rem;
                line-height: 1.5;
                font-size: 1.07143rem;
                -webkit-box-flex: 1;
                flex-grow: 1;
                margin-bottom: 2px;
                margin-left: 6rem !important;
                margin-right: 5rem !important;
            }
            .noti_FormContainer{
                display: flex;
                flex-direction: column;
                height: 100%;
                margin-block-end: 0px;
                overflow-y: hidden;
            }
            .noti_FormContainer > :first-child {
                padding-bottom: 2.14286rem;
                -webkit-box-flex: 2;
                flex-grow: 2;
                padding-top: 1.07143rem;
                padding-left: 0.714286rem;
                padding-right: 1.07143rem;
                margin-left: 0.714286rem;
                margin-right: 0.357143rem;
                overflow: hidden auto;
                height: 100%;
            }
            .noti_TextInput{
                border: 1px solid rgb(216, 220, 222);
                border-radius: 4px;
                width: 100%;
                font-family: 'Proxima Nova' !important;
                vertical-align: middle;
                font-family: inherit;
                padding: 0.714286em 0.857143em;
                min-height: 40px;
                line-height: 1.28571;
                font-size: 14px;
                overflow: auto;
                cursor: auto;
            }
            .close-noti-message{
                color: #000 !important;
            }
            .close-noti-message:active{
                border: none !important;
                background-color:transparent !important;
            }
            .slds-textarea:focus, .slds-textarea:active{
                border-color: rgb(64, 78, 94) !important;
                box-shadow: 0 0 3px #404e5e !important;
            }
            .slds-button:focus {
                box-shadow: none !important;
            }
            .aHeight{
                height: fit-content !important;
            }
            .footer-btn{
                position: relative;
                z-index: 1;
            }
        </style>
        <!-- Common script -->
        <script type="text/javascript">
            var app = angular.module('manageNotificationModule', ['angularUtils.directives.dirPagination']);
            app.controller('manageNotificationController', ['$scope', '$filter',
                function ($scope, $filter) {
                        $scope.driverInfo = {!conWrapper}
                        $scope.role = '{!role}'
                        $scope.manRole = '{!managerrole}'
                        $scope.mburseUrl = ($scope.role === 'Admin') ? 'admindashboard' : ($scope.role === 'Driver/Manager') ? 'drivermanagerdashboard' : ($scope.role === 'Manager') ? 'managerdashboard' : 'admindriverdashboard';
                        $scope.nameOfPage = 'Communications';
                        $scope.importList = [];
                        var ImportMileageAcc = '{!($Label.ImportMileageToReimbursement)}';
                        $scope.accountIDs = [];
                        $scope.accountIDs = ImportMileageAcc.split(',');
                        let currDate = new Date(); // returns current date
                        var daymonth = new Array();
                        daymonth[0] = "January";
                        daymonth[1] = "February";
                        daymonth[2] = "March";
                        daymonth[3] = "April";
                        daymonth[4] = "May";
                        daymonth[5] = "June";
                        daymonth[6] = "July";
                        daymonth[7] = "August";
                        daymonth[8] = "September";
                        daymonth[9] = "October";
                        daymonth[10] = "November";
                        daymonth[11] = "December";
                        $scope.monthName = (currDate.getMonth() > 0) ?  (daymonth[currDate.getMonth() - 1]) : (daymonth[11]);
                        $scope.isDefault = true;
                        $scope.isMileageImport = false;
                        $scope.isTextMessaging = {!checkTrueDialog};
                        console.log("role->", $scope.role, $scope.manRole,  $scope.isTextMessaging);
                        var nTable = (document.getElementById('style-2') != null) ? document.getElementById('style-2').offsetHeight : '';
                        var scopeTarget = $scope;
                        window.onmessage = function (event) {
                            if (event.data === 'endchat') {
                                document.getElementById("chatFrame").removeAttribute("src");
                                document.getElementById('chatFrame').classList.add('d-none');
                                document.getElementById("chatBack").classList.add('d-none');
                                $scope.$apply(function () {
                                    location.reload();
                                    // $scope.nameOfPage = 'Messaging';
                                    // $scope.massNotiTextEnable = false;
                                    // $scope.checkboxShowNotiText = false;
                                    // $scope.showNotiBtn = true;
                                    // $scope.showCancelProBtn = false;
                                    // $scope.showTextNotiBtn = false;
                                    // $scope.massTextEnable = false;
                                    // $scope.checkboxShowText = false;
                                    // $scope.showTextMsgBtn = true;
                                    // $scope.showTextBtn = false;
                                    // document.getElementById('notification-message-area').value = '';
                                    // angular.forEach($scope.driverInfo, function (item) {
                                    //     if (item.massNotiText) {
                                    //         item.massNotiText = false;
                                    //     }
                                    // });
                                    // document.getElementById('chat-message-area').value = '';
                                    // angular.forEach($scope.driverInfo, function (item) {
                                    //     if (item.massText) {
                                    //         item.massText = false;
                                    //     }
                                    // });
                                })
                            }
                        }
                        const styleFilter = () => {
                            let viewTable =  (!$scope.isDefault) ? $scope.importList : $scope.driverInfo;
                            if (viewTable.length > 10) {
                                let searchList = $filter('filter')(viewTable, {'fullname':$scope.search[$scope.searchTerm]})
                                let lengthOfSearch = searchList.length
                                if(lengthOfSearch > 0 && lengthOfSearch < 30){
                                    $('#style-2').addClass("aHeight");
                                    $('#notifyTable').addClass("aHeight");
                                }else{
                                    var elmHeight = document.getElementById("tableWrap").offsetHeight;
                                    var screenHeight = window.screen.height;
                                    var scrollHeight = screenHeight - elmHeight;
                                    // console.log("scroll", scrollHeight, document.getElementById('style-2'));
                                    document.getElementById('style-2').style.height = scrollHeight + "px";
                                    // console.log("window.screen.height", window.screen.height);
                                    // console.log("document.body.clientHeight", document.body.clientHeight);
                                    // console.log("table", table);
                                    // console.log("tableWrap", document.getElementById("tableWrap").offsetHeight , document.getElementById("tableWrap").clientHeight);
                                    $('#style-2').removeClass("aHeight");
                                    $('#notifyTable').removeClass("aHeight");
                                }
                            }else{
                                $('#style-2').addClass("aHeight");
                                $('#notifyTable').addClass("aHeight");
                            }
                        }

                        if(document.getElementById("tableWrap")!= null){
                            styleFilter();
                        }
                        
                        
                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        $scope.id = url.searchParams.get("id");
                        $scope.accid = url.searchParams.get("accid");
                        $scope.PLMarketing = '{!($Label.PL_Marketing)}';
                        $scope.showteam = url.searchParams.get("showteam");
                        $scope.managerid = url.searchParams.get("managerid");
                        $scope.manVisible = false;
                        if ($scope.managerid == undefined || $scope.managerid == '') {
                            $scope.manVisible = false;
                        } else {
                            $scope.manVisible = true;
                        }
                        $scope.login = url.searchParams.get("loginAS");
                        $scope.admindriver = false;
                        $scope.admindriver = url.searchParams.get("admindriver");
                        if ($scope.admindriver == undefined || $scope.admindriver == '') {
                            $scope.admindriver = false;
                        }
                        $('#spinner').hide();
                        $scope.search = {};
                        $scope.singleMessage = {};
                        $scope.msgIndex = 0;
                        $scope.isSendActive = true;
                        $scope.isNotiActive = true;
                        $scope.enableNotification = false;
                        $scope.massTextEnable = false;
                        $scope.imageUploading = false;
                        $scope.massNotiTextEnable = false;
                        $scope.uploadmileageProcess = false; /* EMC - 182 Added On 21 December 2021 */
                        $scope.mileageBtn = true;  /* EMC - 182 Added On 21 December 2021 */
                        $scope.uploadloaProcess = false; /* EMC - 214 Added On 1 February 2022  */
                        $scope.loaBtn = true; /* EMC - 214 Added On 1 February 2022  */
                        $scope.deleteTripProcess = false; /* EMC - 217 Added On 8 February 2022 */
                        $scope.searchTerm = ($scope.isDefault) ? "fullname" : "driverName";
                        $scope.search[$scope.searchTerm] = "";
                        $scope.currentPage = 1;
                        $scope.pageSize = 34;
                        $scope.maxPage = 0;
                        console.log("Driver Information  : ", $scope.driverInfo);
                        $scope.lengthofrecord = $scope.driverInfo.length;
                        $scope.lengthofrecordImport = $scope.importList.length;
                        $scope.maxPage = Math.ceil($scope.lengthofrecord / $scope.pageSize);
                        $scope.maxImportPage = Math.ceil($scope.lengthofrecordImport / $scope.pageSize);
                        $scope.radioIndex;
                        $scope.notification = [];
                        $scope.driverInfoList;
                        $scope.driverEmailList = [];
                        $scope.driverTextList = [];
                        $scope.driverNotificationList = [];
                        $scope.empupdatelist = [];
                        $scope.selectedRow = null;
                        $scope.nameOfLocationFile = 'sample_location_import.csv';
                        $scope.nameOfMileageFile = 'sample_mileage_import.csv';
                        $scope.nameOfLOAFile = 'sample_LOA_import.csv';
                        $scope.locationTemplate = [{
                            "Name (optional)": "The White House",
                            "Address": "1600 Pennsylvania Ave NW, Washington, DC 20500",
                            "Latitude (optional)": 38.683885,
                            "Longitude (optional)": -8.6109719,
                            "Default Activity (optional)": "Business"
                        }
                        ]
                        $scope.mileageTemplate = [{
                            "Trip_Date": "",
                            "Trip_Origin": "",
                            "Trip_Destination": "",
                            "Trip_Status": "",
                            "Approved_Date": "",
                            "Day_Of_Week": "",
                            "Notes": "",
                            "Actual_Mileage": 0.00,
                            "Activity": "",
                            "Contact_Email": "",
                            "Tag": "",
                            "EmployeeId": ""
                        }
                        ];

                        $scope.loaTemplate = [{
                            "Employee": "",
                            "Name": "",
                            "Prorated Amount": "",
                            "LOA Start": "",
                            "LOA End": "",
                            "Deactivation Date": ""
                        }
                        ];
                        /* action for resend insurance */
                        $scope.showResendBtn = false;
                        $scope.showTextMsgBtn = false;
                        $scope.showNotiBtn = false;
                        $scope.showMileageBtn = false;
                        $scope.showLOABtn = false;
                        $scope.showLocationBtn = true;
                        $scope.showEmailBtn = false;
                        $scope.showTextBtn = false;
                        $scope.showTextNotiBtn = false;
                        $scope.showCancelProBtn = false;
                        $scope.checkboxShow = false;
                        $scope.checkboxShowText = false;
                        $scope.isUpdateVisible = false;
                        var beforeUpdateEmployees = [];

                        $scope.isGreater = function (val1) {
                            return parseInt(val1) > 0;
                        }
                        /** EMC - 182
                         * Upload a trips after implemented biweekly functionality. 
                         * So before insertion of mileage user need to give a bi-weekly reimbursement value for that trip
                         * Added On 21 December 2021 */

                        // Format date in yyyy-MM-dd format
                        function FormatDate(elDate) {
                            var today = new Date(elDate);
                            var dd = String(today.getDate()).padStart(2, '0');
                            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                            var year = today.getFullYear();
                            var yy = year.toString().substr(-2);
                            // today = yyyy + '-' + mm + '-' + dd;
                            today = mm + '/' + dd + '/' + yy
                            return today;
                        }

                        function filterByYear(item) {
                            var a = item.split(' to ');
                            if (new Date(a[0]).getFullYear() === new Date().getFullYear()) {
                                return true;
                            } else {
                                if (new Date(a[1]).getFullYear() === new Date().getFullYear()) {
                                    return true;
                                }
                            }
                        }

                        function payDate(date) {
                            var st = new Date(date);
                            var today = new Date();
                            var i = 0;
                            var dateArr = [];
                            var end;
                            var currentYear = (new Date()).getFullYear();
                            if (date) {
                                for (i = 0; i <= dateArr.length; i++) {
                                    //  if (currentYear === st.getFullYear()) {
                                    if (st < today) {
                                        end = new Date(st);
                                        end = new Date(end.setDate(end.getDate() + 13));
                                        let finaldate = FormatDate(st) + ' to ' + FormatDate(end)
                                        dateArr.push(finaldate);
                                        st = new Date(end.setDate(end.getDate() + 1));
                                    }

                                    //  }
                                }
                                let arrByYear = dateArr.filter(filterByYear)
                                return arrByYear;
                                console.log("List->", dateArr);
                            }
                        }

                        $scope.option = "Select Pay Period"
                        $scope.biweeklyDate = payDate('07/25/21');
                        $scope.biweeklyDate.splice(0, 0, $scope.option);
                        $scope.biweeklyPayRole = $scope.biweeklyDate[0];
                        $scope.stCustomDate = '';
                        $scope.enCustomDate = '';

                        $scope.onPayPeriodChange = function (period) {
                            document.querySelector('.mileage-file').value = "";
                            if (period != "Select Pay Period") {
                                $scope.splitObj = period.split(' to ');
                                $scope.stCustomDate = $scope.splitObj[0];
                                $scope.enCustomDate = $scope.splitObj[1];
                                $scope.convertedStartDate = $filter('date')(new Date($scope.stCustomDate), 'yyyy-MM-dd');
                                $scope.convertedEndDate = $filter('date')(new Date($scope.enCustomDate), 'yyyy-MM-dd');
                                $scope.mileageBtn = false;
                            } else {
                                $scope.mileageBtn = true;
                            }
                        }

                        $scope.onPayPChange = function (period) {
                            document.querySelector('.loa-file').value = "";
                            if (period != "Select Pay Period") {
                                $scope.splitObj = period.split(' to ');
                                $scope.stCustomDate = $scope.splitObj[0];
                                $scope.enCustomDate = $scope.splitObj[1];
                                $scope.convertedStartDate = $filter('date')(new Date($scope.stCustomDate), 'yyyy-MM-dd');
                                $scope.convertedEndDate = $filter('date')(new Date($scope.enCustomDate), 'yyyy-MM-dd');
                                $scope.loaBtn = false;
                            } else {
                                $scope.loaBtn = true;
                            }
                        }

                        /* EMC - 182 Ends */
                        /* Toaster Option */
                        this.setOptions = function () {
                            toastr.options.positionClass = "toast-top-right";
                            toastr.options.closeButton = true;
                            toastr.options.progressBar = true;
                            toastr.options.fadeOut = 10000;
                        };

                        this.setOptions();
                        this.clear = function () {
                            toastr.clear();
                        };

                        /* Toaster Option Complete with clear funtion */

                        /* Sorting For table */
                        $scope.sortKey = ($scope.isDefault) ? 'fullname' : 'driverName';
                        $scope.reverse = true;
                        $scope.sort = function (keyname) {
                            debugger
                            $scope.reverse = ($scope.sortKey === keyname) ? !$scope.reverse : false;
                            $scope.sortKey = keyname;
                            if (keyname === 'fullname' || keyname === 'insurance' || keyname === 'driverName') {
                                if($scope.isDefault === true){
                                        $scope.driverInfo.sort(function (a, b) {
                                            var nameA = (a[keyname] === null) ? '' : a[keyname].toLowerCase(),
                                                nameB = (b[keyname] === null) ? '' : b[keyname].toLowerCase()
                                            if ($scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                    })
                                }  else{
                                        $scope.importList.sort(function (a, b) {
                                            var nameA = (a[keyname] === null) ? '' : a[keyname].toLowerCase(),
                                                nameB = (b[keyname] === null) ? '' : b[keyname].toLowerCase()
                                            if ($scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return value (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                    })
                                }
                             
                            }

                            if (keyname === 'unReadMessageCount' || keyname === 'totalMileage') {
                                if($scope.isDefault === true){
                                    $scope.driverInfo.sort(function (a, b) {
                                        var intA = (a[keyname] === null) ? '' : parseInt(a[keyname]),
                                            intB = (b[keyname] === null) ? '' : parseInt(b[keyname])
                                        if ($scope.reverse) {
                                            if (intA < intB) //sort string ascending
                                                return -1
                                            if (intA > intB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (intA < intB) //sort string ascending
                                                return 1
                                            if (intA > intB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }else{
                                    $scope.importList.sort(function (a, b) {
                                        debugger
                                        var nameA = (a[keyname] == null) ? '' : parseFloat(a[keyname]),
                                                nameB = (b[keyname] == null) ? '' : parseFloat(b[keyname]);
                                            if ($scope.reverse) {
                                                if (nameA < nameB) //sort string ascending
                                                    return -1
                                                if (nameA > nameB)
                                                    return 1
                                                return 0 //default return valuscope.model.mileageList=e (no sorting)
                                            } else {
                                                if (nameA < nameB) //sort string ascending
                                                    return 1
                                                if (nameA > nameB)
                                                    return -1
                                                return 0 //default return value (no sorting)
                                            }
                                    })
                                }
                            }

                            if (keyname === 'expirationDate') {
                                $scope.driverInfo.sort(function (a, b) {
                                    var nameA = (a[keyname] === null) ? '' : new Date(a[keyname].toLowerCase()),
                                        nameB = (b[keyname] === null) ? '' : new Date(b[keyname].toLowerCase())
                                    if ($scope.reverse) {
                                        if (nameA < nameB) //sort string ascending
                                            return -1
                                        if (nameA > nameB)
                                            return 1
                                        return 0 //default return value (no sorting)
                                    } else {
                                        if (nameA < nameB) //sort string ascending
                                            return 1
                                        if (nameA > nameB)
                                            return -1
                                        return 0 //default return value (no sorting)
                                    }
                                })

                            }
                        }

                        /* close Navigation */
                        function navToggle() {
                            var overlay_navigation = $('.overlay-navigation'),
                                nav_item_1 = $('#action-nav .action-nav-list:nth-of-type(1)'),
                                nav_item_2 = $('#action-nav .action-nav-list:nth-of-type(2)'),
                                nav_item_3 = $('#action-nav .action-nav-list:nth-of-type(3)'),
                                nav_item_4 = $('#action-nav .action-nav-list:nth-of-type(4)'),
                                nav_item_5 = $('#action-nav .action-nav-list:nth-of-type(5)'),
                                nav_item_6 = $('#action-nav .action-nav-list:nth-of-type(6)'),
                                top_bar = $('.bar-top'),
                                middle_bar = $('.bar-middle'),
                                bottom_bar = $('.bar-bottom'),
                                overlay = $('.open-overlay'),
                                close_btn = $('.menuToggler');
                            overlay_navigation.toggleClass('overlay-active');
                            overlay.removeClass('d-none').addClass('d-block');
                            close_btn.removeClass('d-block').addClass('d-none');
                            top_bar.removeClass('animate-top-bar').addClass('animate-out-top-bar');
                            middle_bar.removeClass('animate-middle-bar').addClass('animate-out-middle-bar');
                            bottom_bar.removeClass('animate-bottom-bar').addClass('animate-out-bottom-bar');
                            overlay_navigation.removeClass('overlay-slide-down').addClass('overlay-slide-up')
                            nav_item_1.removeClass('slide-in-nav-item').addClass('slide-in-nav-item-reverse');
                            nav_item_2.removeClass('slide-in-nav-item-delay-1').addClass('slide-in-nav-item-delay-1-reverse');
                            nav_item_3.removeClass('slide-in-nav-item-delay-2').addClass('slide-in-nav-item-delay-2-reverse');
                            nav_item_4.removeClass('slide-in-nav-item-delay-3').addClass('slide-in-nav-item-delay-3-reverse');
                            nav_item_5.removeClass('slide-in-nav-item-delay-4').addClass('slide-in-nav-item-delay-4-reverse');
                            nav_item_6.removeClass('slide-in-nav-item-delay-5').addClass('slide-in-nav-item-delay-5-reverse');
                        }
                        /* Navigate to Resend Insurance */
                        $scope.insuranceProcess = function () {
                            navToggle();
                            $scope.refreshEmployees();
                            $scope.nameOfPage = 'Insurance Reminder';
                            $scope.sortKey = 'fullname';
                            $scope.showResendBtn = true;
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.showLocationBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showMileageBtn = false;
                            $scope.showLOABtn = false;
                        }

                        /* Navigate to Mass Text */
                        $scope.massText = function () {
                            navToggle();
                            $scope.nameOfPage = 'Messaging'
                            $scope.sortKey = 'fullname';
                            $scope.showTextMsgBtn = true;
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.showNotiBtn = true;
                            $scope.showLocationBtn = false;
                            $scope.showResendBtn = false;
                            $scope.showMileageBtn = false;
                            $scope.showLOABtn = false;
                        }

                        /* Navigate to Mileage Upload*/
                        $scope.mileageProcess = function () {
                            $scope.refreshEmployees();
                            navToggle();
                            $scope.nameOfPage = 'Mileage Upload';
                            $scope.sortKey = 'fullname';
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.showResendBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showMileageBtn = true;
                            $scope.showLocationBtn = false;
                            $scope.showLOABtn = false;
                        }

                        $scope.loaProcess = function () {
                            $scope.refreshEmployees();
                            navToggle();
                            $scope.nameOfPage = 'Leave Of Absence Upload';
                            $scope.sortKey = 'fullname';
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.showResendBtn = false;
                            $scope.showMileageBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showLocationBtn = false;
                            $scope.showLOABtn = true;
                        }

                        /* EMC - 415 Mileage import to reimbursement */
                        $scope.edit = function (employee, reimbursement) {
                                var i;
                                $scope.selectedRow = reimbursement;
                                $scope.showCancelProBtn = false;
                                $scope.isUpdateVisible = true;
                                $scope.recordindex = -1;
                                if (beforeUpdateEmployees.length == 0){
                                        beforeUpdateEmployees = angular.copy($scope.importList);
                                }
                                console.log($scope.isUpdateVisible)
                                if ($scope.empupdatelist.length > 0) {
                                    for (i = 0; i < $scope.empupdatelist.length; i++) {
                                        if ($scope.empupdatelist[i].reimbursementId == reimbursement) {
                                            $scope.recordindex = i;
                                            break;
                                        }
                                    }

                                    if ($scope.recordindex != -1) {
                                        $scope.empupdatelist.splice($scope.recordindex, 1);
                                    }
                                    else {
                                        $scope.empupdatelist.push(employee);
                                    }
                                } else {
                                    $scope.empupdatelist.push(employee);
                                }

                                console.log("update", $scope.empupdatelist)
                        }

                        $scope.cancel = function () {
                            $('#spinner').show();
                            $('#loading').text("");
                            $scope.refreshMileage();
                            angular.forEach(beforeUpdateEmployees, function (employee) {
                                employee.iseditable = false;
                            });
                            $scope.isUpdateVisible = false;
                            $scope.showCancelProBtn = true;
                            $scope.importList = angular.copy(beforeUpdateEmployees);
                            $('#spinner').hide();
                        }

                        $scope.update = function(){
                            console.log("After update", $scope.empupdatelist)
                            $('#spinner').show();
                            $('#loading').text("Please wait while mileage is being import.");
                            var listToReset = angular.copy($scope.empupdatelist);
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.UpdateImportMileage}', JSON.stringify(listToReset),
                                    function (result, event) {
                                        if (event.status) {
                                            if (result === 'sucess') {
                                                beforeUpdateEmployees = [];
                                                $('#loading').text("");
                                                $('#spinner').hide();
                                                toastr.success("Records have been reset successfully");
                                                $scope.isUpdateVisible = false;
                                                $scope.showCancelProBtn = true;
                                                angular.forEach($scope.empupdatelist, function (u) {
                                                    u.iseditable = false;
                                                });
                                                $scope.empupdatelist = [];
                                                $scope.selectedRow = '';
                                                $scope.$apply();
                                            } else {
                                                beforeUpdateEmployees = [];
                                                $scope.selectedRow = '';
                                                $('#loading').text("");
                                                $('#spinner').hide();
                                                toastr.error("Server Error Occured");
                                            }
                                            $scope.refreshMileage();
                                        } else {
                                            beforeUpdateEmployees = [];
                                            $scope.selectedRow = '';
                                            $('#loading').text("");
                                            $('#spinner').hide();
                                            toastr.error("Server Error Occured");
                                        }
                                    },
                                    { escape: false }
                            );
                        }

                        $scope.numInput = function(miles, evt){
                            evt.import.totalMileage = miles
                            .replace(/[^\d.]/g, '')             // numbers and decimals only
                            .replace(/(^[\d]{5})[\d]/g, '$1')   // not more than 5 digits at the beginning
                            .replace(/(\..*)\./g, '$1')         // decimal cant exist more than once
                            .replace(/(\.[\d]{2})./g, '$1');    // not more than 2 digits after decimal
                        }

                        $scope.refreshMileage = function(){
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.ImportMileage}', $scope.accid,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            if (result != null) {
                                                console.log("employee", result)
                                                $scope.importList = JSON.parse(result);
                                            }
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            console.log('error in method ImportMileage ->', result);
                                        });
                                    }
                                },
                                { escape: false }
                            )
                        }

                        $scope.importMileageList = function(){
                            $scope.refreshEmployees();
                            navToggle();
                            $scope.nameOfPage = 'Mileage';
                            $scope.showCancelProBtn = true;
                            $scope.showResendBtn = false;
                            $scope.showMileageBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showLocationBtn = false;
                            $scope.showLOABtn = false;
                            $scope.isDefault = false;
                            $scope.isMileageImport = true;
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.ImportMileage}', $scope.accid,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            if (result != null) {
                                                console.log("employee", result)
                                                $scope.importList = JSON.parse(result);
                                                $scope.sortKey = 'driverName';
                                            }
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            console.log('error in method ImportMileage ->', result);
                                        });
                                    }
                                },
                                { escape: false }
                            )
                        }

                        $scope.export = function (sampleData) {
                            /* make the worksheet */
                            var ws = XLSX.utils.json_to_sheet(sampleData);

                            /* write workbook (use type 'binary') */
                            var csv = XLSX.utils.sheet_to_csv(ws, { raw: false, dateNF: 'yyyy-mm-dd HH:mm:ss' });

                            /* generate a download */
                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }

                            saveAs(new Blob([s2ab(csv)], { type: "application/octet-stream" }), "sheetjs.csv");
                        }
                        /* Download location template */

                        $scope.exportToCsv = function (sampleData, csvName) {
                            // Building the CSV from the Data
                            // Each column is separated by ";" and new line "\n" for next row
                            let rowData = new Set();
                            let rowEnd = '\n';
                            var csvContent = '';
                            sampleData.forEach(function (info) {
                                Object.keys(info).forEach(function (key) {
                                    rowData.add(key);
                                });
                            });

                            rowData = Array.from(rowData);
                            csvContent += rowData.join(',');
                            csvContent += rowEnd;

                            sampleData.forEach(function (data) {
                                let colVal = 0;
                                rowData.forEach((row, ind) => {
                                    // Key value
                                    // Ex: Id, Name
                                    let rowKey = row;
                                    //  console.log(rowKey)
                                    // add , after every value except the first.
                                    if (colVal > 0) {
                                        csvContent += ',';
                                    }
                                    // If the column is undefined, it as blank in the CSV file.
                                    //  console.log(this.csvFiledata[ind],filedata);
                                    let value = data[rowKey] === (undefined || null) ? '' : data[rowKey];
                                    if (value != null || value != '') {
                                        csvContent += '"' + value + '"';
                                    }
                                    colVal++;
                                })
                                csvContent += rowEnd;
                            });
                            // The download function takes a CSV string, the filename and mimeType as parameters
                            // Scroll/look down at the bottom of this snippet to see how download is called
                            var download = function (content, fileName, mimeType) {
                                var a = document.createElement('a');
                                mimeType = mimeType || 'application/octet-stream';

                                if (navigator.msSaveBlob) { // IE10
                                    navigator.msSaveBlob(new Blob([content], {
                                        type: mimeType
                                    }), fileName);
                                } else if (URL && 'download' in a) { //html5 A[download]
                                    a.href = URL.createObjectURL(new Blob([content], {
                                        type: mimeType,
                                        cellDates: true, dateNF: 'yyyy/mm/dd;@'
                                    }));
                                    a.setAttribute('download', fileName);
                                    document.body.appendChild(a);
                                    a.click();
                                    document.body.removeChild(a);
                                } else {
                                    location.href = 'data:application/octet-stream,' + encodeURIComponent(content); // only this mime type is supported
                                }
                            }

                            download(csvContent, csvName, 'text/csv;encoding:utf-8');
                        }
                        /*  Search input event */

                        $scope.keyPressed = function (keyEvent, len) {
                            if (keyEvent.keyCode == 13 || ((keyEvent.keyCode == 32 || keyEvent.keyCode == 39) && !len) || !(keyEvent.keyCode >= 65 && keyEvent.keyCode <= 90 || keyEvent.keyCode >= 97 && keyEvent.keyCode <= 122 || keyEvent.keyCode == 39 || keyEvent.keyCode == 32)) {
                                event.preventDefault();
                            }else{
                                if(len != 0){
                                    styleFilter();
                                }
                            }

                            // return keyEvent.which !== 32;
                        }

                        $scope.resetSearch = function () {
                            $scope.search[$scope.searchTerm] = "";
                            styleFilter();
                        }

                        $scope.openProfile = function (profile) {
                            var hidden = document.getElementById('hidden_user_id');
                            hidden.value = JSON.stringify(profile);
                            var url_locate;
                            if ($scope.admindriver) {
                                url_locate = "/app/roster?accid=" + $scope.accid + "&id=" + $scope.id + "&showteam=" + $scope.showteam + "&admindriver=true";
                            } else {
                                url_locate = "/app/roster?accid=" + $scope.accid + "&id=" + $scope.id + "&showteam=" + $scope.showteam;
                            }

                            window.open(url_locate);

                        }

                        /* EMC - 171 */
                        $scope.exportToExcel = function () {
                            var exportData = [];
                            var excelData = $scope.driverInfo
                            angular.forEach(excelData, function (l) {
                                l.expirationDate = (l.expirationDate != null) ? $filter('date')(new Date(l.expirationDate), "MM/dd/yy") : l.expirationDate;
                            });

                            exportData.push(["Name", "Insurance Status", "Expires"]);
                            angular.forEach(excelData, function (l) {
                                exportData.push([l.fullname, l.insurance, l.expirationDate]);
                            })

                            function datenum(v, date1904) {
                                if (date1904) v += 1462;
                                var epoch = Date.parse(v);
                                return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                            }
                            function getSheet(exportData) {
                                var ws = {};
                                var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };

                                for (var R = 0; R != exportData.length; ++R) {
                                    for (var C = 0; C != exportData[R].length; ++C) {
                                        if (range.s.r > R) range.s.r = R;
                                        if (range.s.c > C) range.s.c = C;
                                        if (range.e.r < R) range.e.r = R;
                                        if (range.e.c < C) range.e.c = C;
                                        var cell = { v: exportData[R][C] };
                                        if (cell.v == null) continue;
                                        var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });
                                        // console.log('cell', cell)
                                        if (typeof cell.v === 'number') cell.t = 'n';
                                        else if (typeof cell.v === 'boolean') cell.t = 'b';
                                        else if (cell.v instanceof Date) {
                                            cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                            cell.v = datenum(cell.v);
                                        }
                                        else cell.t = 's';

                                        ws[cell_ref] = cell;
                                    }
                                }
                                if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                return ws;
                            }
                            function Workbook() {
                                if (!(this instanceof Workbook)) return new Workbook();
                                this.SheetNames = [];
                                this.Sheets = {};
                            }

                            var wb = new Workbook(), ws = getSheet(exportData);

                            $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                            wb.SheetNames.push("Insurance Report");
                            wb.Sheets["Insurance Report"] = ws;
                            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: false, type: 'binary' });
                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }
                            $scope.name = 'Insurance Report' + ' ' + $scope.FromDate + ".xlsx"
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), $scope.name);
                        }

                        $scope.exportToMileageExcel = function () {
                            var exportData = [];
                            var excelData = $scope.importList
                            exportData.push(["Name", "Mileage", "Month"]);
                            angular.forEach(excelData, function (l) {
                                exportData.push([l.driverName, l.totalMileage, $scope.monthName]);
                            })

                            function datenum(v, date1904) {
                                if (date1904) v += 1462;
                                var epoch = Date.parse(v);
                                return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                            }
                            function getSheet(exportData) {
                                var ws = {};
                                var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };

                                for (var R = 0; R != exportData.length; ++R) {
                                    for (var C = 0; C != exportData[R].length; ++C) {
                                        if (range.s.r > R) range.s.r = R;
                                        if (range.s.c > C) range.s.c = C;
                                        if (range.e.r < R) range.e.r = R;
                                        if (range.e.c < C) range.e.c = C;
                                        var cell = { v: exportData[R][C] };
                                        if (cell.v == null) continue;
                                        var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });
                                        // console.log('cell', cell)
                                        if (typeof cell.v === 'number') cell.t = 'n';
                                        else if (typeof cell.v === 'boolean') cell.t = 'b';
                                        else if (cell.v instanceof Date) {
                                            cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                            cell.v = datenum(cell.v);
                                        }
                                        else cell.t = 's';

                                        ws[cell_ref] = cell;
                                    }
                                }
                                if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                return ws;
                            }
                            function Workbook() {
                                if (!(this instanceof Workbook)) return new Workbook();
                                this.SheetNames = [];
                                this.Sheets = {};
                            }

                            var wb = new Workbook(), ws = getSheet(exportData);

                            $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                            wb.SheetNames.push("Mileage Report");
                            wb.Sheets["Mileage Report"] = ws;
                            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: false, type: 'binary' });
                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }
                            $scope.name = 'Mileage Report' + ' ' + $scope.FromDate + ".xlsx"
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), $scope.name);
                        }

                        /*  Search input event ends */
                        $scope.sendNotification = function (notifyObj, index) {
                            $('#spinner').show();
                            $('#loading').text("Sending...");
                            var textInput = document.getElementById(`message-area${index}`).value;
                            if (notifyObj.notiMessage === null || notifyObj.notiMessage === "" || textInput === "") {
                                $('#loading').text("");
                                $('#spinner').hide();
                                $(`#span-error${index}`).removeClass("d-none");
                                $(`#message-area${index}`).addClass("border-error");
                            } else {
                                $(`#span-error${index}`).addClass("d-none");
                                $(`#message-area${index}`).removeClass("border-error");
                                $scope.notification.push(notifyObj);
                                var notifyMessage = angular.copy($scope.notification);
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.editInlineNewEmployee}', JSON.stringify(notifyMessage), $scope.id,
                                    function (result, event) {
                                        if (event.status) {
                                            if (result === 'Success') {
                                                $('#loading').text("");
                                                $('#spinner').hide();
                                                $scope.enableNotification = false;
                                                toastr.success("Notification is send successfully to " + notifyObj.name + ' ' + notifyObj.lastname);
                                                angular.forEach($scope.notification, function (n) {
                                                    n.isEditable = false;
                                                });
                                                $scope.notification = [];
                                                $scope.refreshEmployees();
                                                $scope.$apply();
                                            }else{
                                                $('#loading').text("");
                                                $('#spinner').hide();
                                            }
                                        }else{
                                            $('#loading').text("");
                                            $('#spinner').hide();
                                        }
                                    }
                                );
                            }
                        }

                        $scope.pageChangeHandler = function (num) {
                            let lengthOfTable = $scope.driverInfo;
                            if (lengthOfTable.length > 10) {
                                if (num === $scope.maxPage) {
                                    if($scope.maxPage > 5){
                                        document.getElementById('style-2').style.height = nTable + "px";
                                        $('#style-2').removeClass("aHeight");
                                        $('#notifyTable').removeClass("aHeight");
                                        document.getElementById('style-2').style.overflowY = "scroll";
                                    }else{
                                        $('#style-2').addClass("aHeight");
                                        $('#notifyTable').addClass("aHeight");
                                        document.getElementById('style-2').style.overflow = "hidden";
                                    }
                                // document.getElementById('style-2').style.height = "";
                                //  document.getElementById('style-2').style.overflow = "hidden";
                                } else {
                                    document.getElementById('style-2').style.overflowY = "scroll";
                                    styleFilter()
                                }
                            }
                        }

                        $scope.pageChangeImportHandler = function (num) {
                            let lengthOfTable =  $scope.importList;
                            if (lengthOfTable.length > 10) {
                                if (num === $scope.maxImportPage) {
                                    if($scope.maxImportPage > 5){
                                        document.getElementById('style-2').style.height = nTable + "px";
                                        $('#style-2').removeClass("aHeight");
                                        $('#notifyTable').removeClass("aHeight");
                                        document.getElementById('style-2').style.overflowY = "scroll";
                                    }else{
                                        $('#style-2').addClass("aHeight");
                                        $('#notifyTable').addClass("aHeight");
                                        document.getElementById('style-2').style.overflow = "hidden";
                                    }
                                // document.getElementById('style-2').style.height = "";
                                //  document.getElementById('style-2').style.overflow = "hidden";
                                } else {
                                    document.getElementById('style-2').style.overflowY = "scroll";
                                    styleFilter()
                                }
                            }
                        }

                        $scope.refreshEmployees = function () {
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.NewEmployeeData}', $scope.accid, $scope.id,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            $scope.driverInfo = JSON.parse(result);
                                            styleFilter()
                                            //console.log('added->', JSON.parse(result));
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            $scope.driverInfo = [];
                                            //console.log('error in method NewEmployeeData ->', result);
                                        });
                                    }
                                },
                                { escape: false })
                        }

                        $scope.trueDialogContact = function () {
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.TrueDialogContact}', $scope.accid, $scope.id,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            $scope.driverInfo = JSON.parse(result);
                                            styleFilter();
                                            //console.log('TrueDialogContact->', result, JSON.parse(result));
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            $scope.driverInfo = [];
                                            //console.log('error in method TrueDialogContact ->', result);
                                        });
                                    }
                                },
                                { escape: false }
                            )
                        }

                        $scope.openMessageBot = function (n, index) {
                            $scope.enableNotification = false;
                            let vurl = 'https://' + window.location.host + `/app/chatWindow?name=${n.fullname}&cid=${n.contactId}`;
                            angular.element(document.querySelector("#chatBack")).removeClass("d-none");
                            angular.element(document.querySelector("#chatFrame")).removeClass("d-none");
                            document.getElementById("chatFrame").setAttribute("src", vurl);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.UpdateUnreadMessageStatus}', n.contactId,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            if (result != null) {
                                                if(!$scope.showTextMsgBtn && !$scope.showTextBtn){
                                                    $scope.refreshEmployees();
                                                }else{
                                                    $scope.trueDialogContact();
                                                }
                                            }
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            console.log('error in method UpdateUnreadMessageStatus ->', result);
                                        });
                                    }
                                },
                                { escape: false })
                        }

                        $scope.errorValidate = function (index) {
                            var span = $(`#span-error${index}`);
                            var messageArea = $(`#message-area${index}`);
                            if (!(span[0].className.includes("d-none"))) {
                                $(`#span-error${index}`).addClass("d-none");
                            }
                            if (messageArea[0].className.includes("border-error")) {
                                $(`#message-area${index}`).removeClass("border-error")
                            }
                            document.getElementById(`message-area${index}`).value = "";
                            document.getElementById(`notify-date${index}`).innerHTML = "";
                        }


                        $scope.clearMass = function(){
                            $('#spinner').show();
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.ManageNotificationController.clearMassNotification}', $scope.accid,
                                function (result, event) {
                                    if (event.status) {
                                        $scope.$apply(function () {
                                            $('#spinner').hide();
                                            toastr.success("Notification message cleared successfully!!");
                                            setTimeout(function () {
                                                location.reload();
                                            }, 2000);
                                        });
                                    } else {
                                        $scope.$apply(function () {
                                            console.log('error in method clearMassNotification ->', result);
                                        });
                                    }
                                },
                                { escape: false }
                            )
                        }

                        $scope.endProcess = function () {
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.refreshEmployees();
                            $scope.showCancelProBtn = false;
                            $scope.nameOfPage = 'Communications';
                            $scope.sortKey = 'fullname';
                            if ($scope.checkboxobj) {
                                if ($scope.checkboxobj.isCheckedAllForEmail) {
                                    $scope.checkboxobj.isCheckedAllForEmail = false;
                                }
                            }
                            $scope.showEmailBtn = false;
                            $scope.showTextBtn = false;
                            $scope.showTextNotiBtn = false;
                            $scope.checkboxShow = false;
                            $scope.checkboxShowText = false;
                            $scope.checkboxShowNotiText = false;
                            $scope.showResendBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showLocationBtn = true;
                            angular.forEach($scope.driverInfo, function (detail) {
                                detail.massEmail = false;
                                detail.massText = false;
                                detail.massNotiText = false;
                            });
                        }

                        $scope.sendMassEmail = function () {
                            $scope.enableNotification = false;
                            var driverEmailInfo = angular.copy($scope.driverEmailList);
                            $('#spinner').show();
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.sendAllInsuranceEmail}', JSON.stringify(driverEmailInfo), $scope.id,
                                function (result, event) {
                                    if (event.status) {
                                        toastr.success('Email Sent Successfully');
                                        $('#spinner').hide();
                                        setTimeout(function () {
                                            location.reload();
                                        }, 2000);
                                    }
                                    else {
                                        toastr.error('Some error has occur');
                                        $('#spinner').hide();
                                    }
                                    $scope.$apply();
                                }, { escape: false }
                            );
                        }

                        $scope.displayCheckboxForEmail = function () {
                            $scope.checkboxShow = true;
                            $scope.showCancelProBtn = true;
                            $scope.checkboxobj = {};
                            $scope.checkboxobj.isCheckedAllForEmail = false;
                        }

                        $scope.CheckUncheckAllForEmail = function (CheckUncheckAllForEmail) {
                            $scope.driverEmailList = [];
                            $scope.checkboxobj.isCheckedAllForEmail = CheckUncheckAllForEmail;
                            if ($scope.checkboxobj.isCheckedAllForEmail) {
                                $scope.showResendBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showEmailBtn = true;
                            }
                            else {
                                $scope.checkboxShow = false;
                                $scope.showResendBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showEmailBtn = false;
                            }
                            angular.forEach($scope.driverInfo, function (detail) {
                                detail.massEmail = $scope.checkboxobj.isCheckedAllForEmail;
                                $scope.driverEmailList.push(detail);
                            });
                            // console.log($scope.driverEmailList);
                        }

                        $scope.CheckUncheckForEmail = function (detail) {
                            $scope.recordfoundindex = -1;
                            var total = $scope.driverInfo.length;
                            var count = 0;
                            angular.forEach($scope.driverInfo, function (item) {
                                if (item.massEmail) {
                                    count++;
                                }
                            });
                            if (count > 0) {
                                $scope.showResendBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showEmailBtn = true;
                            }
                            else {
                                $scope.showResendBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showEmailBtn = false;
                                $scope.checkboxShow = false;
                            }

                            if (total == count && (total != 0)) {
                                if ($scope.checkboxobj) {
                                    $scope.checkboxobj.isCheckedAllForEmail = true;
                                }
                            }
                            else {
                                if ($scope.checkboxobj != undefined) {
                                    $scope.checkboxobj.isCheckedAllForEmail = false;
                                }
                            }

                            if ($scope.driverEmailList.length > 0) {
                                for (var i = 0; i < $scope.driverEmailList.length; i++) {
                                    if ($scope.driverEmailList[i].contactId === detail.contactId) {
                                        $scope.recordfoundindex = i;
                                        break;
                                    }
                                }

                                if ($scope.recordfoundindex != -1) {
                                    $scope.driverEmailList.splice($scope.recordfoundindex, 1);
                                }

                                else {
                                    $scope.driverEmailList.push(detail);
                                }
                            } else {
                                $scope.driverEmailList.push(detail);
                            }
                            console.log($scope.driverEmailList);
                        }


                        $scope.displayCheckboxForText = function () {
                            $('#spinner').show();
                            $('#loading').text("Please wait while process is running");
                            $scope.nameOfPage = 'Mass Text Message';
                            $scope.trueDialogContact();
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.enableNotification = false;
                            $scope.showNotiBtn = true;
                            $scope.showTextNotiBtn = false;
                            $scope.checkboxShowText = true;
                            $scope.checkboxShowNotiText = false;
                            $scope.showCancelProBtn = true;
                            $scope.checkboxobj = {};
                            $scope.checkboxobj.isCheckedAllForText = false;
                            $scope.checkboxobj.isCheckedAllForNotiText = false;
                            setTimeout(()=>{$('#spinner').hide()}, 1000);
                        }

                        $scope.CheckUncheckAllForText = function (CheckUncheckAllForText) {
                            $scope.driverTextList = [];
                            $scope.checkboxobj.isCheckedAllForText = CheckUncheckAllForText;
                            if ($scope.checkboxobj.isCheckedAllForText) {
                                $scope.showTextMsgBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showTextBtn = true;
                            }
                            else {
                                $scope.checkboxShowText = false;
                                $scope.showTextMsgBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showTextBtn = false;
                            }
                            angular.forEach($scope.driverInfo, function (detail) {
                                detail.massText = $scope.checkboxobj.isCheckedAllForText;
                                $scope.driverTextList.push(detail.trueDialogId);
                            });
                            // console.log($scope.driverEmailList);
                        }

                        $scope.CheckUncheckForText = function (detail) {
                            $scope.recordfoundindex = -1;
                            var total = $scope.driverInfo.length;
                            var count = 0;
                            angular.forEach($scope.driverInfo, function (item) {
                                if (item.massText) {
                                    count++;
                                }
                            });
                            if (count > 0) {
                                $scope.showTextMsgBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showTextBtn = true;
                            }
                            else {
                                $scope.showTextMsgBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showTextBtn = false;
                                $scope.checkboxShowText = false;
                            }

                            if (total == count && (total != 0)) {
                                if ($scope.checkboxobj) {
                                    $scope.checkboxobj.isCheckedAllForText = true;
                                }
                            }
                            else {
                                if ($scope.checkboxobj != undefined) {
                                    $scope.checkboxobj.isCheckedAllForText = false;
                                }
                            }

                            if ($scope.driverTextList.length > 0) {
                                for (var i = 0; i < $scope.driverTextList.length; i++) {
                                    if ($scope.driverTextList[i] === detail.trueDialogId) {
                                        $scope.recordfoundindex = i;
                                        break;
                                    }
                                }

                                if ($scope.recordfoundindex != -1) {
                                    $scope.driverTextList.splice($scope.recordfoundindex, 1)
                                }

                                else {
                                    $scope.driverTextList.push(detail.trueDialogId);
                                }
                            } else {
                                $scope.driverTextList.push(detail.trueDialogId);
                            }
                            console.log($scope.driverTextList);
                        }

                        $scope.sendTextMessage = function () {
                            $scope.enableNotification = false; 
                            $scope.massTextEnable = true;
                        }

                        $scope.sendNotificationMessage = function(){
                            $scope.enableNotification = false;
                            $scope.massNotiTextEnable = true;
                        }

                        $scope.displayCheckboxForNotiText = function(){
                            $('#spinner').show();
                            $('#loading').text("Please wait while process is running");
                            $scope.nameOfPage = 'Mass Notification Message';
                            $scope.refreshEmployees();
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.enableNotification = false;
                            $scope.showTextMsgBtn = true;
                            $scope.showTextBtn = false;
                            $scope.checkboxShowText = false;
                            $scope.checkboxShowNotiText = true;
                            $scope.showCancelProBtn = true;
                            $scope.checkboxobj = {};
                            $scope.checkboxobj.isCheckedAllForNotiText = false;
                            $scope.checkboxobj.isCheckedAllForText = false;
                            setTimeout(()=>{$('#spinner').hide()}, 1000);
                        }

                        $scope.CheckUncheckAllForNotiText = function (CheckUncheckAllForNotiText) {
                            $scope.driverNotificationList = [];
                            $scope.checkboxobj.isCheckedAllForNotiText = CheckUncheckAllForNotiText;
                            if ($scope.checkboxobj.isCheckedAllForNotiText) {
                                $scope.showNotiBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showTextNotiBtn = true;
                            }
                            else {
                                $scope.checkboxShowNotiText = false;
                                $scope.showNotiBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showTextNotiBtn = false;
                            }
                            angular.forEach($scope.driverInfo, function (detail) {
                                detail.massNotiText = $scope.checkboxobj.isCheckedAllForNotiText;
                                $scope.driverNotificationList.push(detail);
                            });
                            // console.log($scope.driverEmailList);
                        }

                        $scope.CheckUncheckForNotiText = function (detail) {
                            $scope.recordfoundindex = -1;
                            var total = $scope.driverInfo.length;
                            var count = 0;
                            angular.forEach($scope.driverInfo, function (item) {
                                if (item.massNotiText) {
                                    count++;
                                }
                            });
                            if (count > 0) {
                                $scope.showNotiBtn = false;
                                $scope.showCancelProBtn = true;
                                $scope.showTextNotiBtn = true;
                            }
                            else {
                                $scope.showNotiBtn = true;
                                $scope.showCancelProBtn = false;
                                $scope.showTextNotiBtn = false;
                                $scope.checkboxShowNotiText = false;
                            }

                            if (total == count && (total != 0)) {
                                if ($scope.checkboxobj) {
                                    $scope.checkboxobj.isCheckedAllForNotiText = true;
                                }
                            }
                            else {
                                if ($scope.checkboxobj != undefined) {
                                    $scope.checkboxobj.isCheckedAllForNotiText = false;
                                }
                            }

                            if ($scope.driverNotificationList.length > 0) {
                                for (var i = 0; i < $scope.driverNotificationList.length; i++) {
                                    if ($scope.driverNotificationList[i].contactId === detail.contactId) {
                                        $scope.recordfoundindex = i;
                                        break;
                                    }
                                }

                                if ($scope.recordfoundindex != -1) {
                                    $scope.driverNotificationList.splice($scope.recordfoundindex, 1);
                                }

                                else {
                                    $scope.driverNotificationList.push(detail);
                                }
                            } else {
                                $scope.driverNotificationList.push(detail);
                            }
                            console.log($scope.driverNotificationList);
                        }

                        $scope.closeNotificationPopup = function(index){
                            $(`#span-error${index}`).addClass("d-none");
                            $(`#message-area${index}`).removeClass("border-error");
                            $scope.singleMessage = {};
                            $scope.msgIndex = 0;
                            $scope.enableNotification = false;
                        }
                        $scope.openNotification = function(notification, idex){
                            $scope.singleMessage = notification;
                            $scope.msgIndex = idex;
                            $scope.enableNotification = true;
                        }
                        /* For File Upload*/
                        $scope.filedata = '';
                        $scope.locationdata = '';
                        $scope.data = "";
                        $scope.filesChoose = [];
                        $scope.imageChoose = [];
                        $scope.locationChoose = [];
                        $scope.mileageChoose = [];
                        $scope.loaChoose = [];
                        var maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
                        var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
                        var dialogFileSize = 300000;
                        var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000
                        var attachment;
                        var attachmentName;
                        var fileSize;
                        var fileIndex;
                        var choosefile;
                        var choosenfileType = '';
                        var chooseFileName = '';
                        var idOfContact = '';
                        $scope.file_changed = function (element) {
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.filedata = '';
                            choosefile = element;
                            fileIndex = parseInt(element.name);
                            var findex = (element.files[0].name).lastIndexOf(".");
                            var photofile = element.files[0];
                            chooseFileName = photofile.name;
                            //console.log('file size :- '+choosefile.files[0].size);
                            var strsubstring = (element.files[0].name).substring(findex, (element.files[0].name).length);
                            var notiElement = document.querySelectorAll('#notifyColumn');
                            var fileElement = document.querySelectorAll('#file-column');
                            if (strsubstring == '.pdf' || strsubstring == '.docx' || strsubstring == '.xls' || strsubstring == '.xlsx' || strsubstring == '.doc') {
                                $(`#file-path-wrap-${fileIndex}`).removeClass('d-none');
                                document.getElementById(`file-name-${fileIndex}`).innerHTML = chooseFileName;
                                if (choosefile.files[0].size > 0 && choosefile.files[0].size < 4350000) {
                                    $(`#fileBtn-${fileIndex}`).addClass('d-none');
                                    $(`#uploadBtn-${fileIndex}`).removeClass('d-none');
                                    if ($('#file-column')[0].classList.length > 1) {
                                        $("#insurance-thead").removeClass('em-10');
                                        $("#insurance-thead").addClass('em-20');
                                        // $('#file-column').removeClass('vw-12');
                                        // $('#file-column').addClass('w-19');
                                        angular.forEach(fileElement, function (n) {
                                            if (n.className.includes('vw-12')) {
                                                n.classList.remove('vw-12');
                                                n.classList.add('w-19');
                                            }
                                        })
                                        angular.forEach(notiElement, function (n) {
                                            if (n.className.includes('notify-para-width')) {
                                                n.classList.remove('notify-para-width');
                                                n.classList.add('n-width');
                                            }
                                        })
                                        // $('#notifyColumn').removeClass('notify-para-width')
                                        // $('#notifyColumn').addClass('n-width');
                                    }
                                    //console.log($('#file-column')[0].classList)
                                    choosefile = element;
                                    $scope.filesChoose.push(element);
                                }
                                else {
                                    // $scope.IsVisiblebtn = false;
                                    $(`#file-path-wrap-${fileIndex}`).addClass('d-none');
                                    document.getElementById(`file-name-${fileIndex}`).innerHTML = "";
                                    toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .');
                                }
                            }
                            else {
                                $(`#file-path-wrap-${fileIndex}`).addClass('d-none');
                                document.getElementById(`file-name-${fileIndex}`).innerHTML = "";
                                toastr.error('Please upload correct File. File extension should be .pdf, .doc , .docx or .xls');
                            }

                            var fl = choosefile.files[0].size;


                            $scope.$apply(function (scope) {
                                choosenfileType = photofile.type;
                                var reader = new FileReader();
                                $scope.fsize = element.files[0].size;
                                reader.onload = function (e) {
                                    $scope.filedata = reader.result;
                                };
                                reader.readAsDataURL(photofile);
                            });
                        };

                        $scope.uploadFileInChunk = function (element, insuranceId, conId, contact) {
                            var file;
                            idOfContact = conId;
                            if (element.currentTarget != null || element.currentTarget != undefined) {
                                angular.forEach($scope.filesChoose, function (f) {
                                    if (f.name === element.currentTarget.name) {
                                        file = f.files[0];
                                        fileIndex = parseInt(element.currentTarget.name);
                                    }
                                })
                            }

                            console.log(file);
                            //var file = choosefile.files[0];
                            if (file != undefined) {
                                if (file.size <= maxFileSize) {
                                    attachmentName = file.name;
                                    var fileReader = new FileReader();
                                    fileReader.onloadend = function (e) {
                                        e.preventDefault();
                                        attachment = window.btoa(this.result);
                                        positionIndex = 0;
                                        fileSize = attachment.length;
                                        doneUploading = false;
                                        if (fileSize < maxStringSize) {
                                            uploadAttachment(null, insuranceId, conId, contact);
                                        } else {
                                            toastr.error('Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + "."');
                                        }
                                    }

                                    fileReader.onerror = function (e) {
                                        toastr.error('There was an error reading the file.  Please try again.');
                                    }
                                    fileReader.onabort = function (e) {
                                        toastr.error('There was an error reading the file.  Please try again.');
                                    }

                                    fileReader.readAsBinaryString(file);
                                }
                                else {
                                    toastr.error('File must be under 4.3 MB in size.  Your file is too large.  Please try again.');
                                }
                            }
                            else {
                                $(`#uploadBtn-${fileIndex}`).addClass('d-none');
                                toastr.error('You must choose a file before trying to upload it');
                            }
                        }

                        function uploadAttachment(fileId, insuranceId, contactId, contact) {
                            $('#spinner').show();
                            var attachmentBody = "";

                            if (insuranceId != '' && insuranceId != null && insuranceId != undefined) {
                                $scope.attachmentid = insuranceId;
                                console.log("attachment-id", $scope.attachmentid);
                            }
                            else {
                                $scope.attachmentid = "";
                            }
                            if (fileSize <= positionIndex + chunkSize) {
                                attachmentBody = attachment.substring(positionIndex);
                                doneUploading = true;
                            } else {
                                attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
                            }
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.readFromFileInchunk}', attachmentBody, attachmentName, fileId, contactId, $scope.accid, $scope.attachmentid,
                                function (result, event) {
                                    if (event.status) {
                                        if (event.type === 'exception') {
                                            console.log("exception");
                                            console.log(event);
                                            $('#spinner').hide();
                                        }
                                        else if (event.status) {
                                            if (doneUploading == true) {
                                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.sendInsuranceEmail}', $scope.id, contact.fullname, null,
                                                    function (result, event) {
                                                        if (event.status) {
                                                        }
                                                        $scope.$apply();
                                                    },
                                                    { escape: false }
                                                )
                                                var notiDiv = document.querySelectorAll('#notifyColumn');
                                                var filecolumn = document.querySelectorAll('#file-column');
                                                toastr.success("The insurance documentation has been successfully uploaded");
                                                document.getElementById(`file-${fileIndex}`).value = '';
                                                document.getElementById(`file-name-${fileIndex}`).innerHTML = '';
                                                $(`#file-path-wrap-${fileIndex}`).addClass('d-none');
                                                $(`#uploadBtn-${fileIndex}`).addClass('d-none');
                                                $(`#fileBtn-${fileIndex}`).removeClass('d-none');
                                                $("#insurance-thead").addClass('em-10');
                                                $("#insurance-thead").removeClass('em-20');
                                                // $('#file-column').addClass('vw-12');
                                                // $('#file-column').removeClass('w-19');
                                                angular.forEach(filecolumn, function (n) {
                                                    if (n.className.includes('w-19')) {
                                                        n.classList.remove('w-19');
                                                        n.classList.add('vw-12');
                                                    }
                                                })
                                                angular.forEach(notiDiv, function (n) {
                                                    if (n.className.includes('n-width')) {
                                                        n.classList.remove('n-width');
                                                        n.classList.add('notify-para-width');
                                                    }
                                                })
                                                if ($scope.filesChoose.length > 0) {
                                                    angular.forEach($scope.filesChoose, function (fl) {
                                                        if (fl.name === fileIndex.toString()) {
                                                            const findex = $scope.filesChoose.indexOf(fl);
                                                            if (findex !== -1) $scope.filesChoose.splice(findex, 1);
                                                        }
                                                    })
                                                }
                                            }
                                            else {
                                                positionIndex += chunkSize;
                                                uploadAttachment(result, insuranceId, idOfContact, contact);
                                            }
                                        } else {
                                            console.log(event.message);
                                            $('#spinner').hide();
                                        }
                                    }
                                    else {
                                        toastr.error('Some error has occur');
                                        $('#spinner').hide();
                                    }
                                    $('#spinner').hide();
                                    $scope.$apply();
                                },
                                { buffer: true, escape: true, timeout: 120000 }
                            );
                        }

                        /* convert excel date to js date */
                        function ExcelDateToJSDate(serial) {
                            var utc_days = Math.floor(serial - 25569);
                            var utc_value = utc_days * 86400;
                            var date_info = new Date(utc_value * 1000);
                            var fractional_day = serial - Math.floor(serial) + 0.0000001;
                            var total_seconds = Math.floor(86400 * fractional_day);
                            var seconds = total_seconds % 60;
                            total_seconds -= seconds;
                            var hours = Math.floor(total_seconds / (60 * 60));
                            var minutes = Math.floor(total_seconds / 60) % 60;
                            return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate(), hours, minutes, seconds);
                        }

                        /* check for date is valid */
                        function DateIsValid(date) {
                            if (date != undefined) {
                                var timestamp = Date.parse(date);
                                return timestamp
                            } else {
                                return 1
                            }
                        }

                        function TripDateIsValid(date) {
                            var stamp = Date.parse(date);
                            return stamp
                        }

                        function ValidateField(field) {
                            if (field === undefined) {
                                return false
                            } else {
                                return true
                            }
                        }

                        function isNumber(num) {
                            if (num != undefined) {
                                var num1 = parseFloat(num);
                                if (isNaN(num1) === true) {
                                    return true
                                } else {
                                    return false
                                }
                            } else {
                                return true
                            }
                        }

                        /* EMC - 217 Added On 8 February 2022  */
                        $scope.openModalForDeleteTrips = function () {
                            $scope.refreshEmployees();
                            $scope.sortKey = 'fullname';
                            $scope.deleteTripProcess = true;
                        }

                        $scope.closeTripModal = function () {
                            navToggle();
                            $scope.massTextEnable = false;
                            $scope.massNotiTextEnable = false;
                            $scope.deleteTripProcess = false;
                            $scope.uploadloaProcess = false;
                            $scope.uploadmileageProcess = false;
                            $scope.showResendBtn = false;
                            $scope.showTextMsgBtn = false;
                            $scope.showNotiBtn = false;
                            $scope.showMileageBtn = false;
                            $scope.showLOABtn = false;
                            $scope.showLocationBtn = true;
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            $scope.nameOfPage = 'Communications';
                        }

                        $scope.closeNotificationModal = function(){
                            $scope.nameOfPage = 'Messaging';
                            $scope.massNotiTextEnable = false;
                            $scope.checkboxShowNotiText = false;
                            $scope.showNotiBtn = true;
                            $scope.showCancelProBtn = false;
                            $scope.showTextNotiBtn = false;
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            document.getElementById('notification-message-area').value = '';
                            angular.forEach($scope.driverInfo, function (item) {
                                if (item.massNotiText) {
                                    item.massNotiText = false;
                                }
                            });
                        }

                        $scope.onNotificationMessage = function(){
                            var textInput = document.getElementById('notification-message-area').value;
                            angular.forEach($scope.driverNotificationList, function(l){
                                l.notiMessage = textInput
                            })
                            $scope.isNotiActive = (textInput != '') ? false : true;
                        }

                        $scope.sendNotificationToAll = function(){
                            $('#loading').text("Your notification is being sent");
                            $('#spinner').show();
                            $scope.massNotiTextEnable = false;
                            var driverNotificationInfo = angular.copy($scope.driverNotificationList);
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.editInlineNewEmployee}', JSON.stringify(driverNotificationInfo), $scope.id,
                                function (result, event) {
                                    if (event.status) {
                                        $('#spinner').hide();
                                        $('#loading').text("");
                                        toastr.success("Notification is send successfully");
                                        location.reload();
                                    }
                                    else {
                                        $('#spinner').hide();
                                        $('#loading').text("");
                                        toastr.error('Some error has occur');
                                    }
                                    $scope.$apply();
                                },
                                { buffer: true, escape: true, timeout: 120000 }
                            );
                        }

                        $scope.closeChatModal = function () {
                            $scope.nameOfPage = 'Messaging';
                            $scope.massTextEnable = false;
                            $scope.checkboxShowText = false;
                            $scope.showTextMsgBtn = true;
                            $scope.showCancelProBtn = false;
                            $scope.showTextBtn = false;
                            $scope.isDefault = true;
                            $scope.isMileageImport = false;
                            $scope.isUpdateVisible = false;
                            document.getElementById('chat-message-area').value = '';
                            angular.forEach($scope.driverInfo, function (item) {
                                if (item.massText) {
                                    item.massText = false;
                                }
                            });
                        }

                        $scope.onChatMessage = function(){
                            var messageTextInput = document.getElementById('chat-message-area').value;
                            $scope.isSendActive = (messageTextInput != '' || $scope.imageUploading) ? false : true;
                        }

                        $scope.sendMessageToAll = function(element){
                            $('#loading').text("Your text is being sent");
                            $('#spinner').show();
                            $scope.massTextEnable = false;
                            var text = document.getElementById('chat-message-area').value;
                            var driverTextInfo = angular.copy($scope.driverTextList);
                            if($scope.imageUploading){
                                $scope.uploadImageFileInChunk(element, text, driverTextInfo);
                            }else{
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.sendMessageToMultipleContacts}', JSON.stringify(driverTextInfo), text,
                                    function (result, event) {
                                        if (event.status) {
                                            $('#spinner').hide();
                                            $('#loading').text("");
                                            toastr.success("Message Sent Successfully");
                                            location.reload();
                                        }
                                        else {
                                            $('#spinner').hide();
                                            $('#loading').text("");
                                            toastr.error('Some error has occur');
                                        }
                                        $scope.$apply();
                                    },
                                    { buffer: true, escape: true, timeout: 120000 }
                                );
                            }
                        
                        
                        }

                        $scope.acceptRequest = function () {
                            navToggle();
                            $scope.deleteTripProcess = false;
                            $('#loading').text("");
                            $('#spinner').show();
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.DeleteTrips}', $scope.id,
                                function (result, event) {
                                    if (event.status) {
                                        $('#spinner').hide();
                                        toastr.success("Successfully deleted recently uploaded trips");
                                        setTimeout(function () {
                                            location.reload();
                                        }, 4000)

                                    }
                                    else {
                                        toastr.error('Some error has occur');
                                        $('#spinner').hide();
                                    }
                                    $('#spinner').hide();
                                    $scope.$apply();
                                },
                                { buffer: true, escape: true, timeout: 120000 }
                            );
                        }
                        /* EMC - 214 Added On 1 February 2022  */
                        $scope.openModalForLOAUpload = function () {
                            $scope.uploadloaProcess = true;
                            $scope.enableNotification = false;
                        }

                        /* EMC - 214 Added On 1 February 2022  */
                        $scope.closeLOAModal = function () {
                            $scope.uploadloaProcess = false;
                            $scope.loaBtn = true;
                            $scope.biweeklyPayRole = $scope.biweeklyDate[0];
                        }

                        /* EMC - 182 Added On 21 December 2021 */
                        $scope.openModalForUpload = function () {
                            $scope.uploadmileageProcess = true;
                            $scope.enableNotification = false;
                        }

                        /* EMC - 182 Added On 21 December 2021 */
                        $scope.closeMileageModal = function () {
                            $scope.uploadmileageProcess = false;
                            $scope.mileageBtn = true;
                            $scope.biweeklyPayRole = $scope.biweeklyDate[0];
                        }

                        $scope.mileage_file_changed = function (element) {
                            $('#spinner').show();
                            $('#loading').text("Uploading...");
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.data = '';
                            choosefile = element;
                            var findex = (element.files[0].name).lastIndexOf(".");
                            var photofile = element.files[0];
                            chooseFileName = photofile.name;
                            //console.log('file size :- '+choosefile.files[0].size);
                            var strsubstring = (element.files[0].name).substring(findex, (element.files[0].name).length);
                            if (strsubstring == '.xls' || strsubstring == '.xlsx' || strsubstring == '.csv') {
                                if (choosefile.files[0].size > 0 && choosefile.files[0].size < 4350000) {
                                    //console.log($('#file-column')[0].classList)
                                    choosefile = element;
                                    $scope.mileageChoose.push(element);
                                }
                                else {
                                    toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .');
                                    $('#loading').text("");
                                    $('#spinner').hide();
                                }
                            }
                            else {
                                toastr.error('Please upload correct File. File extension should be .csv or .xls');
                                $('#loading').text("");
                                $('#spinner').hide();
                            }

                            var fl = choosefile.files[0].size;

                            $scope.$apply(function (scope) {
                                choosenfileType = photofile.type;
                                var reader = new FileReader();
                                $scope.mileagefsize = element.files[0].size;
                                reader.onload = function (e) {
                                    $scope.data = reader.result;
                                };
                                reader.readAsDataURL(photofile);
                                $scope.uploadMileageInChunk(element);
                            });
                        }

                        $scope.uploadMileageInChunk = function (element) {
                            var lfile;
                            if (element != null || element != undefined) {
                                angular.forEach($scope.mileageChoose, function (fl) {
                                    lfile = fl.files[0];
                                })
                            }

                            if (lfile != undefined) {
                                var selectedFile = lfile;
                                var reader = new FileReader();
                                reader.onload = function (event) {
                                    var data = this.result;
                                    var workbook = XLSX.read(data, {
                                        type: 'binary',
                                        cellDates: true,
                                        dateNF: 'mm/dd/yyyy'
                                    });
                                    workbook.SheetNames.forEach(function (sheetName) {
                                        var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName], { raw: false });
                                        var isValidApprove, isValidTrip, isTripStatus, isEmployeeId, countApprove = 0, countTrip = 0, countStatus = 0, countID = 0;
                                        for (var R = 0; R < XL_row_object.length; R++) {
                                            XL_row_object[R].Actual_Mileage = (XL_row_object[R].Actual_Mileage != "" || XL_row_object[R].Actual_Mileage != undefined) ? parseFloat(XL_row_object[R].Actual_Mileage) : 0;
                                            isValidApprove = DateIsValid(XL_row_object[R].Approved_Date);
                                            isValidTrip = TripDateIsValid(XL_row_object[R].Trip_Date);
                                            isTripStatus = ValidateField(XL_row_object[R].Trip_Status);
                                            isEmployeeId = ValidateField(XL_row_object[R].EmployeeId);
                                            if (isNaN(isValidApprove) === true) countApprove++;
                                            if (isNaN(isValidTrip) === true) countTrip++;
                                            if (isTripStatus === false) countStatus++;
                                            if (isEmployeeId === false) countID++;
                                        }
                                        if (countApprove === 0 && countTrip === 0 && countID === 0 && countStatus === 0) {
                                            var json_object = JSON.stringify(XL_row_object);
                                            uploadMileageAttachment(json_object);
                                        } else {
                                            $('#spinner').hide();
                                            if (countTrip > 0) { toastr.error('Please enter valid trip date. Date format should be mm/dd/yyyy or m/dd/yyyy or m/dd/yy') }
                                            if (countApprove > 0) { toastr.error('Please enter valid approval date. Date format should be mm/dd/yyyy or m/dd/yyyy or m/dd/yy') }
                                            if (countStatus > 0) { toastr.error('Please enter trip status.') }
                                            if (countID > 0) { toastr.error('Please enter Employee Id.') }
                                            document.querySelector('.mileage-file').value = "";
                                        }

                                    })
                                };

                                reader.onerror = function (event) {
                                    console.error("File could not be read! Code " + event.target.error.code);
                                };

                                reader.readAsBinaryString(selectedFile);
                            }
                            console.log("from mileage file", lfile);
                        }

                        function uploadMileageAttachment(json) {
                            $('#loading').text("");
                            $('#spinner').show();
                            var mileagelist, paySplit, payStartDate, payEndDate;
                            var jsonBody = JSON.parse(json);
                            if ($scope.biweeklyPayRole != null && $scope.biweeklyPayRole != '' && $scope.biweeklyPayRole != "Select Pay Period") {
                                paySplit = $scope.biweeklyPayRole.split(" to ");
                                payStartDate = $filter('date')(new Date(paySplit[0]), 'yyyy-MM-dd');
                                payEndDate = $filter('date')(new Date(paySplit[1]), 'yyyy-MM-dd');
                            }
                            if (jsonBody[0] != null || jsonBody[0] != undefined) {
                                var mileageKeys = Object.keys(jsonBody[0]);
                                if (mileageKeys.includes("Trip_Date") || mileageKeys.includes("Trip_Origin")
                                    || mileageKeys.includes("Trip_Destination") || mileageKeys.includes("Trip_Status")
                                    || mileageKeys.includes("Approved_Date") || mileageKeys.includes("Day_Of_Week") || mileageKeys.includes("Notes")
                                    || mileageKeys.includes("Actual_Mileage") || mileageKeys.includes("Activity") || mileageKeys.includes("Contact_Email")
                                    || mileageKeys.includes("Tag") || mileageKeys.includes("EmployeeId")) {
                                    mileagelist = jsonBody;
                                    $scope.mileageAttachment = JSON.stringify(mileagelist);
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.UploadMileage}', $scope.mileageAttachment, $scope.accid, $scope.id, payStartDate, payEndDate,
                                        function (result, event) {
                                            if (event.status) {
                                                $('#spinner').hide();
                                                toastr.success("We have received your upload, the data will be processed and made available within 72 work hours");
                                                location.reload();
                                            }
                                            else {
                                                toastr.error('Some error has occur');
                                                $('#spinner').hide();
                                            }
                                            $('#spinner').hide();
                                            $scope.$apply();
                                        },
                                        { buffer: true, escape: true, timeout: 120000 }
                                    );
                                } else {
                                    $('#spinner').hide();
                                    toastr.error("The file you have uploaded is not valid for mileage");
                                }
                            } else {
                                $('#spinner').hide();
                                toastr.error("The file you have uploaded is not valid for mileage");
                            }
                        }

                        $scope.location_file_changed = function (element) {
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.locationdata = '';
                            choosefile = element;
                            fileIndex = parseInt(element.name);
                            var findex = (element.files[0].name).lastIndexOf(".");
                            var photofile = element.files[0];
                            chooseFileName = photofile.name;
                            //console.log('file size :- '+choosefile.files[0].size);
                            var strsubstring = (element.files[0].name).substring(findex, (element.files[0].name).length);
                            var locationElement = document.querySelectorAll('#location-file-column');
                            if (strsubstring == '.xls' || strsubstring == '.xlsx' || strsubstring == '.csv') {
                                $(`#location-path-wrap-${fileIndex}`).removeClass('d-none');
                                document.getElementById(`location-file-name-${fileIndex}`).innerHTML = chooseFileName;
                                if (choosefile.files[0].size > 0 && choosefile.files[0].size < 4350000) {
                                    $(`#locationFileBtn-${fileIndex}`).addClass('d-none');
                                    $(`#uploadLocationBtn-${fileIndex}`).removeClass('d-none');
                                    if ($('#location-file-column')[0].classList.length > 1) {
                                        // $('#file-column').removeClass('vw-12');
                                        // $('#file-column').addClass('w-19');
                                        $("#locate-thead").removeClass('em-10');
                                        $("#locate-thead").addClass('em-15');
                                        angular.forEach(locationElement, function (n) {
                                            if (n.className.includes('vw-12')) {
                                                n.classList.remove('vw-12');
                                                n.classList.add('w-14');
                                            }
                                        })
                                    }
                                    //console.log($('#file-column')[0].classList)
                                    choosefile = element;
                                    $scope.locationChoose.push(element);
                                }
                                else {
                                    // $scope.IsVisiblebtn = false;
                                    $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                    document.getElementById(`location-file-name-${fileIndex}`).innerHTML = "";
                                    toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .');
                                }
                            }
                            else {
                                $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                document.getElementById(`location-file-name-${fileIndex}`).innerHTML = "";
                                toastr.error('Please upload correct File. File extension should be .csv or .xls');
                            }

                            var fl = choosefile.files[0].size;


                            $scope.$apply(function (scope) {
                                choosenfileType = photofile.type;
                                var reader = new FileReader();
                                $scope.locationfsize = element.files[0].size;
                                reader.onload = function (e) {
                                    $scope.locationdata = reader.result;
                                };
                                reader.readAsDataURL(photofile);
                            });
                        }

                        $scope.uploadLocationInChunk = function (element, contact) {
                            var lfile;
                            if (element.currentTarget != null || element.currentTarget != undefined) {
                                angular.forEach($scope.locationChoose, function (fl) {
                                    if (fl.name === element.currentTarget.name) {
                                        lfile = fl.files[0];
                                        fileIndex = parseInt(element.currentTarget.name);
                                    }
                                })
                            }

                            if (lfile != undefined) {
                                var selectedFile = lfile;
                                var reader = new FileReader();
                                reader.onload = function (event) {
                                    var data = this.result;
                                    var workbook = XLSX.read(data, {
                                        type: 'binary'
                                    });
                                    workbook.SheetNames.forEach(function (sheetName) {
                                        var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                                        var json_object = JSON.stringify(XL_row_object);
                                        uploadLocationAttachment(json_object, contact.triploguserid, fileIndex);
                                    })
                                };

                                reader.onerror = function (event) {
                                    console.error("File could not be read! Code " + event.target.error.code);
                                };

                                reader.readAsBinaryString(selectedFile);
                            }
                            console.log("from location file", lfile);
                        }

                        /* EMC - 396 Starts-------- */

                        $scope.removeImageUpload = function(){
                            var messageTextInput = document.getElementById('chat-message-area').value;
                            $scope.isSendActive = (messageTextInput != '') ? false : true;
                            document.getElementById('file-image').src = "";
                            document.getElementById('image-file_type').value = "";
                            $scope.imageUploading = false;
                        }

                        $scope.attachmentImage = function (element) {
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.data = '';
                            choosefile = element;
                            var findex = (element.files[0].name).lastIndexOf(".");
                            var photofile = element.files[0];
                            var chat_file = document.getElementById('file-image');
                            chooseFileName = photofile.name;
                            //console.log('file size :- '+choosefile.files[0].size);
                            var strsubstring = (element.files[0].name).substring(findex, (element.files[0].name).length);
                            if (strsubstring == '.png' || strsubstring == '.jpg' || strsubstring == '.jpeg') {
                                if (choosefile.files[0].size > 0 && choosefile.files[0].size < 300000) {
                                    choosefile = element;
                                    $scope.imageChoose.push(element);
                                    $scope.$apply(function (scope) {
                                        $scope.isSendActive = false;
                                        $scope.imageUploading = true;
                                        choosenfileType = photofile.type;
                                        var reader = new FileReader();
                                        reader.onload = function (e) {
                                            chat_file.src = reader.result;
                                        };
                                        reader.readAsDataURL(photofile);
                                    });
                                }
                                else {
                                    $scope.imageUploading = false;
                                    toastr.error('Base 64 Encoded file is too large.  Maximum size is 300 KB .');
                                }
                            }
                            else {
                                $scope.imageUploading = false;
                                toastr.error('Please upload correct File. File extension should be .png, .jpg or .jpeg');
                                $('#loading').text("");
                                $('#spinner').hide();
                            }

                        }

                        $scope.uploadImageFileInChunk = function (element, textMessage, driverTextInfo) {
                            var file;
                            if (element.currentTarget != null || element.currentTarget != undefined) {
                                angular.forEach($scope.imageChoose, function (f) {
                                    if (f.name === element.currentTarget.name) {
                                        file = f.files[0];
                                    }
                                })
                            }

                            console.log(file);
                            //var file = choosefile.files[0];
                            if (file != undefined) {
                                if (file.size <= dialogFileSize) {
                                    attachmentName = file.name;
                                    var fileReader = new FileReader();
                                    fileReader.onloadend = function (e) {
                                        e.preventDefault();
                                        attachment = window.btoa(this.result);
                                        positionIndex = 0;
                                        fileSize = attachment.length;
                                        doneUploading = false;
                                        if (fileSize < maxStringSize) {
                                            uploadImageAttachment(textMessage, driverTextInfo);
                                        } else {
                                            toastr.error('Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + "."');
                                        }
                                    }

                                    fileReader.onerror = function (e) {
                                        toastr.error('There was an error reading the file.  Please try again.');
                                    }
                                    fileReader.onabort = function (e) {
                                        toastr.error('There was an error reading the file.  Please try again.');
                                    }

                                    fileReader.readAsBinaryString(file);
                                }
                                else {
                                    toastr.error('File must be under 4.3 MB in size.  Your file is too large.  Please try again.');
                                }
                            }
                            else {
                                toastr.error('You must choose a file before trying to upload it');
                            }
                        }

                        function uploadImageAttachment(textToSend, driverTextInfo) {
                            $('#spinner').show();
                            var attachmentBody = "";
                            if (fileSize <= positionIndex + chunkSize) {
                                attachmentBody = attachment.substring(positionIndex);
                                doneUploading = true;
                            } else {
                                attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
                            }
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.sendImageToMultipleContacts}', JSON.stringify(driverTextInfo), attachmentBody, attachmentName, textToSend,
                                function (result, event) {
                                    if (event.status) {
                                        $('#spinner').hide();
                                        $('#loading').text("");
                                        toastr.success("Message Sent Successfully");
                                        location.reload();
                                    }
                                    else {
                                        $('#spinner').hide();
                                        $('#loading').text("");
                                        toastr.error('Some error has occur');
                                    }
                                    $scope.$apply();
                                },
                                { buffer: true, escape: true, timeout: 120000 }
                            );
                        }

                        const changeKeyObjects = (arr, replaceKeys) => {
                            return arr.map(item => {
                                const newItem = {};
                                Object.keys(item).forEach(key => {
                                    newItem[replaceKeys[key]] = item[[key]];
                                });
                                return newItem;
                            });
                        };

                        function uploadLocationAttachment(json, usertriplogId, findexV) {
                            $('#spinner').show();
                            var newArray;
                            var locationcolumn = document.querySelectorAll('#location-file-column');
                            var replaceKeys = { "Default Activity (optional)": "activity", "Latitude (optional)": "latitude", "Longitude (optional)": "longitude", "Name (optional)": "name", "Address": "address" };
                            var locationBody = JSON.parse(json);
                            if (locationBody[0] != null || locationBody[0] != undefined) {
                                var locationKeys = Object.keys(locationBody[0]);
                                if (locationKeys.includes("Default Activity (optional)") || locationKeys.includes("Latitude (optional)")
                                    || locationKeys.includes("Longitude (optional)") || locationKeys.includes("Name (optional)")
                                    || locationKeys.includes("Address")) {
                                    newArray = changeKeyObjects(locationBody, replaceKeys);
                                    newArray.forEach(ob => {
                                        ob.userId = usertriplogId
                                    });
                                    if (newArray.length > 100) {
                                        $('#spinner').hide();
                                        toastr.error("You can upload 100 locations at a time.");
                                        $(`locationFile-${fileIndex}`).value = '';
                                        $(`location-file-name-${fileIndex}`).innerHTML = '';
                                        $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                        $(`#uploadLocationBtn-${fileIndex}`).addClass('d-none');
                                        $(`#locationFileBtn-${fileIndex}`).removeClass('d-none');
                                        $("#locate-thead").addClass('em-10');
                                        $("#locate-thead").removeClass('em-15');
                                        angular.forEach(locationcolumn, function (n) {
                                            if (n.className.includes('w-14')) {
                                                n.classList.remove('w-14');
                                                n.classList.add('vw-12');
                                            }
                                        })
                                    } else {
                                        $scope.locationAttachment = JSON.stringify(newArray);
                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.UploadLocation}', $scope.locationAttachment, $scope.accid,
                                            function (result, event) {
                                                if (event.status) {
                                                    $('#spinner').hide();
                                                    toastr.success("We have received your upload, the data will be processed and made available within 72 work hours");
                                                    $(`locationFile-${fileIndex}`).value = '';
                                                    $(`location-file-name-${fileIndex}`).innerHTML = '';
                                                    $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                                    $(`#uploadLocationBtn-${fileIndex}`).addClass('d-none');
                                                    $(`#locationFileBtn-${fileIndex}`).removeClass('d-none');
                                                    $("#locate-thead").addClass('em-10');
                                                    $("#locate-thead").removeClass('em-15');
                                                    angular.forEach(locationcolumn, function (n) {
                                                        if (n.className.includes('w-14')) {
                                                            n.classList.remove('w-14');
                                                            n.classList.add('vw-12');
                                                        }
                                                    })
                                                }
                                                else {
                                                    toastr.error('Some error has occur');
                                                    $('#spinner').hide();
                                                }
                                                $('#spinner').hide();
                                                $scope.$apply();
                                            },
                                            { buffer: true, escape: true, timeout: 120000 }
                                        );
                                        //   console.log(newArray);

                                    }

                                } else {
                                    $('#spinner').hide();
                                    toastr.error("The file you have uploaded is not valid for location");
                                    $(`locationFile-${fileIndex}`).value = '';
                                    $(`location-file-name-${fileIndex}`).innerHTML = '';
                                    $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                    $(`#uploadLocationBtn-${fileIndex}`).addClass('d-none');
                                    $(`#locationFileBtn-${fileIndex}`).removeClass('d-none');
                                    $("#locate-thead").addClass('em-10');
                                    $("#locate-thead").removeClass('em-15');
                                    angular.forEach(locationcolumn, function (n) {
                                        if (n.className.includes('w-14')) {
                                            n.classList.remove('w-14');
                                            n.classList.add('vw-12');
                                        }
                                    })
                                }
                            } else {
                                $('#spinner').hide();
                                toastr.error("The file you have uploaded is not valid for location");
                                $(`locationFile-${fileIndex}`).value = '';
                                $(`location-file-name-${fileIndex}`).innerHTML = '';
                                $(`#location-path-wrap-${fileIndex}`).addClass('d-none');
                                $(`#uploadLocationBtn-${fileIndex}`).addClass('d-none');
                                $(`#locationFileBtn-${fileIndex}`).removeClass('d-none');
                                $("#locate-thead").addClass('em-10');
                                $("#locate-thead").removeClass('em-15');
                                angular.forEach(locationcolumn, function (n) {
                                    if (n.className.includes('w-14')) {
                                        n.classList.remove('w-14');
                                        n.classList.add('vw-12');
                                    }
                                })
                            }
                        }

                        /* EMC - 214 Added On 1 February 2022  */
                        $scope.loa_file_changed = function (element) {
                            $('#spinner').show();
                            $('#loading').text("Uploading...");
                            chooseFileName = '';
                            attachment = '';
                            choosefile = '';
                            $scope.data = '';
                            choosefile = element;
                            var findex = (element.files[0].name).lastIndexOf(".");
                            var photofile = element.files[0];
                            chooseFileName = photofile.name;
                            //console.log('file size :- '+choosefile.files[0].size);
                            var strsubstring = (element.files[0].name).substring(findex, (element.files[0].name).length);
                            if (strsubstring == '.xls' || strsubstring == '.xlsx' || strsubstring == '.csv') {
                                if (choosefile.files[0].size > 0 && choosefile.files[0].size < 4350000) {
                                    //console.log($('#file-column')[0].classList)
                                    choosefile = element;
                                    $scope.loaChoose.push(element);
                                }
                                else {
                                    toastr.error('Base 64 Encoded file is too large.  Maximum size is 4 MB .');
                                    $('#loading').text("");
                                    $('#spinner').hide();
                                }
                            }
                            else {
                                toastr.error('Please upload correct File. File extension should be .csv or .xls');
                                $('#loading').text("");
                                $('#spinner').hide();
                            }

                            var fLoa = choosefile.files[0].size;

                            $scope.$apply(function (scope) {
                                choosenfileType = photofile.type;
                                var reader = new FileReader();
                                $scope.loafsize = element.files[0].size;
                                reader.onload = function (e) {
                                    $scope.data = reader.result;
                                };
                                reader.readAsDataURL(photofile);
                                $scope.uploadLOAInChunk(element);
                            });
                        }

                        $scope.uploadLOAInChunk = function (element) {
                            var loafile;
                            if (element != null || element != undefined) {
                                angular.forEach($scope.loaChoose, function (fLoa) {
                                    loafile = fLoa.files[0];
                                })
                            }

                            if (loafile != undefined) {
                                var selectedFile = loafile;
                                var reader = new FileReader();
                                reader.onload = function (event) {
                                    var data = this.result;
                                    var workbook = XLSX.read(data, {
                                        type: 'binary',
                                        cellDates: true,
                                        dateNF: 'mm/dd/yyyy'
                                    });

                                    workbook.SheetNames.forEach(function (sheetName) {
                                        var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName], { raw: false });
                                        var isValidStart, isValidEnd, isName, isEmployeeId, isAmount, countStart = 0, countEnd = 0, countName = 0, countID = 0, countAmt = 0;
                                        for (var R = 0; R < XL_row_object.length; R++) {
                                            isValidStart = TripDateIsValid(XL_row_object[R]["LOA Start"]);
                                            isValidEnd = TripDateIsValid(XL_row_object[R]["LOA End"]);
                                            isName = ValidateField(XL_row_object[R].Name);
                                            isEmployeeId = isNumber(XL_row_object[R].Employee);
                                            isAmount = isNumber(XL_row_object[R]["Prorated Amount"]);
                                            if (isNaN(isValidStart) === true) countStart++;
                                            if (isNaN(isValidEnd) === true) countEnd++;
                                            if (isName === false) countName++;
                                            if (isEmployeeId === true) countID++;
                                            if (isAmount === true) countAmt++;
                                        }
                                        if (countStart === 0 && countEnd === 0 && countName === 0 && countID === 0 && countAmt === 0) {
                                            var json_object = JSON.stringify(XL_row_object);
                                            uploadLoaAttachment(json_object);
                                        } else {
                                            $('#spinner').hide();
                                            if (countStart > 0) { toastr.error('Please enter valid loa start date. Date format should be mm/dd/yyyy or m/dd/yyyy or m/dd/yy') }
                                            if (countEnd > 0) { toastr.error('Please enter valid loa end date. Date format should be mm/dd/yyyy or m/dd/yyyy or m/dd/yy') }
                                            if (countName > 0) { toastr.error('Please enter name.') }
                                            if (isAmount > 0) { toastr.error('Please enter valid prorated amount.') }
                                            if (countID > 0) { toastr.error('Please enter valid Employee.') }
                                            document.querySelector('.loa-file').value = "";
                                        }

                                    })
                                };

                                reader.onerror = function (event) {
                                    console.error("File could not be read! Code " + event.target.error.code);
                                };

                                reader.readAsBinaryString(selectedFile);
                            }
                            console.log("from loa file", loafile);
                        }

                        function uploadLoaAttachment(json) {
                            $('#loading').text("");
                            $('#spinner').show();
                            var loalist = [], paySplit, payStartDate, payEndDate;
                            var jsonBody = JSON.parse(json);
                            if ($scope.biweeklyPayRole != null && $scope.biweeklyPayRole != '' && $scope.biweeklyPayRole != "Select Pay Period") {
                                paySplit = $scope.biweeklyPayRole.split(" to ");
                                payStartDate = $filter('date')(new Date(paySplit[0]), 'yyyy-MM-dd');
                                payEndDate = $filter('date')(new Date(paySplit[1]), 'yyyy-MM-dd');
                            }
                            if (jsonBody[0] != null || jsonBody[0] != undefined) {
                                var loaKeys = Object.keys(jsonBody[0]);
                                var arrayList = jsonBody;
                                arrayList.forEach((element) => {
                                    var lRow = {};
                                    lRow.employeeId = element["Employee"];
                                    lRow.proratedAmount = element["Prorated Amount"];
                                    lRow.name = element["Name"];
                                    lRow.loaEnd = element["LOA End"];
                                    lRow.loaStart = element["LOA Start"];
                                    lRow.conDeactivation = element["Deactivation Date"];
                                    loalist.push(lRow);
                                })
                                if (loaKeys.includes("Name") || loaKeys.includes("Employee")
                                    || loaKeys.includes("Prorated Amount") || loaKeys.includes("LOA Start")
                                    || loaKeys.includes("LOA End")) {
                                    $scope.loaAttachment = JSON.stringify(loalist);
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManageNotificationController.UploadLOA}', $scope.loaAttachment, $scope.accid, payStartDate, payEndDate,
                                        function (result, event) {
                                            if (event.status) {
                                                $('#spinner').hide();
                                                toastr.success("We have received your upload, the data will be processed and made available within 72 work hours");
                                                location.reload();
                                            }
                                            else {
                                                toastr.error('Some error has occur');
                                                $('#spinner').hide();
                                            }
                                            $('#spinner').hide();
                                            $scope.$apply();
                                        },
                                        { buffer: true, escape: true, timeout: 120000 }
                                    );
                                } else {
                                    $('#spinner').hide();
                                    toastr.error("The file you have uploaded is not valid for LOA details");
                                }
                            } else {
                                $('#spinner').hide();
                                toastr.error("The file you have uploaded is not valid for LOA details");
                            }
                        }
                                    /* EMC - 214 Ends  */
                }
            ]);
        </script>
    </head>

    <body class="slds-scope" ng-app="manageNotificationModule" ng-controller="manageNotificationController">
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="!admindriver" href="/app/{{mburseUrl}}?accid={{accid}}&id={{id}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="admindriver" href="/app/{{mburseUrl}}?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    <ul class="navbar-nav flex-row alignitemscenter">
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-if="role === 'Admin' && manRole != 'Driver/Manager' && manRole != 'Manager'" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole != 'Manager' && manRole != 'Driver/Manager'" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="role === 'Driver/Manager'" href="/app/drivermanagerdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="role === 'Manager'" href="/app/managerdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Driver/Manager' && (role === 'Driver/Admin' || role === 'Admin') && login"
                                                ng-show="!admindriver" href="/app/drivermanagerdriverdetails?accid={{accid}}&id={{managerid}}&manid={{id}}&showteam={{showteam}}&loginAS=true">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Manager'" ng-show="!admindriver" href="/app/managerdashboardfromadmin?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Manager'" ng-show="admindriver" href="/app/managerdashboardfromadmindriver?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole ===  'Driver/Manager' && !login" ng-show="!admindriver" href="/app/managerdashboardfromadmin?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-if="manRole ===  'Driver/Manager' && !login" ng-show="admindriver" href="/app/managerdashboardfromadmindriver?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                            <!-- <a class="nav-link text-white" ng-if="manRole === 'Manager'" ng-show="!admindriver" href="/app/managerdashboardfromadmindriver?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a> -->
                                        </li>
                                        <li class="nav-item" ng-if="(role === 'Driver/Admin' || role === 'Admin') && manRole === 'Driver/Manager' && login">
                                            <a class="nav-link text-white" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&managerid={{managerid}}&showteam={{showteam}}&loginAS=true">Mileage</a>
                                        </li>
                                        <li class="nav-item" ng-if="manRole != 'Manager' && manRole != 'Driver/Manager'">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">Mileage</a>
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Mileage</a>
                                        </li>
                                        <li class="nav-item" ng-if="role != 'Driver/Manager' && role != 'Manager' && manVisible && !login">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                        </li>
                                        <li class="nav-item" ng-if="role != 'Driver/Manager' && role != 'Manager' && !manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                        </li>
                                        <li class="nav-item active">
                                            <a class="nav-link text-white active" ng-show="admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">Communications</a>
                                            <a class="nav-link text-white active" ng-show="!admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}">Communications</a>
                                        </li>
                                        <li class="nav-item" ng-if="role != 'Driver/Manager' && role != 'Manager' && manVisible && !login">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?managerid={{managerid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item" ng-if="role != 'Driver/Manager' && role != 'Manager' && !manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-if="(manRole != 'Driver/Manager' && manRole != 'Manager') && role === 'Driver/Admin'" ng-show="admindriver"
                                                href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver={{admindriver}}">My Details</a>
                                            <a class="nav-link text-white" ng-if="role === 'Driver/Manager'" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}">My Details</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Manager' && role === 'Driver/Admin'" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&managerid={{managerid}}&showteam={{showteam}}&admindriver={{admindriver}}">My Details</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Driver/Manager' && (role === 'Driver/Admin' || role === 'Admin')  && login"
                                                href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&manid={{managerid}}&showteam={{showteam}}&loginAS=true">My Details</a>
                                            <a class="nav-link text-white" ng-if="manRole === 'Driver/Manager' && role === 'Driver/Admin'  && !login" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&managerid={{managerid}}&showteam={{showteam}}&admindriver={{admindriver}}">My Details</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>

                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="custom-loading-text" id="loading">
            </div>
        </div>
        <div class="overlay-navigation">
            <nav role="navigation" id="action-nav">
                <ul class="un-list">
                    <li class="action-nav-list" ng-class="{'flex_basis' : accid === PLMarketing}">
                        <a ng-click="insuranceProcess()" data-content="Send email to driver/admin to submit your insurance declaration page">Insurance Reminder</a>
                    </li>
                    <li class="action-nav-list" ng-class="{'flex_basis' : accid === PLMarketing}">
                        <a ng-click="massText()" data-content="Send mass text & notification messages" ng-show="isTextMessaging">Messaging</a>
                        <a ng-click="massText()" data-content="Send mass notification messages" ng-show="!isTextMessaging">Messaging</a>
                    </li>
                    <li class="action-nav-list" ng-if="accid === PLMarketing" ng-class="{'flex_basis' : accid === PLMarketing}">
                        <a ng-click="mileageProcess()" data-content="Upload your trips with mileages in biweekly pay period">Mileage Upload</a>
                    </li>
                    <li class="action-nav-list" ng-if="accid === PLMarketing" ng-class="{'flex_basis' : accid === PLMarketing}">
                        <a ng-click="loaProcess()" data-content="Import Leave Of Absence details">Leave Of Absence Upload</a>
                    </li>
                    <li class="action-nav-list" ng-if="accid === PLMarketing" ng-class="{'flex_basis' : accid === PLMarketing}">
                        <a ng-click="openModalForDeleteTrips()" data-content="Delete recently uploaded trips">Delete Trips</a>
                    </li>
                    <li class="action-nav-list" ng-if="accountIDs.indexOf(accid) > -1" ng-class="{'flex_basis' : accid === PLMarketing}">
                         <a ng-click="importMileageList()" data-content="Import mileage to reimbursement">Mileage</a>
                    </li>
                </ul>
            </nav>
        </div>

        <section class="home">
            <div class="open-overlay slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light">
                <div style="font-size: 14px">MENU
                    <i class="fa fa-bars"></i>
                </div>
                <!-- <span class="bar-top"></span>
    <span class="bar-middle"></span>
    <span class="bar-bottom"></span> -->
            </div>
            <div class="menuToggler d-none">
                <i class="fa fa-close fa-3x" ng-class="{'reverse-white' : accid != PLMarketing}"></i>
            </div>
        </section>
        <div class="slds-container">
            <!-- <div id="myNav" class="overlay">
                <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
                <div class="overlay-content">
                  <a href="#">About</a>
                  <a href="#">Services</a>
                  <a href="#">Clients</a>
                  <a href="#">Contact</a>
                </div>
              </div>           -->
            <div class="report-link">
                <h3 class="mb-15 d-block">{{nameOfPage}}</h3>
            </div>
            <div class="form-gray-divider-notify mt-20"></div>
            <div class="slds-fluid-container">
                <div class="process-container">
                    <input type="hidden" id="hidden_user_id" />
                    <div>
                        <!-- <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0"  ng-click="openNav()">
                            Action List
                        </button> -->
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-show="showResendBtn" ng-click="displayCheckboxForEmail()">
                            Resend Insurance Reminder
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-show="showTextMsgBtn && isTextMessaging" ng-click="displayCheckboxForText()">
                            Mass Text Message
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-show="showNotiBtn" ng-click="displayCheckboxForNotiText()">
                            Mass Notification Message
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-show="isUpdateVisible" ng-click="update()">
                            Update
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-show="isUpdateVisible" ng-click="cancel()">
                            Cancel
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-show="showLocationBtn"
                            ng-click="exportToCsv(locationTemplate, nameOfLocationFile)">
                            <i class="fa fa-download slds-p-right_xx-small"></i> Location Template
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-green waves-light mleft-0" ng-show="showEmailBtn" ng-click="sendMassEmail()">
                            Send Email
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-green waves-light mleft-0" ng-show="showTextBtn" ng-click="sendTextMessage()">
                            Create Text Message
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-green waves-light mleft-0" ng-show="showTextNotiBtn" ng-click="sendNotificationMessage()">
                            Create Notification Message
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-black waves-light mleft cancelBtn" ng-show="showCancelProBtn"
                            ng-click="endProcess()">
                            Cancel Process
                        </button>
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" 
                            ng-click="clearMass()">
                            Clear Mass Notification 
                        </button>
                        <div>
                            <!-- <div class="file-field" ng-if="accid === PLMarketing">
                                        <div class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" id="locationFileBtn-{{$index}}">
                                            <i class="fa fa-upload slds-p-right_xx-small"></i><span>Upload Mileage</span>
                                            <input type="file"  multiple="false"  accept=".xls, .xlsx, .csv"
                                                onchange="angular.element(this).scope().mileage_file_changed(this)" />
                                        </div>
                                    </div> -->
                            <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-click="openModalForUpload()"
                                ng-show="showMileageBtn">
                                <!-- ng-if="accid === PLMarketing"-->
                                <i class="fa fa-upload slds-p-right_xx-small"></i> Upload Mileage
                            </button>
                            <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-click="exportToCsv(mileageTemplate, nameOfMileageFile)"
                                ng-show="showMileageBtn">
                                <!-- ng-if="accid === PLMarketing"-->
                                <i class="fa fa-download slds-p-right_xx-small"></i> Mileage Template
                            </button>
        
                            <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" ng-click="openModalForLOAUpload()"
                                ng-show="showLOABtn">
                                <!-- ng-if="accid === PLMarketing"-->
                                <i class="fa fa-upload slds-p-right_xx-small"></i> Upload LOA
                            </button>
                            <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-click="exportToCsv(loaTemplate, nameOfLOAFile)"
                                ng-show="showLOABtn">
                                <!-- ng-if="accid === PLMarketing"-->
                                <i class="fa fa-download slds-p-right_xx-small"></i> LOA Template
                            </button>
                        </div>
                    </div>
                    <div ng-if="lengthofrecord > 30 && isDefault" style="margin-top: 0.375rem;">
                        <dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" responsive="true" auto-hide="false" on-page-change="pageChangeHandler(newPageNumber)"></dir-pagination-controls>
                    </div>
                    <div ng-if="lengthofrecordImport > 30 && isMileageImport" style="margin-top: 0.375rem;">
                        <dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" responsive="true" auto-hide="false" on-page-change="pageChangeImportHandler(newPageNumber)"></dir-pagination-controls>
                    </div>
                    <div class="d-block w-search" id="search_filter" ng-if="lengthofrecord > 30 && isDefault">
                        <div class="input-group">
                            <i class="fa fa-search" id="filtericon" ng-if="(search[searchTerm]).length===0"></i>
                            <i class="fa fa-times" id="cancelicon" ng-if="(search[searchTerm]).length>0" ng-click="resetSearch()"></i>
                            <input aria-controls="example" class="form-control py-2 table_filter_input" placeholder="Search by name" type="search" ng-model="search[searchTerm]"
                              id="filter-input"  ng-keypress="keyPressed($event, search[searchTerm].length)" />
                        </div>
                    </div>
                    <div class="d-block w-search" id="search_filter" ng-if="lengthofrecordImport > 30 && isMileageImport">
                        <div class="input-group">
                            <i class="fa fa-search" id="filtericon" ng-if="(search[searchTerm]).length===0"></i>
                            <i class="fa fa-times" id="cancelicon" ng-if="(search[searchTerm]).length>0" ng-click="resetSearch()"></i>
                            <input aria-controls="example" class="form-control py-2 table_filter_input" placeholder="Search by name" type="search" ng-model="search[searchTerm]"
                                ng-keypress="keyPressed($event, search[searchTerm].length)" />
                        </div>
                    </div>
                </div>
                <div class="mtop-1 slds-p-bottom_x-large" id="tableWrap" ng-if="isDefault">
                    <!-- <input type="text" id="currentLevelDate" /> -->
                    <div style="padding: 0.3em;">
                        <table class="slds-table slds-table_cell-buffer slds-table_striped" id="notifyTable" ng-cloak="true">
                            <thead class="table-thead">
                                <tr class="slds-line-height_reset">
                                    <th ng-show="checkboxShow" class="align-text resendCheck" ng-if="driverInfo.length > 0">
                                        <input class="custom-check" type="checkbox" ng-model="checkboxobj.isCheckedAllForEmail" ng-click="CheckUncheckAllForEmail(checkboxobj.isCheckedAllForEmail,info);"
                                        />
                                    </th>
                                    <th ng-show="checkboxShowText" class="align-text resendCheck" ng-if="driverInfo.length > 0">
                                        <input class="custom-check" type="checkbox" ng-model="checkboxobj.isCheckedAllForText" ng-click="CheckUncheckAllForText(checkboxobj.isCheckedAllForText,info);"
                                        />
                                    </th>
                                    <th ng-show="checkboxShowNotiText" class="align-text resendCheck" ng-if="driverInfo.length > 0">
                                        <input class="custom-check" type="checkbox" ng-model="checkboxobj.isCheckedAllForNotiText" ng-click="CheckUncheckAllForNotiText(checkboxobj.isCheckedAllForNotiText,info);"
                                        />
                                    </th>
                                    <th ng-click="sort('fullname')" class="em-15">Name
                                        <span class="sort-icon m-icon" ng-show="sortKey=='fullname'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                    </th>
                                    <th ng-click="sort('insurance')" class="em-10">Insurance Status
                                        <span class="sort-icon m-icon" ng-show="sortKey=='insurance'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                    </th>
                                    <th class="em-10" id="insurance-thead">Insurance
                                    </th>
                                    <th ng-click="sort('expirationDate')" class="em-8">Expires
                                        <span class="sort-icon m-icon" ng-show="sortKey=='expirationDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                    </th>
                                    <th class="em-10" id="locate-thead">Location</th>
                                    <th>Notification Message</th>
                                    <th>Message</th>
                                </tr>
                            </thead>
                            <tbody ng-class="{'table-scroll' : (driverInfo.length > 5 && (driverInfo | filter:search).length > 5)}" id="style-2">
                                <tr dir-paginate="info in driverInfo | filter:search | orderBy: '-unReadMessageCount' | itemsPerPage: pageSize" current-page="currentPage">
                                    <td ng-model="info.check" ng-show="checkboxShow" class="align-text em-2">
                                        <input class="custom-check" type="checkbox" ng-model="info.massEmail" ng-change="CheckUncheckForEmail(info);" />
                                    </td>
                                    <td ng-model="info.checkText" ng-show="checkboxShowText" class="align-text em-2">
                                        <input class="custom-check" type="checkbox" ng-model="info.massText" ng-change="CheckUncheckForText(info);" />
                                    </td>
                                    <td ng-model="info.checkNotiText" ng-show="checkboxShowNotiText" class="align-text em-2">
                                        <input class="custom-check" type="checkbox" ng-model="info.massNotiText" ng-change="CheckUncheckForNotiText(info);" />
                                    </td>
                                    <td class="name-td em-15" ng-if="role != 'Admin' && role != 'Driver/Admin'">{{info.fullname}}</td>
                                    <td class="em-15" ng-if="role === 'Admin' || role === 'Driver/Admin'">
                                        <a ng-click="openProfile(info)" class="name-info-link name-td ">{{info.fullname}}</a>
                                    </td>
                                    <td ng-model="info.insurance" class="em-10" ng-if="info.role != 'Manager'">
                                        <!-- {{info.insurance}} -->
                                        <span class="dot" ng-class="{'red-bg' : info.insurance == 'No', 'green-bg' : info.insurance == 'Yes'}" ng-if="info.insurance != 'Not Submitted' && info.insurance != 'Insurance Card' && info.insurance != 'Not Meeting Plan Minimum' && info.insurance != 'Expired' && info.insurance != null "></span>
                                        <span class="not-meeting-status" ng-if="info.insurance == 'Not Submitted' || info.insurance == 'Insurance Card' || info.insurance == 'Expired' ">{{info.insurance}}</span>
                                        <span class="not-meeting-status" ng-if="info.insurance == 'Not Meeting Plan Minimum'">{{info.insurance}}</span>
                                    </td>
                                    <td ng-model="info.insurance" class="em-10" ng-if="info.role == 'Manager'">
                                    </td>
                                    <td class="file-td vw-12" id="file-column">
                                        <section class="section-preview" ng-if="info.role != 'Manager'">
                                            <form class="sd-form">
                                                <div class="file-field">
                                                    <div class="slds-btn slds-btn-primary slds-btn-sm float-left waves-light m-0" id="fileBtn-{{$index}}">
                                                        <span>Choose file</span>
                                                        <input type="file" name="{{$index}}" id="file-{{$index}}" multiple="false" accept="application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                                                            onchange="angular.element(this).scope().file_changed(this)" />
                                                    </div>
                                                    <button class="slds-btn slds-btn-primary slds-btn-sm float-left waves-effect bc-blue mleft waves-light d-none" name="{{$index}}"
                                                        id="uploadBtn-{{$index}}" ng-click="uploadFileInChunk($event, info.insuranceId, info.contactId, info)">
                                                        <!--ng-click="uploadFileInChunk($event, info.insuranceId, info.contactId, info)"-->
                                                        Upload
                                                    </button>
                                                    <div class="file-path-wrapper d-none" id="file-path-wrap-{{$index}}">
                                                        <label class="file-path" id="file-name-{{$index}}"></label>
                                                    </div>
                                                </div>
                                            </form>
                                        </section>
                                    </td>
                                    <td class="date-td em-8" ng-model="info.expirationDate" ng-if="info.role != 'Manager'">{{info.expirationDate | date:"MM/dd/yyyy"}}</td>
                                    <td class="date-td em-8" ng-model="info.expirationDate" ng-if="info.role == 'Manager'"></td>
                                    <!-- <td class="notify-td" ng-model="info.notiMessage" ng-show="!info.isEditable">
                                                <div class="slds-float-left notify-para notify-para-width" onmouseover="isEllipsisActive(this)" id="notifyColumn">
                                                    {{info.notiMessage}}
                                                </div>
                                                <div class="slds-float-right">
                                                    <div ng-if="info.notificationDate != null" class="slds-float-left slds-p-right_small notify-date">{{info.notificationDate | date:"MM/dd/yyyy"}}</div>
                                                    <a ng-click="info.isEditable = !info.isEditable" class="slds-float-right pd-2">
                                                        <i class="fa fa-edit"></i>
                                                    </a>
                                                </div>
                                            </td> -->
                                    <td class="file-td vw-12" id="location-file-column">
                                        <section class="section-preview" ng-if="info.triploguserid != null || info.triploguserid != undefined">
                                            <form class="sd-form">
                                                <div class="file-field">
                                                    <div class="slds-btn slds-btn-primary slds-btn-sm float-left waves-light m-0" id="locationFileBtn-{{$index}}">
                                                        <span>Choose file</span>
                                                        <input type="file" name="{{$index}}" id="locationFile-{{$index}}" multiple="false" accept=".xls, .xlsx, .csv" onchange="angular.element(this).scope().location_file_changed(this)"
                                                        />
                                                    </div>
                                                    <button class="slds-btn slds-btn-primary slds-btn-sm float-left waves-effect bc-blue mleft waves-light d-none" name="{{$index}}"
                                                        id="uploadLocationBtn-{{$index}}" ng-click="uploadLocationInChunk($event, info)">
                                                        <!--ng-click="uploadFileInChunk($event, info.insuranceId, info.contactId, info)"-->
                                                        Upload
                                                    </button>
                                                    <div class="file-path-wrapper d-none" id="location-path-wrap-{{$index}}">
                                                        <label class="file-path" id="location-file-name-{{$index}}"></label>
                                                    </div>
                                                </div>
                                            </form>
                                        </section>
                                    </td>

                                    <td ng-model="info.notiMessage" class="notify-td">
                                        <span class="n-message">{{info.notiMessage}}</span>
                                    </td>

                                    <td>
                                        <div class="slds-p-top_medium">
                                            <!-- <div id="notify-date{{$index}}" ng-if="info.notificationDate != null" class="slds-float-left slds-p-right_small slds-p-top_xx-small notify-date">{{info.notificationDate | date:"MM/dd/yyyy"}}</div> -->
                                            <!-- <a class="slds-button float btn-neutral-padding slds-button_neutral slds-button_dual-stateful slds-is-pressed slds-p-right_small"
                                                ng-click="sendNotification(info, $index);">
                                                <i class="fa fa-paper-plane"></i>
                                            </a> -->
                                            <!-- info.isEditable = !info.isEditable;-->
                                            <!-- <a class="slds-button float  btn-brand-padding slds-button_brand slds-button_dual-stateful slds-is-pressed" ng-click="errorValidate($index)">
                                                <i class="fa fa-times"></i>
                                            </a> -->
                                            <a class="slds-button float btn-neutral-padding slds-button_neutral slds-button_dual-stateful slds-is-pressed slds-p-right_small"
                                                ng-click="openNotification(info, $index);">
                                                <i class="fa-solid fa-at"></i>
                                            </a>
                                            <a class="slds-button float btn-neutral-padding slds-button_neutral slds-button_dual-stateful slds-is-pressed slds-p-right_small"
                                                ng-click="openMessageBot(info, $index);" ng-if="info.trueDialogId && isTextMessaging">
                                                    <i class="fa-solid fa-comment-dots"></i>
                                                    <span class="icon-button__badge" ng-show="isGreater(info.unReadMessageCount)">{{info.unReadMessageCount}}</span>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                                <tr ng-if="(driverInfo | filter:search).length == 0">
                                    <td colspan="6" class="align-text" style="font-size:16px">No Results Found</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- EMC -171 -->
                    <div ng-if="driverInfo.length > 0" class="footer-btn">
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-click="exportToExcel()">
                            Export To Excel
                            <i class="fa fa-download slds-p-right_xx-small"></i>
                        </button>
                    </div>
                </div>

                <div class="mtop-1 slds-p-bottom_x-large" id="tableWrap" ng-if="isMileageImport">
                    <!-- <input type="text" id="currentLevelDate" /> -->
                    <div style="padding: 0.3em;">
                        <table class="slds-table slds-table_cell-buffer slds-table_striped" id="notifyTable" ng-cloak="true">
                            <thead class="table-thead">
                                <tr class="slds-line-height_reset">
                                    <th ng-click="sort('driverName')">Name
                                        <span class="sort-icon m-icon" ng-show="sortKey=='driverName'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                    </th>
                                    <th  id="mileage-thead"  ng-click="sort('totalMileage')">{{monthName}}
                                        <span class="sort-icon m-icon" ng-show="sortKey=='totalMileage'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody ng-class="{'table-scroll' : importList.length > 5}" id="style-2">
                                <tr dir-paginate="import in importList | filter:search | itemsPerPage: pageSize" current-page="currentPage" ng-class="{'selected':import.reimbursementId == selectedRow}">
                                    <td class="name-td ">{{import.driverName}}</td>
                                    <td ng-model="import.totalMileage"  ng-show="import.iseditable">                                            
                                        <input type="text"  ng-model="import.totalMileage" ng-change="numInput(import.totalMileage, this)"
                                            id="numberinput" class="numinputedit form-control rounded-0 col-md-6"
                                        />
                                    </td>
                                    <td class="input-mileage" ng-model="import.totalMileage"  ng-show="!import.iseditable" ng-click="edit(import,import.reimbursementId);import.iseditable = !import.iseditable" title="Click here to edit!">                                            
                                        <input type="text"  ng-model="import.totalMileage" ng-disabled="true"
                                            id="numberinput" class="numinputedit form-control rounded-0 col-md-6"
                                        />
                                    </td>
                                </tr>
                                <tr ng-if="(importList | filter:search).length == 0">
                                    <td colspan="2" class="align-text" style="font-size:16px">No Results Found</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- EMC -171 -->
                    <div ng-if="importList.length > 0" class="footer-btn">
                        <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-click="exportToMileageExcel()">
                            Export To Excel
                            <i class="fa fa-download slds-p-right_xx-small"></i>
                        </button>
                    </div>
                </div>
            </div>
            <!-- EMC - 182 Added On 21 December 2021 -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1"
                class="slds-modal slds-fade-in-open slds-modal_small slds-is-fixed" ng-show="uploadmileageProcess">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header slds-clearfix">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeMileageModal()">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-float_left slds-p-bottom_small">Upload Mileage</h2>
                    </header>
                    <!-- Modal/Popup Box LWC body starts here -->
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable" id="modal-content-id-1">
                        <div class="slds-list_inline slds-p-bottom_xx-small">
                            <label class="slds-text-color_weak slds-p-horizontal_x-small slds-p-top_xxx-small slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_6-of-12">Pay Period :</label>
                            <div class="slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_10-of-12">
                                <select ng-model="biweeklyPayRole" ng-change="onPayPeriodChange(biweeklyPayRole)" class="browser-default custom-select custom-select-xl custom-payPeriod">
                                    <option ng-repeat="bDate in biweeklyDate" ng-selected="{{biweeklyPayRole == bDate}}" value="{{bDate}}">{{bDate}}</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Modal/Popup Box LWC footer starts here -->
                    <footer class="slds-modal__footer">
                        <div class="slds-clearfix">
                            <div class="slds-float_right slds-m-right_small">
                                <div class="file-field" ng-class="{'disable-div' : mileageBtn === true}">
                                    <!-- ng-if="accid === PLMarketing" -->
                                    <div class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" id="locationFileBtn-{{$index}}">
                                        <i class="fa fa-upload slds-p-right_xx-small"></i>
                                        <span>Upload</span>
                                        <input type="file" class="mileage-file" multiple="false" accept=".xls, .xlsx, .csv" onchange="angular.element(this).scope().mileage_file_changed(this)"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" ng-show="uploadmileageProcess"></div>

            <!-- EMC - 214 Added On 1 February 2022 -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1"
                class="slds-modal slds-fade-in-open slds-modal_small slds-is-fixed" ng-show="uploadloaProcess">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header slds-clearfix">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeLOAModal()">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-float_left slds-p-bottom_small">Upload Leave Of Absence Details</h2>
                    </header>
                    <!-- Modal/Popup Box LWC body starts here -->
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable" id="modal-content-id-1">
                        <div class="slds-list_inline slds-p-bottom_xx-small">
                            <label class="slds-text-color_weak slds-p-horizontal_x-small slds-p-top_xxx-small slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_6-of-12">Pay Period :</label>
                            <div class="slds-col slds-size_1-of-1 slds-medium-size_6-of-12 slds-large-size_10-of-12">
                                <select ng-model="biweeklyPayRole" ng-change="onPayPChange(biweeklyPayRole)" class="browser-default custom-select custom-select-xl custom-payPeriod">
                                    <option ng-repeat="bDate in biweeklyDate" ng-selected="{{biweeklyPayRole == bDate}}" value="{{bDate}}">{{bDate}}</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Modal/Popup Box LWC footer starts here -->
                    <footer class="slds-modal__footer">
                        <div class="slds-clearfix">
                            <div class="slds-float_right slds-m-right_small">
                                <div class="file-field" ng-class="{'disable-div' : loaBtn === true}">
                                    <!-- ng-if="accid === PLMarketing" -->
                                    <div class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" id="locationFileBtn-{{$index}}">
                                        <i class="fa fa-upload slds-p-right_xx-small"></i>
                                        <span>Upload</span>
                                        <input type="file" class="loa-file" multiple="false" accept=".xls, .xlsx, .csv" onchange="angular.element(this).scope().loa_file_changed(this)"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" ng-show="uploadloaProcess"></div>

            <!-- EMC - 217 Added On 8 February 2022 -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1"
                class="slds-modal slds-fade-in-open slds-modal_small slds-is-fixed" ng-show="deleteTripProcess">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header slds-clearfix">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeTripModal()">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-float_left slds-p-bottom_small">Delete Trips</h2>
                    </header>
                    <!-- Modal/Popup Box LWC body starts here -->
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable" id="modal-content-id-1">
                        <div class="slds-align_absolute-center">
                            Are you sure you want to delete recently uploaded trips ?
                        </div>
                    </div>
                    <!-- Modal/Popup Box LWC footer starts here -->
                    <footer class="slds-modal__footer">
                        <div class="slds-clearfix">
                            <div class="slds-float_right slds-m-right_small">
                                <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" data-dismiss="modal" ng-click="closeTripModal()">
                                    <!-- ng-if="accid === PLMarketing"-->
                                    No
                                </button>
                                <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-grey waves-light mleft-0" ng-click="acceptRequest()">
                                    Yes
                                </button>
                            </div>
                        </div>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" ng-show="deleteTripProcess"></div>

            <!-- EMC - 361 Modal For Mass Text Messaging -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1"
                class="slds-modal slds-fade-in-open slds-modal_small slds-is-fixed" ng-show="massTextEnable">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header slds-clearfix">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeChatModal()">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-float_left slds-p-bottom_small">Text Message</h2>
                    </header>
                    <!-- Modal/Popup Box LWC body starts here -->
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable" id="modal-content-id-1">
                        <div class="slds-align_absolute-center">
                            <textarea ng-model="truedailogChat"  placeholder="Type your message here.." class="slds-textarea" id="chat-message-area" ng-change="onChatMessage()"></textarea>
                            <div class="col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3" ng-show="imageUploading">
                                <div class="close-image position-absolute">
                                    <button class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-red waves-light mleft-0" ng-click="removeImageUpload()">
                                        <i class="fa fa-times"></i>
                                    </button>
                                </div>
                                <img id="file-image"   class="chat__file-image chat_background" style="height: auto;" />
                            </div>
                        </div>
                    </div>
                    <!-- Modal/Popup Box LWC footer starts here -->
                    <footer class="slds-modal__footer">
                        <div class="slds-clearfix">
                            <div class="slds-float_right slds-m-right_small">
                                <div class="file-field">
                                    <div class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-blue waves-light mleft-0" id="imageFileBtn">
                                        <i class="fa fa-paperclip slds-p-right_xx-small"></i>
                                        <span>Attachment</span>
                                        <input id="image-file_type" type="file" class="image-file" multiple="false" accept="image/png, image/jpeg" onchange="angular.element(this).scope().attachmentImage(this)"
                                        />
                                    </div>
                                </div>
                                <button id="sendMessageBtn" ng-class="{'disable-div' : isSendActive === true}" class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-mburse-green waves-light mleft-0" ng-click="sendMessageToAll($event)">
                                    <i class="fa-solid fa-paper-plane slds-p-right_x-small"></i>Send Message
                                </button>
                            </div>
                        </div>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" ng-show="massTextEnable"></div>

            <!-- EMC 361 Modal For Mass Notification Message -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-02" aria-modal="true" aria-describedby="modal-content-id-2"
                class="slds-modal slds-fade-in-open slds-modal_small slds-is-fixed" ng-show="massNotiTextEnable">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header slds-clearfix">
                        <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeNotificationModal()">
                            <span aria-hidden="true">×</span>
                        </button>
                        <h2 id="modal-heading-02" class="slds-text-heading_medium slds-hyphenate slds-float_left slds-p-bottom_small">Notification Message</h2>
                    </header>
                    <!-- Modal/Popup Box LWC body starts here -->
                    <div class="slds-modal__content slds-p-around_medium slds-scrollable" id="modal-content-id-2">
                        <div class="slds-align_absolute-center">
                            <textarea ng-model="notiMessageAll" placeholder="Type a short message here" class="slds-textarea" id="notification-message-area" ng-change="onNotificationMessage()"></textarea>
                        </div>
                    </div>
                    <!-- Modal/Popup Box LWC footer starts here -->
                    <footer class="slds-modal__footer">
                        <div class="slds-clearfix">
                            <div class="slds-float_right slds-m-right_small">
                                <button id="sendNotiBtn" ng-class="{'disable-div' : isNotiActive === true}" class="slds-btn slds-btn-primary slds-btn-sm waves-effect bc-mburse-green waves-light mleft-0"
                                    ng-click="sendNotificationToAll()">
                                    <i class="fa-solid fa-paper-plane slds-p-right_x-small"></i>Send Notification
                                </button>
                            </div>
                        </div>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" ng-show="massNotiTextEnable"></div>
        </div>

        <!-- EMC - 361 Custom chat bot -->
        <div  class="noti_Container"  ng-show="enableNotification">
            <div>
                <div role="presentation" class="noti_chat">
                    <div  class="noti_P">
                        <div class="noti_Q">
                            <header class="noti_HeaderView">
                                <div class="noti_HeaderRow">
                                    <div>
                                        <h1 class="noti_Title">Notification Message</h1>
                                        <h2 class="noti_Title">{{singleMessage.fullname}}</h2>
                                    </div>
                                
                                    <button type="button" class="slds-button close-noti-message" data-dismiss="modal" ng-click="closeNotificationPopup(msgIndex)"><i class="fa-solid fa-xmark"></i></button>
                                </div>
                            </header>
                            <form class="noti_FormContainer">
                                <main>
                                    <div class="noti_Fields">
                                        <div>
                                            <div>
                                                <textarea id="message-area{{msgIndex}}" ng-model="singleMessage.notiMessage"  rows="5" name="message" placeholder="Type a short message here"
                                                    class="noti_TextInput"></textarea>
                                                    <div class="span-error slds-p-top_x-small d-none error-text" id="span-error{{msgIndex}}">
                                                        <i class="fa-solid fa-exclamation"></i>
                                                            Please enter a short message
                                                    </div>
                                                <div id="notify-date{{msgIndex}}" ng-if="singleMessage.notificationDate != null" class="slds-float-right slds-p-top_xx-small notify-date">{{singleMessage.notificationDate | date:"MM/dd/yyyy"}}</div>
                                            </div>
                                        </div>
                                    </div>
                                </main>
                                <footer class="slds-modal__footer">
                                    <div class="slds-clearfix">
                                        <div class="slds-float-right">
                                            <a class="slds-button float btn-neutral-padding slds-button_neutral slds-button_dual-stateful slds-is-pressed slds-p-right_small"
                                                ng-click="sendNotification(singleMessage, msgIndex);">
                                                <i class="fa fa-paper-plane"></i>
                                            </a>
                                            <a class="slds-button float  btn-brand-padding slds-button_brand slds-button_dual-stateful slds-is-pressed" ng-click="errorValidate(msgIndex)">
                                                <i class="fa fa-times"></i>
                                            </a>
                                        </div>
                                    </div>
                                </footer>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- <div class="chatFrame-backdrop" ng-show="enableNotification"></div> -->

        <!-- EMC - 338 TrueDialog Integration -->
        <div class="chatFrame-backdrop d-none" id="chatBack"></div>
        <iframe id="chatFrame" frameborder="0" class="vf-chat-iframe d-none"></iframe>
        <script>
            $('.menuToggler').click(function () {
                var overlay_navigation = $('.overlay-navigation'),
                    nav_item_1 = $('#action-nav .action-nav-list:nth-of-type(1)'),
                    nav_item_2 = $('#action-nav .action-nav-list:nth-of-type(2)'),
                    nav_item_3 = $('#action-nav .action-nav-list:nth-of-type(3)'),
                    nav_item_4 = $('#action-nav .action-nav-list:nth-of-type(4)'),
                    nav_item_5 = $('#action-nav .action-nav-list:nth-of-type(5)'),
                    nav_item_6 = $('#action-nav .action-nav-list:nth-of-type(6)'),
                    top_bar = $('.bar-top'),
                    middle_bar = $('.bar-middle'),
                    bottom_bar = $('.bar-bottom'),
                    overlay = $('.open-overlay'),
                    close_btn = $('.menuToggler');
                overlay_navigation.toggleClass('overlay-active');
                overlay.removeClass('d-none').addClass('d-block');
                close_btn.removeClass('d-block').addClass('d-none');
                top_bar.removeClass('animate-top-bar').addClass('animate-out-top-bar');
                middle_bar.removeClass('animate-middle-bar').addClass('animate-out-middle-bar');
                bottom_bar.removeClass('animate-bottom-bar').addClass('animate-out-bottom-bar');
                overlay_navigation.removeClass('overlay-slide-down').addClass('overlay-slide-up')
                nav_item_1.removeClass('slide-in-nav-item').addClass('slide-in-nav-item-reverse');
                nav_item_2.removeClass('slide-in-nav-item-delay-1').addClass('slide-in-nav-item-delay-1-reverse');
                nav_item_3.removeClass('slide-in-nav-item-delay-2').addClass('slide-in-nav-item-delay-2-reverse');
                nav_item_4.removeClass('slide-in-nav-item-delay-3').addClass('slide-in-nav-item-delay-3-reverse');
                nav_item_5.removeClass('slide-in-nav-item-delay-4').addClass('slide-in-nav-item-delay-4-reverse');
                nav_item_6.removeClass('slide-in-nav-item-delay-4').addClass('slide-in-nav-item-delay-5-reverse');
            })
            $('.open-overlay').click(function () {
                var overlay_navigation = $('.overlay-navigation'),
                    nav_item_1 = $('#action-nav .action-nav-list:nth-of-type(1)'),
                    nav_item_2 = $('#action-nav .action-nav-list:nth-of-type(2)'),
                    nav_item_3 = $('#action-nav .action-nav-list:nth-of-type(3)'),
                    nav_item_4 = $('#action-nav .action-nav-list:nth-of-type(4)'),
                    nav_item_5 = $('#action-nav .action-nav-list:nth-of-type(5)'),
                    nav_item_6 = $('#action-nav .action-nav-list:nth-of-type(6)'),
                    top_bar = $('.bar-top'),
                    middle_bar = $('.bar-middle'),
                    bottom_bar = $('.bar-bottom'),
                    overlay = $('.open-overlay'),
                    close_btn = $('.menuToggler'),
                    cancel_Btn_Css = $('.cancelBtn').css('display');

                overlay_navigation.toggleClass('overlay-active');
                if (cancel_Btn_Css === 'none') {
                    if (overlay_navigation.hasClass('overlay-active')) {
                        overlay.removeClass('d-block').addClass('d-none');
                        close_btn.removeClass('d-none').addClass('d-block');
                        top_bar.removeClass('animate-out-top-bar').addClass('animate-top-bar');
                        middle_bar.removeClass('animate-out-middle-bar').addClass('animate-middle-bar');
                        bottom_bar.removeClass('animate-out-bottom-bar').addClass('animate-bottom-bar');
                        overlay_navigation.removeClass('overlay-slide-up').addClass('overlay-slide-down')
                        nav_item_1.removeClass('slide-in-nav-item-reverse').addClass('slide-in-nav-item');
                        nav_item_2.removeClass('slide-in-nav-item-delay-1-reverse').addClass('slide-in-nav-item-delay-1');
                        nav_item_3.removeClass('slide-in-nav-item-delay-2-reverse').addClass('slide-in-nav-item-delay-2');
                        nav_item_4.removeClass('slide-in-nav-item-delay-3-reverse').addClass('slide-in-nav-item-delay-3');
                        nav_item_5.removeClass('slide-in-nav-item-delay-4-reverse').addClass('slide-in-nav-item-delay-4');
                        nav_item_6.removeClass('slide-in-nav-item-delay-5-reverse').addClass('slide-in-nav-item-delay-5');
                    }
                } else {
                    toastr.info("Cancel the existing process first to access the menu");
                }

                // } else {
                // //    overlay.removeClass('d-none').addClass('d-block');
                //     close_btn.removeClass('d-block').addClass('d-none');
                //     top_bar.removeClass('animate-top-bar').addClass('animate-out-top-bar');
                //     middle_bar.removeClass('animate-middle-bar').addClass('animate-out-middle-bar');
                //     bottom_bar.removeClass('animate-bottom-bar').addClass('animate-out-bottom-bar');
                //     overlay_navigation.removeClass('overlay-slide-down').addClass('overlay-slide-up')
                //     nav_item_1.removeClass('slide-in-nav-item').addClass('slide-in-nav-item-reverse');
                //     nav_item_2.removeClass('slide-in-nav-item-delay-1').addClass('slide-in-nav-item-delay-1-reverse');
                //     nav_item_3.removeClass('slide-in-nav-item-delay-2').addClass('slide-in-nav-item-delay-2-reverse');
                //     nav_item_4.removeClass('slide-in-nav-item-delay-3').addClass('slide-in-nav-item-delay-3-reverse');
                //     nav_item_5.removeClass('slide-in-nav-item-delay-4').addClass('slide-in-nav-item-delay-4-reverse');
                // }
            })
        </script>
    </body>
    <!-- End Default Content REMOVE THIS -->

    </html>
</apex:page>