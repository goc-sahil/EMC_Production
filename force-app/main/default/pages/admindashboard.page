<apex:page showHeader="false" title="Admin Dashboard" sidebar="false" docType="html-5.0" controller="AdminDashboardController"
    action="{!getRedirected}">

    <head>
        <apex:include pageName="EMC_Common_Head" />
        <apex:include pageName="EMC_Common_Scripts" />
        <script src="{!URLFOR($Resource.modelJs)}"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        <style type="text/css">
            a {
                cursor: pointer;
            }
            .f-16{
                font-size: 16px !important;
            }
            #modalofconfirmation {
                opacity: 1 !important;
            }

            #modalbackdrop {
                opacity: 0.7 !important;
                z-index: 1050 !important;
            }

            .modal-backdrop.fade {
                opacity: 0.7 !important;
            }

            .fade:not(.show) {
                opacity: 1;
            }

            .modal-dialog {
                z-index: 1057;
            }

            .toast-progress {
                background-color: #000000 !important;
            }

            .toast-success {
                background-color: #78bc42 !important;
            }

            .toast-error {
                background-color: #FF0000 !important;
            }

            #toast-container>div {
                opacity: 5.8 !important;
                border-radius: 3px 3px 3px 3px !important;
                width: 100% !important;
            }
            .progress-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.4;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }
            .progress {
                position: fixed;
                top: 56%;
                left: 21%;
                z-index: 1000000;
                width: 57%;
            }
            .process-msg{
                float: none !important;
            }
            .modal-body {
                padding: 0.5rem !important;
            }

            .fa.pull-right {
                margin-right: 3rem;
            }

            .pagination {
                display: inline-block;
                padding-left: 0;
                margin: 20px 0;
                border-radius: 4px;
            }

            .pagination>li {
                display: inline;
            }

            .pagination>li>a,
            .pagination>li>span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #78bc42;
                text-decoration: none;
                background-color: #fff;
                border: 1px solid #ddd;
            }

            .pagination>li:first-child>a,
            .pagination>li:first-child>span {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #777;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.active>a,
            .pagination>.active>a:focus,
            .pagination>.active>a:hover,
            .pagination>.active>span,
            .pagination>.active>span:focus,
            .pagination>.active>span:hover {
                z-index: 3;
                color: #fff;
                cursor: default;
                background-color: #78bc42;
                border-color: #78bc42;
            }

            table.dataTable thead th,
            table.dataTable thead td {
                padding: 10px 7px!important;

            }

            .table-nodata {
                text-align: center;
            }

            .disable-pagination {
                pointer-events: none;
            }

            .paginationformodal {
                margin: 0px -0px !important;
            }

            .paginationformodal1 {
                margin: 0px 0 !important;
            }

            .paginationformodaldownloadbutton {
                /*margin-top: 17px;*/
                margin-top: 0px;
            }

            .piginationpages {
                color: #78bc42 !important;
            }

            .paginationformodal>a {
                color: #78bc42 !important;
            }

            table.dataTable tbody th,
            table.dataTable tbody td {
                padding: 5px 8px !important;

            }

            .chart-header {
                font-family: 'Proxima Nova SemiBold';
                font-size: 26px;
                color: #78bc42;
            }

            .alignitemscenter {
                align-items: center;
            }

            table.dataTable {
                border-collapse: collapse;
            }

            table.dataTable tfoot th,
            table.dataTable tfoot td {
                padding: 10px 18px 6px 6px;
            }

            .spinner-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.4;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .spinner-load {
                position: fixed;
                top: 49%;
                left: 49%;
                z-index: 1000000;
            }

            .approvetd {
                width: 8vw !important;
            }

            .approvebtntd {
                width: 6vw !important;
            }

            table.dataTable thead .approveth {
                padding: 10px 0px!important;
                width: 2vw !important;
            }

            .fontS-17 {
                font-size: 17px;
            }

            .emailspan {
                margin-right: 41px !important;
                font-size: 17px;
            }

            .emailchk {
                margin-right: -7px !important;
            }

            table.dataTable thead .emailth {
                padding: 10px 0px!important;
                width: 2vw !important;
            }

            .upapprovechk {
                float: right !important;
                margin-right: 4px;
            }

            .upapprovecheck {
                float: right !important;
            }

            .upapproveemailcheck {
                float: right !important;
            }

            .w-328 {
                width: 328px !important;
            }

            .w-200 {
                width: 200px !important;
            }

            .w-180 {
                width: 180px !important;
            }

            .w-175 {
                width: 175px !important;
            }

            .vw-20 {
                width: 14vw !important;
            }

            .vw-12 {
                width: 13vw !important;
            }

            .vw-15 {
                width: 20vw !important;
            }

            .vw-4 {
                width: 4vw !important;
            }

            .ml-45 {
                position: absolute;
                top: 4px;
                margin-left: 30rem;
            }

            .mr-13 {
                margin-right: 13px !important;
            }

            .mr-11 {
                margin-right: 11px !important;
            }

            .mr-12 {
                margin-right: 12px !important;
            }

            .numinputedit {
                width: 50% !important;
            }

            .statusapprove {
                float: right !important;
            }

            .approvechk {
                margin-right: -6px !important;
            }

            .appspan {
                margin-right: 2px !important;
            }

            .mr-6 {
                margin-right: -6px
            }

            .btn-primary-approve {
                color: #fff !important;
                background: #78bc42 !important;
                border-color: #78bc42 !important;
                font-size: 17px !important;
                font-family: 'Proxima Nova Bold' !important;
                border-radius: 0px !important;
                float: right !important;
            }

            .myteamcheck {
                float: right !important;
            }

            .form-control:focus {
                outline: 0 !important;
                border-color: initial;
                box-shadow: none;
            }

            .modal-divider {
                border-top: 2px solid #d8d8d8;
                margin-top: 20px !important;
                margin-bottom: 10px;
            }

            .pull-right {
                float: right !important;
            }

            .plt-0 {
                padding-top: 0px !important;
                padding-left: 1px !important;
            }

            .numberSelect {
                display: inline-block !important;
                width: 13% !important;
            }

            /* AI-000206 - Start */

            @media only screen and (min-width: 992px) {
                #example_filter {
                    position: absolute;
                    right: 11px;
                    top: 0px;
                }
                .input-border {
                    border: none !important;
                }
                .w-85 {
                    width: 105% !important;
                }
                #driver-dashboard-monthrecord #example_filter .w-85 {
                    width: 98% !important;
                }
            }

            @media screen and (max-width: 991px) and (min-width: 768px) {
                .w-68 {
                    width: 99% !important;
                }
                .w-85 {
                    width: 145% !important;
                }
                #example_filter {
                    position: absolute;
                    right: 67px;
                    top: 0px;
                }
            }

            @media screen and (max-width: 767px) and (min-width: 320px) {
                #example_filter {
                    float: left;
                }
                .w-85 {
                    width: 100% !important;
                }
                .input-border {
                    border: none !important;
                }
                .w-68 {
                    width: 99% !important;
                }
            }

            @media screen and (max-width: 1024px) and (min-width: 992px) {
                #example_filter {
                    position: absolute;
                    right: 12px;
                    top: 0px;
                }
                .w-85 {
                    width: 106% !important;
                }
                .input-border {
                    border: none !important;
                }
                .w-68 {
                    width: 96% !important;
                }
            }

            /* AI-000206 - Ends */

            @media only screen and (min-width: 1200px) {
                .w-68 {
                    height: 59px !important;
                    width: 102% !important;
                }
            }

            @media only screen and (min-width: 1824px) {
                .w-68 {
                    height: 59px !important;
                    width: 50% !important;
                }
                #driver-dashboard-monthrecord #example_filter {
                    right: 58px !important;
                    top: 18px !important;
                }
            }

            #filtericon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            #driver-dashboard-monthrecord #filtericon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            .buttonSubmit:before,
            .buttonSubmit:after {
                border: 0 solid transparent !important;
                transition: all 0.25s;
            }

            .buttonSubmit:before {
                border-top: 2px solid #c47135;
                left: 0px;
                top: -5px;
            }

            .buttonSubmit:after {
                border-bottom: 2px solid #c47135;
                bottom: -5px;
                right: 0px;
            }

            .buttonSubmit:hover:before,
            .buttonSubmit:hover:after {
                height: 100%;
                width: 100%;
            }
        </style>
        <script type="text/javascript">
            var app = angular.module('admindashboardModule', ['ui.bootstrap', 'angularUtils.directives.dirPagination', 'chart.js']);


            var MileagesofReimbursements = function (visible) {
                this.visible = visible;
            };

            MileagesofReimbursements.prototype.open = function (fileName, month, name, mileageList, emailOfEmployee) {
                this.visible = true;
                this.fileName = fileName;
                this.name = name;
                this.clickedMonth = month;
                this.mileageList = mileageList;
                this.emailOfEmployee = emailOfEmployee;
            };

            MileagesofReimbursements.prototype.close = function () {
                this.visible = false;
            };
            app.directive('reimbursementsDialogDirective', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '=',
                            data: "&exportData",
                            someCtrlFn: '&callbackFn',
                            modalformsg: '&modalOpen'
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                if (newValue == true) {
                                    //scope.init()
                                    scope.callfn('');
                                }
                                else {
                                    scope.IsAllChecked = false;
                                    scope.IsAllCheckedFlag = false;
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                }
                              
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selectedyear = scope.model.clickedYear;
                                        scope.selecteddid = item.driverid;
                                    }
                                });
                            });

                            scope.totalMileage = 0;
                            scope.totalVariableAmount = 0;
                            scope.showmanagermodalsearchbar = false;
                            scope.selecteddid = '';
                            scope.displayBtn = false;
                            scope.IsAllChecked = false;
                            scope.IsAllCheckedFlag = false;
                            scope.checkAllShowApprove = false;
                            scope.checkAllShowFlag = false;
                            scope.selectedmileageidlist = [];
                            scope.selectedrejectedmileageidlist = [];
                            scope.selectednotapprovemileageidlist = [];
                            scope.showData = [];
                            scope.total = 0;
                            scope.totalvariablerate = 0;
                            scope.currentPage = 1;
                            scope.lastIndex = 0;
                            scope.totalRecords;
                            scope.reverse = false;
                            scope.maxPage = 0;
                            scope.search = "";
                            // scope.itemPerPage = 8;
                            scope.searchedArray = [];
                            //AI-000417 --> Starts
                            scope.pageSizeOptions = ['10', '15', '20', '100'];

                            scope.itemPerPage = scope.pageSizeOptions[1];
                            scope.itemPerPageV = parseInt(scope.itemPerPage);

                            scope.pageSizeChanged = function () {
                                scope.itemPerPageV = parseInt(scope.itemPerPage);
                                scope.init()
                                let lockdatecount = 0;
                                let count = 0;
                                let _showL = scope.model.mileageList.length;
                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                let _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                let _pending = $filter("filter")(scope.showData, { isLockDate: false , isChecked: false , isSelected: false});
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });
                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                      scope.displayBtn = true;
                                    }
                                    scope.IsAllEnable = false;
                                }
                                else {
                                    if ( _showL === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                        //scope.displayBtn = true;
                                    }
                                    //scope.displayBtn = false;
                                    scope.IsAllEnable = true;
                                }
                            }
                            scope.init = function () {
                                scope.showData = [];
                                scope.IsAllEnable = false;
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                scope.maxPage = 0;
                                scope.totalRecords = scope.model.mileageList.length;
                                scope.model.mileageList
                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPageV)
                                scope.totalRecords
                                let tl = 0;
                                let tv = 0;
                                for (var i = 0; i < scope.itemPerPageV; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }

                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }

                            scope.next = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                let lockdatecount = 0;
                                let tl = 0;
                                let tv = 0;
                                let count = 0;
                                for (var i = scope.lastIndex; i < lstInd + scope.itemPerPageV; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    scope.lastIndex = i + 1;
                                }
                            
                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                let _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var mileageLen = scope.showData.length;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });
                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                      scope.displayBtn = true;
                                    }
                                }
                                else {
                                    if (mileageLen === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                        //scope.displayBtn = true;
                                    }
                                    //scope.displayBtn = false;
                                }

                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage++;
                            }
                            scope.previous = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                let tl = 0;
                                let tv = 0;
                                let count = 0;
                                let lockdatecount = 0;
                                var lstInd = scope.lastIndex;
                                for (var i = scope.lastIndex - (scope.itemPerPageV * 2); i < lstInd - scope.itemPerPageV; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    scope.lastIndex = i + 1;
                                }

                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                let _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var mileageLen = scope.showData.length;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });
                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                }
                                else {
                                    if (mileageLen === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                     //   scope.displayBtn = true;
                                    }
                                   // scope.displayBtn = false;
                                }

                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage--;
                            }
                            scope.sortKey = 'tripdate';
                            scope.sort = function (keyName) {
                                //$scope.reverse = !$scope.reverse;

                                scope.reverse = (scope.sortKey === keyName) ? !scope.reverse : false;
                                scope.sortKey = keyName;
                                if (keyName === 'mileage' || keyName === 'variableamount') {

                                    scope.model.mileageList.sort(function (a, b) {

                                        var nameA = (a[keyName] == null) ? '' : parseInt(a[keyName]),
                                            nameB = (b[keyName] == null) ? '' :parseInt(b[keyName]);
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return valuscope.model.mileageList=e (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'originname' || keyName === 'destinationname') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = (a[keyName] == null) ? '' : a[keyName].toLowerCase(),
                                            nameB = (b[keyName] == null) ? '' : b[keyName].toLowerCase()
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'tripdate' || keyName === 'submitteddate') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = (a[keyName] == null) ? '' : new Date(a[keyName].toLowerCase()),
                                            nameB = (b[keyName] == null) ? '' : new Date(b[keyName].toLowerCase())
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                let tl = 0;
                                let tv = 0;
                                var lstInd = scope.lastIndex;

                                for (var i = scope.lastIndex - scope.itemPerPageV; i < lstInd; i++) {
                                    if (scope.model.mileageList[i]) {
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }
                            scope.refreshpage = function (approvedmileageid) {

                                scope.someCtrlFn({ Id: approvedmileageid });
                            }
                            scope.searchbarformodal = false;
                            scope.callfn = function (flagstatus) {
                                if (flagstatus == "") {
                                    scope.init();
                                }
                                scope.allVariableAmount = 0;
                                scope.alltotalMileage = 0;
                                scope.model.mileageList

                                let approvedcount = 0, flagcount = 0, chkcount = 0, lockdatecount = 0;

                                if (scope.showData.length == 0) {
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                    scope.displayBtn = false;
                                    scope.displayDownloadBtn = false;
                                }
                                if (scope.showData.length > 0) {
                                    scope.displayDownloadBtn = true;
                                    scope.displayBtn = false;
                                    if (scope.model.mileageList.length > 8)
                                        //   scope.searchbarformodal = true;
                                        scope.showmanagermodalsearchbar = true;
                                    else
                                        //  scope.searchbarformodal = false;
                                        scope.showmanagermodalsearchbar = false;

                                    scope.alltotalMileage = 0;
                                    scope.allVariableAmount = 0;
                                    let tv = 0;
                                    let tm = 0;
                                    angular.forEach(scope.model.mileageList, function (item) {
                                        tv = tv + parseFloat(item.variableamount);
                                        scope.allVariableAmount = tv.toFixed(2);
                                        tm = tm + parseFloat(item.mileage);
                                        scope.alltotalMileage = tm.toFixed(2);
                                        if (item.isLockDate === true) {
                                            lockdatecount++;
                                        }

                                        if ((item.status != 'None' && item.status != '') && item.mileage >= 0) {
                                            chkcount++;
                                            scope.checkAllShowApprove = true;
                                            scope.checkAllShowFlag = true;
                                            if (item.isSelected) {
                                                approvedcount++;
                                            } else if (item.isChecked) {
                                                flagcount++;
                                            }
                                        }
                                    });

                                    if (chkcount == 0 && approvedcount == 0) {
                                        scope.checkAllShowApprove = false;
                                    }
                                    else {
                                        if (chkcount == approvedcount) {
                                            scope.IsAllChecked = true;
                                            scope.IsAllCheckedFlag = false;
                                        }
                                    }

                                    if (chkcount == 0 && flagcount == 0) {
                                        scope.checkAllShowFlag = false;
                                    }
                                    else {
                                        if (chkcount == flagcount) {
                                            scope.IsAllCheckedFlag = true;
                                            scope.IsAllChecked = false;
                                        }
                                    }

                                    // if (flagcount == 0 && approvedcount == 0){
                                    //     scope.displayBtn = false;
                                    // }else{
                                    //     scope.displayBtn = true;
                                    // }
                                    if (lockdatecount == 0) {
                                        scope.IsAllEnable = false;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                        // if (approvedcount != 0 || flagcount != 0) {
                                        //     scope.displayBtn = true;
                                        // }
                                        // else {
                                        //     scope.displayBtn = false;
                                        // }
                                    }
                                    else {
                                        scope.displayBtn = false;
                                        scope.IsAllEnable = true;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                    }
                                }
                                var checktrues = $filter("filter")(scope.showData, { isChecked: true });
                                var selectedtrues = $filter("filter")(scope.showData, { isSelected: true });
                                var _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                var _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var pendingReq = $filter("filter")(scope.showData, { isLockDate: false , isChecked: false , isSelected: false});
                                var mileageLen = scope.model.mileageList.length;
                                if (checktrues.length > 0 || selectedtrues.length > 0) {
                                    if (lockdatecount > 0) {
                                        if(lockdatecount === mileageLen){
                                            scope.displayBtn = false;
                                        }else{
                                            if (_flagged.length > 0 || _approved.length > 0) {
                                                scope.displayBtn = true;
                                            } else {
                                                scope.displayBtn = false;
                                            }
                                            // if(pendingReq.length > 0){
                                            //     scope.displayBtn = false;
                                            // }else{
                                            //     scope.displayBtn = true;
                                            // }
                                        }
                                    } else {
                                        scope.displayBtn = true;
                                    }
                                }
                                if (flagstatus != '') {
                                    scope.modalformsg({ status: flagstatus });
                                }

                            }
                            scope.selecteddid = '';
                            scope.selectedmileageidlist = [];
                            scope.selectedrejectedmileageidlist = [];
                            scope.selectednotapprovemileageidlist = [];
                            scope.IsAllChecked = false;
                            scope.IsAllCheckedFlag = false;
                            scope.checkAllShowApprove = false;
                            scope.checkAllShowFlag = false;
                            scope.allVariableAmount = 0;
                            scope.alltotalMileage = 0;

                            scope.CheckUncheckAll = function () {
                               // scope.showData = [];
                                if (scope.IsAllChecked == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;

                                scope.selectedmileageidlist = [];
                                angular.forEach(scope.model.mileageList, function (item) {
                                    item.isSelected = scope.IsAllChecked;
                                    scope.selectedmileageidlist.push(item.id);
                                    if (item.isChecked) {
                                        item.isChecked = !item.isChecked;
                                        if (scope.IsAllCheckedFlag) {
                                            scope.IsAllCheckedFlag = false;
                                        }
                                    }
                                });
                                if (scope.currentPage == 1) {
                                    scope.showData = [];
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        if (scope.model.mileageList[i]) {
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                }else{
                                    angular.forEach(scope.showData, function (item) {
                                        item.isSelected = scope.IsAllChecked;
                                        if (item.isChecked) {
                                            item.isChecked = !item.isChecked;
                                            if (scope.IsAllCheckedFlag) {
                                                scope.IsAllCheckedFlag = false;
                                            }
                                        }
                                    });
                                }
                                // for (var i = 0; i < scope.itemPerPageV; i++) {
                                //     scope.currentPage = 1;
                                //     if (scope.model.mileageList[i]) {
                                //         scope.showData.push(scope.model.mileageList[i])
                                //     }
                                //     scope.lastIndex = i + 1;
                                // }
                            };

                            scope.CheckUncheckHeader = function (bool, milId) {
                                scope.selecteddid = '';
                                scope.selectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                var lockdatecount = 0;
                              
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected) {
                                        perpagecount++;
                                        scope.selectedmileageidlist.push(item.id);
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selecteddid = item.driverid;
                                        if (item.isChecked) {
                                            item.isChecked = !item.isChecked;
                                        }
                                    }
                                    if(item.isUnapprove){
                                        scope.selectednotapprovemileageidlist.push(item.id);
                                    }
                                    if(item.isLockDate){
                                        lockdatecount++;
                                    }
                                });

                                angular.forEach(scope.model.mileageList, function (em) {
                                    em.isSelected = (em.id == milId) ? bool : em.isSelected;
                                    em.isChecked = (em.id == milId && em.isSelected == true) ? false : em.isChecked;
                                    if (em.isSelected) {
                                            count++;
                                    }
                                });
                    
                                if (total == perpagecount && (total != 0 && perpagecount != 0)) {
                                    scope.model.mileageList = scope.showData;
                                    scope.IsAllChecked = true;
                                    scope.IsAllCheckedFlag = false;
                                }
                                else {
                                    if (total == count && (total != 0 && count != 0)) {
                                        scope.IsAllChecked = true;
                                        scope.IsAllCheckedFlag = false;
                                    } else {
                                        scope.IsAllChecked = false;
                                        scope.IsAllCheckedFlag = false;
                                    }
                                }
                            
                                var trues = $filter("filter")(scope.showData, { isChecked: true });
                                var pReq = $filter("filter")(scope.showData, { isLockDate: false, isChecked: true});
                                var pSelect = $filter("filter")(scope.showData, {  isLockDate: false, isSelected: true});
                                scope.chkselectcount = trues.length;
                                if (perpagecount == 0 && scope.chkselectcount == 0) {
                                    scope.displayBtn = false;
                                }
                                else {
                                    if(lockdatecount > 0){
                                        if(pSelect.length > 0 || pReq.length > 0){
                                            scope.displayBtn = true;
                                        }else{
                                            scope.displayBtn = false;
                                        }
                                    }else{
                                        scope.displayBtn = true;
                                    }
                                   
                                }
                            };
                            scope.CheckUncheckAllForFlag = function () {
                               // scope.showData = [];
                                if (scope.IsAllCheckedFlag == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;
                                scope.selectedrejectedmileageidlist = [];
                                
                                scope.model.mileageList
                               // scope.showData

                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isChecked) {
                                        scope.selectedmonth = scope.model.clickedMonth;
                                    }
                                    item.isChecked = scope.IsAllCheckedFlag;
                                    scope.selectedrejectedmileageidlist.push(item.id);
                                    if (item.isSelected) {
                                        item.isSelected = !item.isSelected;
                                        if (scope.IsAllChecked) {
                                            scope.IsAllChecked = false;
                                        }
                                    }
                                });
                                if (scope.currentPage == 1) {
                                    scope.showData = [];
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        if (scope.model.mileageList[i]) {
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                }else{
                                    angular.forEach(scope.showData, function (item) {
                                        item.isChecked = scope.IsAllCheckedFlag;
                                        if (item.isSelected) {
                                            item.isSelected = !item.isSelected;
                                            if (scope.IsAllChecked) {
                                                scope.IsAllChecked = false;
                                            }
                                        }
                                    });
                                }
                                // for (var i = 0; i < scope.itemPerPageV; i++) {
                                //     scope.currentPage = 1;
                                //     if (scope.model.mileageList[i]) {
                                //         scope.showData.push(scope.model.mileageList[i])
                                //     }
                                //     scope.lastIndex = i + 1;
                                // }
                                // scope.showData
                            };

                            scope.CheckUncheckHeaderForFlag = function (boolval, mId) {
                                scope.selecteddid = '';
                                scope.selectedrejectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                var lockdatecount = 0;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isChecked) {
                                        perpagecount++;
                                        scope.selecteddid = item.driverid;
                                        scope.selectedmonth = scope.model.clickedMonth;
                                        scope.selectedmileageid = item.id;
                                        scope.selectedrejectedmileageidlist.push(item.id);
                                        if (item.isSelected) {
                                            item.isSelected = !item.isSelected;
                                        }
                                    }
                                    if(item.isUnapprove){
                                        perpagecount++;
                                        scope.selectednotapprovemileageidlist.push(item.mileage);
                                    }
                                    if(item.isLockDate){
                                        lockdatecount++;
                                    }
                                });

                                angular.forEach(scope.model.mileageList, function (em) {
                                    em.isChecked = (em.id == mId) ? boolval : em.isChecked;
                                    em.isSelected = (em.id == mId && em.isSelected === true) ? false : em.isSelected;
                                    if (em.isChecked) {
                                            count++;
                                    }
                                });
                                 
                                if (total == perpagecount && (total != 0 && perpagecount != 0)) {
                                    scope.model.mileageList = scope.showData;
                                    scope.IsAllCheckedFlag = true;
                                    scope.IsAllChecked = false;
                                }
                                else {
                                    if (total == count && (total != 0 && count != 0)) {
                                        scope.IsAllCheckedFlag = true;
                                        scope.IsAllChecked = false;
                                    } else {
                                        scope.IsAllCheckedFlag = false;
                                        scope.IsAllChecked = false;
                                    }
                                }

                                var trues = $filter("filter")(scope.showData, { isSelected: true });
                                var pReq = $filter("filter")(scope.showData, { isLockDate: false, isChecked: true});
                                var pSelect = $filter("filter")(scope.showData, {  isLockDate: false, isSelected: true});
                                scope.chkselectcount = trues.length;
                                if (perpagecount == 0 && scope.chkselectcount == 0){
                                    scope.displayBtn = false;
                                }
                                else {
                                    if(lockdatecount > 0){
                                        if(pSelect.length > 0 || pReq.length > 0){
                                            scope.displayBtn = true;
                                        }else{
                                            scope.displayBtn = false;
                                        }
                                    }else{
                                        scope.displayBtn = true;
                                    }
                                   
                                }
                            };
                            scope.refreshpage = function (mileages) {
                                // console.log("In refreshpage :- Mileages variable :- "+mileages);
                                scope.someCtrlFn({ Id: mileages });
                            }

                            scope.updatePagination = function () {
                                if (scope.search.length > 0) {
                                    scope.itemPerPageV = scope.itemPerPageV;

                                    var filteredArray = scope.model.mileageList.filter(function (number) {
                                        if (number.originname != '' && number.originname != null && number.originname != undefined && number.destinationname != '' && number.destinationname != null && number.destinationname != undefined) {

                                            return number.originname.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1 || number.destinationname.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1;
                                        }
                                        return number.originname, number.destinationname;
                                    });

                                    scope.searchedArray = filteredArray;
                                    scope.showData = [];
                                    scope.total = 0.0;
                                    scope.totalvariablerate = 0.0;
                                    scope.maxPage = 0;
                                    scope.totalRecords = filteredArray.length;

                                    let tl = 0;
                                    let tv = 0;
                                    scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPageV)
                                    scope.totalRecords
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        scope.currentPage = 1;
                                        if (filteredArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                            tl = tl + parseFloat(filteredArray[i].mileage);
                                            tv = tv + parseFloat(filteredArray[i].variableamount);
                                            /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            scope.showData.push(filteredArray[i])
                                        }
                                        scope.lastIndex = i + 1;
                                    }
                                    if (scope.showData.length == 0) {
                                        scope.displayDownloadBtn = false;
                                    }
                                    else {
                                        scope.displayDownloadBtn = true;
                                    }
                                    scope.total = tl.toFixed(2);
                                    scope.totalvariablerate = tv.toFixed(2);


                                } else {
                                    scope.itemPerPageV = scope.itemPerPageV;
                                    scope.init();
                                    scope.searchedArray.length = 0;
                                    scope.displayDownloadBtn = true;
                                }


                            }
                            //AI-000417 --> Ends
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;

                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;
                                    scope.search = "";
                                    scope.searchedArray.length = 0;
                                });
                            });

                            $('input[type=search]').on('search', function () {
                                scope.search = "";
                                scope.searchedArray.length = 0;
                            });

                            scope.onClick = function () {
                                scope.model.mileageList
                                scope.updateformileagelist = [];
                                $('#spinner').show();
                                var arr = [];
                                if (scope.IsAllChecked || scope.IsAllCheckedFlag) {
                                    arr = scope.model.mileageList;
                                } else {
                                    arr = scope.showData;
                                }
                                angular.forEach(arr, function (item) {
                                    if (item.isChecked == true || item.isSelected == true) {
                                        item.isUnapprove = false;
                                        scope.updateformileagelist.push(item);
                                    }
                                    if(item.isChecked == false && item.isSelected == false) {
                                        item.isUnapprove = true;
                                        scope.updateformileagelist.push(item);
                                    }
                                });
                                var truecheck = $filter("filter")(arr, { isChecked: true });
                                scope.chkcount = truecheck.length;
                                var trueselect = $filter("filter")(arr, { isSelected: true });
                                var trueunapprove = $filter("filter")(arr, { isUnapprove: true });
                                scope.selectcount = trueselect.length;
                                console.log(scope.model.name,scope.model.emailOfEmployee,truecheck, trueselect, trueunapprove);
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminDashboardController.approveMileages}', JSON.stringify(truecheck), JSON.stringify(trueselect), JSON.stringify(trueunapprove), scope.model.name, scope.model.emailOfEmployee,
                                    function (result, event) {
                                        if (event.status && result == 'success') {
                                            scope.model.mileageList
                                            var tempArray = JSON.parse(JSON.stringify(scope.model.mileageList));
                                            //   console.log('mileageList:--'+JSON.stringify(scope.model.mileageList));
                                            scope.model.mileageList.forEach(function (item) {
                                                for (var i = 0; i < scope.updateformileagelist.length; i++) {
                                                    if (item.reimbursementid == scope.updateformileagelist[i].reimbursementid) {
                                                        let tp = 0;
                                                        tp = parseFloat(item.totalpending);
                                                        tp = tp - parseFloat(scope.updateformileagelist[i].mileage);
                                                        item.totalpending = tp.toFixed(2);
                                                        //  console.log('reimbursementid'+item.reimbursementid+' totalpending:--'+item.totalpending);
                                                    }
                                                }
                                            })

                                            if (tempArray.length !== scope.updateformileagelist.length) {
                                                tempArray.forEach(function (item) {
                                                    scope.updateformileagelist.forEach(function (ui) {
                                                        if (item.id == ui.id) {
                                                            let index = scope.model.mileageList.findIndex(x => x.id === ui.id);
                                                            scope.model.mileageList.splice(index, 1);
                                                        }
                                                    })
                                                })
                                            } else {
                                                scope.model.mileageList = [];
                                            }
                                            var flagstatus = '';
                                            if (scope.selectedmileageidlist.length == 0 && scope.selectedrejectedmileageidlist.length == 0) {
                                                $('#spinner').hide();
                                                toastr.success('This Mileage has already approved/flagged.');
                                            }
                                            if (scope.selectcount > 0 && scope.selectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'true';
                                                scope.refreshpage(scope.selectedmileageidlist);
                                                scope.selectedmileageidlist = [];
                                            }
                                            if (scope.chkcount > 0 && scope.selectedrejectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'false';
                                                scope.refreshpage(scope.selectedrejectedmileageidlist);
                                                scope.selectedrejectedmileageidlist = [];
                                            }
                                            scope.callfn(flagstatus);
                                        }
                                        else {
                                            toastr.error('Something went wrong');
                                        }
                                    });
                            };
                        },
                        /*AI-000417*/
                        template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog"aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4 ng-model="month">{{model.name}}</h4><div class="col-md-6 ml-45"><span>Trips per page : </span> <select class="form-control numberSelect" name="recordsPerPage" ng-model="itemPerPage" ng-options="page for page in pageSizeOptions" ng-change="pageSizeChanged()"></select></div><div class="modal-divider"></div><div class="table-responsive"><div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="showmanagermodalsearchbar"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><thead><tr><th ng-click="sort(\'tripdate\')">Trip Date<span ng-show="sortKey == \'tripdate\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}"></span></th><th ng-click="sort(\'originname\')">Origin<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'originname\'"></span></th><th ng-click="sort(\'destinationname\')">Dest.<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'destinationname\'"></span></th><th ng-click="sort(\'submitteddate\')">Submitted<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'submitteddate\'"></span></th><th ng-click="sort(\'mileage\')">Mileage<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'mileage\'"></span></th><th ng-click="sort(\'variableamount\')">Amount<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'variableamount\'"></span></th><th><button class="btn btn-primary pull-right">Approve <input type="checkbox" ng-click="CheckUncheckAll()" ng-model="IsAllChecked" ng-show="checkAllShowApprove" ng-disabled="IsAllEnable"/></button></th><th class="vw-4"><button class="btn btn-third pull-right">Flag </span><input type="checkbox" ng-show="checkAllShowFlag" ng-click="CheckUncheckAllForFlag()" ng-model="IsAllCheckedFlag" ng-disabled="IsAllEnable"></button></th></tr></thead><tbody class="table-a-link"><tr ng-repeat="mil in showData |itemsPerPage:itemPerPageV|filter:search" current-page:"currentPage"><td ng-model="mil.tripdate">{{ mil.tripdate}}</td><td ng-model="mil.originname">{{ mil.originname}}</td><td ng-model="mil.destinationname">{{ mil.destinationname }}</td><td ng-model="mil.submitteddate">{{ mil.submitteddate }}</td><td ng-model="mil.mileage">{{ mil.mileage }}</td><td ng-model="mil.variableamount" id="modalvariableid">${{ mil.variableamount | number:2 }}</td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.status !=\'Approved\' && mil.mileage > \'0\'"></div><div  class="mr-13 pull-right" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isSelected" ng-click="CheckUncheckHeader(mil.isSelected, mil.id);" ng-disabled="mil.isLockDate"></div></td><td ng-model="mil.status"><div ng-model="mil.status" ng-if="mil.mileage > \'0\'"></div><div class="mr-13 pull-right" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isChecked" class="flagcheck" ng-click="CheckUncheckHeaderForFlag(mil.isChecked, mil.id);" ng-disabled="mil.isLockDate"></div></td></tr><tr ng-if="showData.length == 0"><td colspan="9" class="table-nodata">No Mileage Available</td></tr></tbody><tfoot ng-if="displayDownloadBtn"><tr><th scope="row">Total</th><th colspan="3"> </th><th>{{total}} / {{alltotalMileage}}</th><th>${{totalvariablerate}} / ${{allVariableAmount}}</th><th colspan="2"></th></tr></tfoot></table></div></div><div class="modal-footer"><div class="col-md-6" ng-if="displayDownloadBtn">Page {{currentPage}} of {{maxPage}} </div><div class="col-md-6"><ul ng-if="displayDownloadBtn" class="pagination pull-right paginationformodal"><li class="page-item " ng-class="{\'disable-pagination\':currentPage === 1}"><a class="page-link" ng-click="previous()">Previous</a></li><li class="page-item"><a class="page-link" >{{currentPage}}</a></li><li class="page-item" ng-class="{\'disable-pagination\':currentPage === maxPage}"><a class="page-link" ng-click="next()" href="#">Next</a></li></ul><div class="paginationformodaldownloadbutton"><div excel-export="true" export-data="data()" ng-show="displayDownloadBtn" file-name="{{model.fileName}}"/><button class="btn btn-secondary float-right" ng-click="onClick();" ng-show="displayBtn">Submit</button></div></div></div></div></div></div><div>'
                    };
                }
            ]);

            app.directive('excelExport', function () {

                return {
                    restrict: 'A',
                    scope: {
                        fileName: "@",
                        data: "&exportData"
                    },
                    replace: true,
                    template: '<button class="btn btn-primary float-right mr-12" ng-click="download()">Download <i class="fa fa-download"></i></button>',
                    link: function (scope, element) {
                        scope.download = function () {

                            function datenum(v, date1904) {
                                if (date1904) v += 1462;
                                var epoch = Date.parse(v);
                                return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                            };

                            function getSheet(data, opts) {

                                var data2 = [];
                                var sheetdata2 = [];
                                var sheetdata = [];
                                sheetdata2.push(data[0]);

                                for (var i = 1; i < data.length; i++) {
                                    data2.push(data[i]);
                                }

                                var sheetdata = data2.sort();
                                sheetdata2 = [sheetdata2[0], ...sheetdata];
                                var ws = {};
                                var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                                for (var R = 0; R != sheetdata2.length; ++R) {
                                    for (var C = 0; C != sheetdata2[R].length; ++C) {
                                        if (range.s.r > R) range.s.r = R;
                                        if (range.s.c > C) range.s.c = C;
                                        if (range.e.r < R) range.e.r = R;
                                        if (range.e.c < C) range.e.c = C;
                                        var cell = { v: sheetdata2[R][C] };
                                        if (cell.v == null) continue;
                                        var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });
                                        //   console.log('cell', cell)
                                        if (typeof cell.v === 'number') cell.t = 'n';
                                        else if (typeof cell.v === 'boolean') cell.t = 'b';
                                        else if (cell.v instanceof Date) {
                                            cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                            cell.v = datenum(cell.v);
                                        }
                                        else cell.t = 's';

                                        ws[cell_ref] = cell;
                                    }
                                }
                                if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                return ws;
                            };

                            function Workbook() {
                                if (!(this instanceof Workbook)) return new Workbook();
                                this.SheetNames = [];
                                this.Sheets = {};
                            }

                            var wb = new Workbook(), ws = getSheet(scope.data());

                            /* add worksheet to workbook */
                            wb.SheetNames.push(scope.fileName);
                            wb.Sheets[scope.fileName] = ws;

                            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }
                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), scope.fileName + '.xlsx');
                        };
                    }
                };
            });
            //open model
            var ManagerofcurrentAdmin = function () {
                this.visible = false;
            };
            ManagerofcurrentAdmin.prototype.open = function (filename, managerList, aid, showteam) {
                this.filename = filename;
                this.visible = true;
                this.managerList = managerList;
                this.aid = aid;
                this.showteam = showteam;
            };
            ManagerofcurrentAdmin.prototype.close = function () {
                this.visible = false;
            };
            app.directive('managerDialogDirective', [function () {
                return {
                    restrict: 'E',
                    scope: {
                        model: '=',
                        data: "&exportData"
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');
                            if (newValue == true) {
                                if (scope.model.managerList.length > 8)
                                    scope.showmanagermodalsearchbar = true;
                                else
                                    scope.showmanagermodalsearchbar = false;
                            }
                        });
                        scope.showmanagermodalsearchbar = false;
                        scope.sortKey1 = 'Name';
                        scope.reverse1 = false;
                        scope.pageSize = 8;
                        scope.currentPage = 1;
                        scope.sortBy1 = function (keyname1) {
                            scope.reverse1 = (scope.sortKey1 === keyname1) ? !scope.reverse1 : false;
                            scope.sortKey1 = keyname1;
                        };

                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                            });
                        });
                    },
                    template: '<div class="modal fade show in" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4>Manager List</h4><div class="modal-divider"></div><div class="table-responsive"><div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="showmanagermodalsearchbar"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input1" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap dataTable no-footer" cellspacing="0" width="100%"><thead><tr><th ng-click="sortBy1(\'Name\')">Manager Name<span ng-show="sortKey1 == \'Name\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse1,\'fa fa-chevron-down\':!reverse1}"></span></th><th ng-click="sortBy1(\'Email\')">Email<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse1,\'fa fa-chevron-down\':!reverse1}" ng-show="sortKey1 == \'Email\'"></span></th></tr></thead><tbody class="table-a-link"><tr dir-paginate="manager in model.managerList | orderBy:sortKey1:reverse1|filter:search|itemsPerPage:pageSize" current-page="currentPage"><td><a href="/app/managerdashboardfromadmin?managerid={{manager.Id}}&accid={{manager.AccountId}}&id={{model.aid}}&showteam={{model.showteam}}">{{ manager.Name }}</a></td><td><a href="mailto:{{ manager.Email}}" target="_blank">mailto:{{ manager.Email}}</a></td></tr></tbody></table></div></div><div class="modal-footer"><div excel-export="true" export-data="data()" file-name="{{model.filename}}"/><dir-pagination-controls max-size="5"  direction-links="true" boundary-links="true" auto-hide ="true" responsive="true" class="pull-right"></dir-pagination-controls></div></div></div></div></div>'
                };
            }]);

            //Controller
            app.controller('AdminDashboardController', ['$scope', '$modal', '$log', '$window', '$filter', function ($scope, $modal, $log, $window, $filter) {
                var url_string = $(location).attr("href");
                var url = new URL(url_string);
                $scope.aid = url.searchParams.get("id");
                $scope.accid = url.searchParams.get("accid");
                $scope.showteam = url.searchParams.get("showteam");
                $scope.endProcess = false;
                $scope.modalOpen = false;
                $scope.isUnapprovedTab = false;
                $scope.isDashboardTab = true;
                $scope.enableBar = true;
                $scope.deProgressBarWidth = 75;
                $scope.testSum = 0;
                $scope.search = "";
                $scope.searchforunapprove = "";
                $scope.isPagination = true;
                $scope.lastIndex = 30;
                $scope.displayApprovebtn = false;
                $scope.displayEmailReminder = false;
                $scope.contidlist = [];
                $scope.adminIDList = [];
                $scope.adminIDsLabel = '{!($Label.AdminVicePresident)}';
                $scope.approvalTopMsg = '{!($Label.mileageApprovalTopMsg)}';
                $scope.approvalBottomMsg = '{!($Label.mileageApprovalBottomMsg)}';
                $scope.adminIDList = $scope.adminIDsLabel.split(',');
                angular.forEach($scope.adminIDList, function (item) {
                    if (item === $scope.aid) {
                        $scope.adminID = item;
                    }
                });
                var url_locate = "/app/admindashboard?accid=" + $scope.accid + "&id=" + $scope.aid + "&showteam=" + "false";
                var url_locate_showTeam = "/app/admindashboard?accid=" + $scope.accid + "&id=" + $scope.aid + "&showteam=" + "true";
                var batchId = sessionStorage.getItem("Batch-Id");
                $scope.checkboxObj = { IsAllCheckedForApprove: false, IsAllCheckedForUnapprove: false, IsAllEmailCheckedForUnapprove: false }
                this.setOptions = function () {
                    toastr.options.positionClass = "toast-bottom-right";
                    toastr.options.closeButton = true;
                    toastr.options.progressBar = true;
                    //  toastr.options.hideMethod = 'noop';
                };
                $scope.importedFileErrors = {};
                $scope.waiting = false;
                this.setOptions();
                this.clear = function () {
                    toastr.clear();
                };
                $scope.apexCallStatus = function () {
                    var reimCount = 0;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.AdminDashboardController.CheckBatchStatus}', batchId,
                        function (result, event) {
                            console.log("Batch Id", batchId);
                            if (event.status && result != null && result != '') {
                                if(result === 'Completed'){
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.UpdatedReimList}', $scope.aid, $scope.accid, $scope.showteam,
                                        function (result, event) {
                                            if (event.status && result != null && result != '') {
                                                $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g,"\""));
                                                $scope.AllDriversLastMonthUnapprovedReimbursementsClone = JSON.parse(result[1].replace(/(&quot\;)/g,"\""));
                                                console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                                console.log("approveReimbursementsClone Result 2", $scope.AllDriversLastMonthUnapprovedReimbursementsClone);
                                                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                                                    if (item.totalMileages > '0.00' && item.status === 'Pending'){ /* EMC - 168 : Approve checkbox still present on dashboard */
                                                        reimCount ++;
                                                    }
                                                });
                                                $scope.displayApprovebtn = (reimCount > 0) ? true : false; 
                                                // angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                                                //     if (item.totalMileages > '0.00' && item.status == 'Approved')
                                                //         $scope.displayApprovebtn = false;
                                                //     else
                                                //         $scope.displayApprovebtn = true;
                                                // });
                                            }
                                            $scope.$apply();
                                         }, { escape: false }
                                    ) 
                                } else if(result.includes("Failed=")){
                                    var errResult = result.split("=");
                                    toastr.error(errResult[1]);
                                }else{
                                    setTimeout(function () {
                                        $scope.apexCallStatus();
                                    }, 5000);
                                }
                                console.log("CheckBatchStatus", result);
                            }
                            else {
                                toastr.error('Some error has occur');
                            }
                            $scope.$apply();
                        }, { escape: false }
                    );
                 
                }
           
                 if (window.performance.navigation.type == 1) {
                   console.info( "This page is reloaded");
                } else {
                    console.info( "This page is not reloaded");
                    if(batchId != null){
                        $scope.apexCallStatus();
                    }
                   
                }
                $scope.myTeamTabClick = function () {
                    $('#name').trigger("click")
                    location.assign(url_locate);
                    $scope.checkboxObj.IsAllCheckedForUnapprove = false;
                    $scope.checkboxObj.IsAllEmailCheckedForUnapprove = false;
                    angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                        item.isSelected = false;
                    });
                    $scope.isUnapprovedTab = false;
                    $scope.isDashboardTab = true;
                }
                $scope.unApproveTabClick = function () {
                    $scope.currentPage = 1;
                    $('#nameforunapprove').trigger("click");
                    $scope.checkboxObj.IsAllCheckedForApprove = false;
                    angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                        item.isSelected = false;
                        item.isLockDate = false;
                        if (item.totalMileages > 0.00 && item.status == 'Approved')
                            $scope.displayApprovebtn = false;
                        else
                            $scope.displayApprovebtn = true;
                            $scope.displayEmailReminder = true;
                    });
                    if(batchId != null){
                        var c = 0;
                        angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                            if (item.reimbursementApproval === true) {
                                c++;
                            }
                        });
                        if($scope.AllDriversLastMonthUnapprovedReimbursementsClone.length === c){
                            if($scope.checkAllShowForUnApprove){
                                $scope.checkAllShowForUnApprove = false;
                            }
                        }
                    }
                    $scope.isUnapprovedTab = true;
                    $scope.isDashboardTab = false;
                    console.log("From Unapproved", $scope.AllDriversLastMonthUnapprovedReimbursementsClone)
                }
                $scope.showTeamTabClick = function () {
                    location.assign(url_locate_showTeam);
                }
                //fill the reim table
                $scope.AllDriversLastMonthReimbursements = {!AllDriversLastMonthReimbursements};
                console.log($scope.AllDriversLastMonthReimbursements)
              //  console.log($filter('number')(2134.9333333333334, 2) );
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if(item.threshold != null){
                        item.threshold =  $filter('number')(item.threshold, 2) 
                    }
                });
     
            $scope.adminname = '{!nameofEmployee}';
            $scope.myTeamReimbusement = [];
            $scope.unApprovedReimbusement = [];
            $scope.AllDriversLastMonthUnapprovedReimbursementsClone = {!AllDriversLastMonthUnapprovedReimbursementsClone};
            $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");


            // Search input event 
            $scope.keyPressed = function (keyEvent, len) {
                    if (keyEvent.keyCode == 13 || (keyEvent.keyCode == 32 && !len)) {
                        event.preventDefault();
                    }
                    // return keyEvent.which !== 32;
                };
            //Sorting For table of all Reimburesment
            $scope.sortKey = 'Name';    //set the sortKey to the param passed
            $scope.reverse = false;

            $scope.sort = function (keyname) {

                $scope.sortKey = keyname;   //set the sortKey to the param passed
                $scope.reverse = !$scope.reverse;   //if true make it false and vice versa

                if (keyname === 'threshold' || keyname === 'totalMileages' || keyname === 'rejectedMileages' || keyname === 'approvedMileages') {
                    $scope.AllDriversLastMonthReimbursements.sort(function (a, b) {
                        var newA = parseFloat(a[keyname]),
                            newB = parseFloat(b[keyname]);
                        if ($scope.reverse) {
                            if (newA < newB) //sort string ascending
                                return -1
                            if (newA > newB)
                                return 1
                            return 0
                        } else {
                            if (newA < newB) //sort string ascending
                                return 1
                            if (newA > newB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })


                    //console.log($scope.AllDriversLastMonthReimbursements);
                }
                if (keyname === 'name') {
                    $scope.AllDriversLastMonthReimbursements.sort(function (a, b) {

                        var newA = a[keyname].toLowerCase(),
                            newB = b[keyname].toLowerCase()
                        if ($scope.reverse) {
                            if (newA < newB) //sort string ascending
                                return -1
                            if (newA > newB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (newA < newB) //sort string ascending
                                return 1
                            if (newA > newB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })

                }
            }


            //fill the unapproved datalist
            //Sorting For table of all Un Approved Reimburesment
            $scope.sortKey1 = 'Name';   //set the sortKey to the param passed
            $scope.reverse1 = false;
            $scope.sort1 = function (keyname) {
                $scope.sortKey1 = keyname;   //set the sortKey to the param passed
                $scope.reverse1 = !$scope.reverse1; //if true make it false and vice versa
                if (keyname === 'threshold' || keyname === 'totalMileages' || keyname === 'approvedMileages') {
                    $scope.AllDriversLastMonthUnapprovedReimbursementsClone.sort(function (a, b) {
                        var newA = parseFloat(a[keyname]),
                            newB = parseFloat(b[keyname]);
                        if ($scope.reverse1) {
                            if (newA < newB) //sort string ascending
                                return -1
                            if (newA > newB)
                                return 1
                            return 0
                        } else {
                            if (newA < newB) //sort string ascending
                                return 1
                            if (newA > newB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                    // console.log($scope.AllDriversLastMonthReimbursements);
                }
                if (keyname === 'name') {
                    $scope.AllDriversLastMonthUnapprovedReimbursementsClone.sort(function (a, b) {
                        var newA = a[keyname].toLowerCase(),
                            newB = b[keyname].toLowerCase()
                        if ($scope.reverse1) {
                            if (newA < newB) //sort string ascending
                                return -1
                            if (newA > newB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (newA < newB) //sort string ascending
                                return 1
                            if (newA > newB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
            }
            //Open Modal
            $scope.managerDialog = new ManagerofcurrentAdmin();
            $scope.openmodalForloginas = function () {
                $scope.search == "";
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.AdminDashboardController.getManager}', $scope.aid, $scope.accid,
                    function (result, event) {
                        if (event.status) {
                            let resultD = result.replace(/\\'/g, "\'");
                            var managerList = JSON.parse(resultD);
                            $scope.exportManagerList = [];
                            $scope.exportManagerList.push(["Name", "Email"]);
                            angular.forEach(managerList, function (item, key) {
                                $scope.exportManagerList.push([item.Name, item.Email]);
                            });
                            $scope.$apply();
                            $scope.fileName = $scope.adminname + '\'s Manager ' + $scope.FromDate;
                            $scope.managerDialog.open($scope.fileName, managerList, $scope.aid, $scope.showteam);
                        }
                    },
                    { escape: false }
                );
            };
            $scope.loadpageformodal = function (id) {

                $scope.exportReimList;
                $scope.flagefordownload = false;
                var expoArray = [];
                $scope.removeElement = { isRemove: false, index: -1 };
                var removeIndex = 0;
                $scope.mileageslistfordownload = [];

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.getAllDriversLastMonthUpdatedReimbursements}', $scope.aid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            var data = result.replace(/\\'/g, "\'")
                            $scope.AllDriversLastMonthReimbursements = JSON.parse(data);
                            $scope.$apply();
                            $scope.loadpage();
                        }
                    },
                    { escape: false }
                );
            }
            $scope.searchbartrueformyteam = false;
            $scope.searchbartrueforunapprove = false;
            $scope.loadpage = function () {
                if ($scope.showteam === "false") {
                    if(!document.querySelector("#unapprove-pills").className.includes("active")){
                        angular.element(document.querySelector("#myteam-pills")).addClass("active");
                    }
                }
                else {
                    if(!document.querySelector("#unapprove-pills").className.includes("active")){
                        angular.element(document.querySelector("#showteam-pills")).addClass("active");
                    }
                }
                $scope.contidlist = [];
                $scope.currentPage = 1;
                $scope.pageSize = 30;
                $scope.checkAllShowForMyTeam = false;
                $scope.checkAllShowTeamApprove = true;
                $scope.checkAllShowForUnApprove = false;

                $scope.displayEmailReminder = false;
                var count = 0;
                var countforunaprove = 0;
                $scope.lengthformyteam = $scope.AllDriversLastMonthReimbursements.length;
                var array = [];
                array = $scope.AllDriversLastMonthReimbursements;
                if ($scope.lengthformyteam > 10)
                    $scope.searchbartrueformyteam = true;
                else
                    $scope.searchbartrueformyteam = false;

                $scope.lengthforunapprovebtndisable = $scope.AllDriversLastMonthUnapprovedReimbursementsClone.length;

                if ($scope.lengthforunapprovebtndisable > 10)
                    $scope.searchbartrueforunapprove = true;
                else
                    $scope.searchbartrueforunapprove = false;

                $scope.fileNameformyteam = $scope.adminname + '\'s My Team Mileage ' + $scope.FromDate;
                $scope.fileNameforunapprove = $scope.adminname + '\'s Unapproved Mileage ' + $scope.FromDate;
                $scope.exportData = [];
                var countforbtn = 0;
                var countaprove = 0;
                $scope.exportData.push(["Month", "Name", "Status", "Approved Mileages",  "Submited Mileage", "Rejected Mileage", "Approved By", "Approval Date", "Lock Date/Report Run", "Managers Name", "Managers Email"]);
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item, key) {
                    $scope.exportData.push([item.month, item.name.replace(/\\'/g, "\'"), item.status, item.approvedMileages,item.totalMileages,item.rejectedMileages,item.mileageApproval, item.approvedDate, item.lockDate, item.managerName, item.managerEmail]);
                    if (item.totalMileages > '0.00' && item.status === 'Pending') { /* EMC - 168 : Approve checkbox still present on dashboard */
                        $scope.displayApprovebtn = true;
                        count++;
                    }
                    if (item.isSelected)
                        countforbtn++;
                    if (item.status == 'Approved')
                        countaprove++;
                });
                $scope.approvechecklen = 0;
                if (countaprove != 0)
                    $scope.approvechecklen = $scope.lengthformyteam - countaprove;
                if (countforbtn == 0)
                    $scope.displayTeamRecordBtn = false;
                else
                    $scope.displayTeamRecordBtn = true;

                var total = $('.myteamcheck').length;

                if (count == 0 && $scope.approvechecklen == 0) {
                    $scope.checkAllShowForMyTeam = false;
                }
                else
                    $scope.checkAllShowForMyTeam = true;

                var countforbtnUnapprove = 0;
                $scope.exportUpapprovedate = [];
                $scope.exportUpapprovedate.push(["Month", "Name","Unapproved Mileage","Approved Mileage", "Approved By", "Approval Date", "Lock Date/Report Run", "Managers Name", "Managers Email"]);

                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                    $scope.exportUpapprovedate.push([item.month, item.name.replace(/\\'/g, "\'"), item.totalMileages, item.approvedMileages, item.mileageApproval, item.approvedDate, item.lockDate, item.managerName, item.managerEmail]);
                    if (item.totalMileages > '0.00') {
                        countforunaprove++;
                    }
                    if (item.isSelected)
                        countforbtnUnapprove++;

                });

                if (countforbtnUnapprove == 0)
                    $scope.displayUnapprovedBtn = false;
                else
                    $scope.displayUnapprovedBtn = true;

                if (countforunaprove > 0) {
                    $scope.checkAllShowForUnApprove = true;
                }
            }
            $scope.modalshowforapproved = function (status) {
                $('#spinner').hide();
                $scope.flagstatus;
                if (status == 'true')
                    $scope.flagstatus = 'approved';
                if (status == 'false')
                    $scope.flagstatus = 'rejected';
                if (status == 'truefalse')
                    $scope.flagstatus = 'approved and rejected';
                $scope.$apply();
                $scope.$modalInstance = $modal.open({
                    template: '<button type="button" ng-click="okforapprove()" class="childcls close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{approvalTopMsg}}</h4></div><div class="check-in-info"><p>{{approvalBottomMsg}}</p></div><div class="check-submit"><button type="button" ng-click="okforapprove()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                    scope: $scope
                });
            }
            $scope.okforapprove = function () {
                $('#spinner').show();

                $scope.$modalInstance.close();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.getAllDriversLastMonthUpdatedUnapprovedReimburseClone1}', $scope.aid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            var data = result.replace(/\\'/g, "\'")
                            $scope.AllDriversLastMonthUnapprovedReimbursementsClone = JSON.parse(data);
                            $('#spinner').hide();
                            $scope.$apply();
                            $scope.loadpage();
                        }
                    },
                    { escape: false }
                );
                $scope.reimbursementDialog.close();

            };
            $scope.loadpage();
            $scope.displayTeamRecordBtn = false;
            $scope.displayUnapprovedBtn = false;
            $scope.myTeamCheckUncheckAll = function (myTeamCheckUncheckAll) {
                $scope.checkboxObj.IsAllCheckedForApprove = myTeamCheckUncheckAll

                if ($scope.checkboxObj.IsAllCheckedForApprove == true)
                    $scope.displayTeamRecordBtn = true;
                else
                    $scope.displayTeamRecordBtn = false;

                angular.forEach($scope.AllDriversLastMonthReimbursements, function (LastMonthReimbursement) {

                    LastMonthReimbursement.isSelected = $scope.checkboxObj.IsAllCheckedForApprove;
                });
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                   if (item.totalMileages > '0.00') {
                        if (item.isSelected && item.status != 'Approved') {
                            $scope.myTeamReimbusement.push(item.id);
                        }
                    }

                });
                console.log("team reimbursement", $scope.myTeamReimbusement);
                $scope.myTeamReimbusement = removeDumplicateValue($scope.myTeamReimbusement);

            }

            $scope.CheckUncheckHeader = function (status, elem) {
                $scope.myTeamReimbusement = [];
                var total = $('.myteamcheck').length;
                var count = 0;
                var myteamlen = $scope.AllDriversLastMonthReimbursements.length;
                var countstatus = 0;
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if (item.totalMileages > '0.00') {
                        if (item.isSelected && item.status != 'Approved') {
                            $scope.myTeamReimbusement.push(item.id);
                            count++;
                        }
                    }
                    // if(item.isSelected == false && item.status != 'Approved'){
                    //         $scope.unApprovedReimbusement.push(item.id);
                    // }

                    if (item.status == 'Approved')
                        countstatus++;

                });
              
                if (myteamlen === count || total === count) {
                    $scope.checkboxObj.IsAllCheckedForApprove = true;

                } else {
                    $scope.checkboxObj.IsAllCheckedForApprove = false;
                }
                if (countstatus != 0)
                    myteamlen = myteamlen - countstatus;
                if (count > 0) {
                    $scope.displayTeamRecordBtn = true;
                    $scope.myTeamReimbusement = removeDumplicateValue($scope.myTeamReimbusement);
                    if (elem.isSelected == false) {
                        angular.forEach($scope.myTeamReimbusement, function (item) {
                            if (angular.equals(item, elem.id)) {
                                $scope.myTeamReimbusement = _.without($scope.myTeamReimbusement, elem.id);
                            }
                        });
                    }
                    // console.log($scope.myTeamReimbusement);
                }
                else {
                    $scope.displayTeamRecordBtn = false;
                }
                console.log("team reimbursement", $scope.myTeamReimbusement);
            }

            $scope.unApprovedCheckUncheckAll = function (IsAllCheckedForUnapprove) {
                var count = 0;
                $scope.checkboxObj.IsAllCheckedForUnapprove = IsAllCheckedForUnapprove;
                if ($scope.checkboxObj.IsAllCheckedForUnapprove == true) {
                    $scope.displayUnapprovedBtn = true;
                } else {
                    $scope.displayUnapprovedBtn = false;
                }
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (j) {
                    j.isSelected = $scope.checkboxObj.IsAllCheckedForUnapprove;
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                    if (item.isSelected) {
                        if (item.reimbursementIdList.length > 0) {
                            angular.forEach(item.reimbursementIdList, function (reimb) {
                                $scope.unApprovedReimbusement.push(reimb);
                            });
                        }
                        count++;
                    }
                });

                $scope.unApprovedReimbusement = removeDumplicateValue($scope.unApprovedReimbusement);
            }
            /*For Email Reminder*/
            $scope.unApprovedEmailCheckUncheckAll = function (IsAllEmailCheckedForUnapprove) {
                var count = 0;
                $scope.checkboxObj.IsAllEmailCheckedForUnapprove = IsAllEmailCheckedForUnapprove;
                if ($scope.checkboxObj.IsAllEmailCheckedForUnapprove == true) {
                    $scope.displayUnapprovedBtn = true;
                } else {
                    $scope.displayUnapprovedBtn = false;
                }
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (j) {
                    j.isSelectedEmailReminder = $scope.checkboxObj.IsAllEmailCheckedForUnapprove;
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                    if (item.isSelectedEmailReminder) {
                        if (item.reimbursementIdList.length > 0) {
                            angular.forEach(item.reimbursementIdList, function (reimb) {
                                $scope.unApprovedReimbusement.push(reimb);
                            });

                        }
                        count++;
                    }
                });
            }


            /* End of Email Reminder */
            //Select any one reim
            $scope.CheckUncheckHeaderUnapprove = function (elem) {
            debugger
                var total = $('.upapprovecheck').length;
                console.log(total);
                var unapprovelen = $scope.AllDriversLastMonthUnapprovedReimbursementsClone.length;
                var count = 0;
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                    if (item.totalMileages > '0.00') {
                        if (item.isSelected) {
                            if (item.reimbursementIdList.length > 0) {
                                angular.forEach(item.reimbursementIdList, function (reimb) {
                                    $scope.unApprovedReimbusement.push(reimb);
                                });

                            }
                            count++;
                        }
                    }
                });

                if (unapprovelen == count || (total == count) )/* || (total == count)*/
                    $scope.checkboxObj.IsAllCheckedForUnapprove = true;
                else
                    $scope.checkboxObj.IsAllCheckedForUnapprove = false;

                if (count > 0) {
                    $scope.displayUnapprovedBtn = true;
                    $scope.unApprovedReimbusement = removeDumplicateValue($scope.unApprovedReimbusement);
                    if (elem.isSelected == false) {
                        debugger
                        angular.forEach($scope.unApprovedReimbusement, function (item) {
                            if (angular.equals(item, elem.reimbursementid)) {
                                debugger
                                $scope.unApprovedReimbusement = _.without($scope.unApprovedReimbusement, elem.reimbursementid);
                            }
                        });
                    }
                }
                else{
                    $scope.displayUnapprovedBtn = false;
                }
                
            }

            $scope.CheckUncheckHeaderUnapproveForEmail = function () {

                var total = $('.upapproveemailcheck').length;

                var unapprovelen = $scope.AllDriversLastMonthUnapprovedReimbursementsClone.length;
                var count = 0;
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {

                    if (item.isSelectedEmailReminder) {
                        if (item.reimbursementIdList.length > 0) {
                            angular.forEach(item.reimbursementIdList, function (reimb) {
                                $scope.unApprovedReimbusement.push(reimb);
                            });

                        }

                        count++;
                    }
                });

                if (unapprovelen == count)/* || (total == count)*/
                    $scope.checkboxObj.IsAllEmailCheckedForUnapprove = true;
                else
                    $scope.checkboxObj.IsAllEmailCheckedForUnapprove = false;

                if (count > 0)
                    $scope.displayUnapprovedBtn = true;
                else
                    $scope.displayUnapprovedBtn = false;
            }

            $scope.showbtn = function (contid, threshold) {
                $scope.displayTeamRecordBtn = true;
                if ($scope.contidlist.length > 0) {
                    angular.forEach($scope.contidlist, function (val2, key) {
                        if (angular.equals(contid, val2.contactid)) {
                            $scope.contidlist = remove($scope.contidlist, val2.contactid);

                        }
                        $scope.contidlist.push({ "contactid": contid, "threshold": threshold });
                    });
                }
                else {
                    $scope.contidlist.push({ "contactid": contid, "threshold": threshold });
                }
            }
            function remove(arr, item) {
                for (var i = arr.length; i--;) {
                    if (arr[i].contactid == item) {
                        arr.splice(i, 1);
                    }
                }
                return arr;
            }
            function removeDumplicateValue(myArray) {

                var newArray = [];
                angular.forEach(myArray, function (value, key) {
                    var exists = false;
                    angular.forEach(newArray, function (val2, key) {
                        if (angular.equals(value, val2)) {

                            exists = true;

                        };
                    });
                    if (exists == false && value != "") {
                        newArray.push(value);
                    }
                });

                return newArray;
            }

            $scope.infoMessage = function (){
                $scope.$modalInstance = $modal.open({
                                template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                                scope: $scope
                });
            }
            $scope.CheckStatus = function (runTime) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.AdminDashboardController.CheckBatchStatus}', runTime.Id,
                        function (result, event) {
                            console.log("CheckBatchStatus", result);
                            sessionStorage.setItem("Batch-Id", runTime.Id);
                            console.log("Batch Id", runTime.Id);
                            if (event.status && result != null && result != '') {
                                if (result === 'Completed') {
                                    $('#spinner').show();
                                    $scope.reimbursements = [];
                                    var status = '';
                                    var status1 = '';
                                    var status2 = '';
                                    var status3 = '';
                                    if ($scope.myTeamReimbusement.length > 0 && $scope.contidlist.length > 0) {
                                        status = '1'
                                    }
                                    else if ($scope.contidlist.length > 0) {
                                        status = '2'
                                    }
                                    else {
                                        status = '3'
                                    }
                                    $scope.msg = '';
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.UpdatedReimList}', $scope.aid, $scope.accid, $scope.showteam,
                                        function (result, event) {
                                            if (event.status && result != null && result != '') {
                                                if (status == '1') {
                                                    $scope.msg = 'Process has been Completed Successfully.';
                                                }
                                                if (status == '2') {
                                                    $scope.msg = 'Employee threshold has been updated successfully.'
                                                }
                                                if (status == '3') {
                                                    $scope.msg = 'Employee mileage has been approved.';
                                                }
                                                if ($scope.contidlist.length > 0) {
                                                    $scope.contidlist.splice(0, $scope.contidlist.length);
                                                }
                                                if ($scope.myTeamReimbusement.length > 0) {
                                                    $scope.myTeamReimbusement.splice(0, $scope.myTeamReimbusement.length);
                                                }
                                                toastr.success($scope.msg);
                                                // $scope.$modalInstance = $modal.open({
                                                //     template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{msg}}</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                                                //     scope: $scope
                                                // });
                                                $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g,"\""));
                                                console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                                $scope.AllDriversLastMonthUnapprovedReimbursementsClone = JSON.parse(result[1].replace(/(&quot\;)/g,"\""));
                                                $scope.endProcess = false;
                                                if($scope.checkboxObj.IsAllCheckedForApprove){
                                                    $scope.checkboxObj.IsAllCheckedForApprove = false;
                                                }
                                                setTimeout(()=>{
                                                    location.reload();
                                                }, 2000);
                                                $scope.$apply();
                                            }
                                        })
                                    $('#spinner').hide();
                                 
                                    if($scope.modalOpen === true){
                                        $scope.$modalInstance.close();
                                    }
                                } 
                                else if(result.includes("Failed=")){
                                    var errResult = result.split("=");
                                    toastr.error(errResult[1]);
                                }
                                else {
                                    setTimeout(function () {
                                        $scope.CheckStatus(runTime);
                                    }, 5000);
                                }
                            }
                            else {
                                toastr.error('Some error has occur');
                            }
                            $scope.$apply();
                        }, { escape: false }
                    );

            }

            $scope.unapproveCheckStatus = function (runTime) {
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.AdminDashboardController.CheckBatchStatus}', runTime.Id,
                        function (result, event) {
                            console.log("CheckBatchStatus", result);
                            sessionStorage.setItem("Batch-Id", runTime.Id);
                            console.log("Batch Id", runTime.Id);
                            if (event.status && result != null && result != '') {
                                if (result === 'Completed') {
                                    $('#spinner').show();
                                    $scope.unapprovereimbursements = [];
                                    var count = 0;
                                    for (var i = 0; i < $scope.AllDriversLastMonthUnapprovedReimbursementsClone.length; i++) {
                                        if ($scope.AllDriversLastMonthUnapprovedReimbursementsClone[i].isSelected == true) {
                                            $scope.unapprovereimbursements.push($scope.AllDriversLastMonthUnapprovedReimbursementsClone[i]);
                                        }
                                        if ($scope.AllDriversLastMonthUnapprovedReimbursementsClone[i].isSelectedEmailReminder == true) {
                                            $scope.unapprovereimbursements.push($scope.AllDriversLastMonthUnapprovedReimbursementsClone[i]);
                                        }
                                    }
                                    $scope.msg = '';
                                    $scope.msg = 'Employee mileage has been approved.';
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.UpdatedReimList}', $scope.aid, $scope.accid, $scope.showteam,
                                        function (result, event) {
                                            if (event.status && result != null && result != '') {
                                                toastr.success($scope.msg);
                                                // $scope.$modalInstance = $modal.open({
                                                //     template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{msg}}</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                                                //     scope: $scope
                                                // });
                                                $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g,"\""));
                                                console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                                $scope.AllDriversLastMonthUnapprovedReimbursementsClone = JSON.parse(result[1].replace(/(&quot\;)/g,"\""));
                                                $scope.endProcess = false;
                                                if($scope.checkboxObj.IsAllCheckedForUnapprove) {
                                                    $scope.checkboxObj.IsAllCheckedForUnapprove = false;
                                                }
                                                setTimeout(()=>{
                                                    location.reload();
                                                }, 2000);
                                                $scope.$apply();
                                            }
                                        })
                                    $('#spinner').hide();
                                 
                                    if($scope.modalOpen === true){
                                        $scope.$modalInstance.close();
                                    }
                                } 
                                else if(result.includes("Failed=")){
                                    var errResult = result.split("=");
                                    toastr.error(errResult[1]);
                                }
                                else {
                                    setTimeout(function () {
                                        $scope.unapproveCheckStatus(runTime);
                                    }, 5000);
                                }
                            }
                            else {
                                toastr.error('Some error has occur');
                            }
                            $scope.$apply();
                        }, { escape: false }
                    );

            }

            $scope.approveReimbursementsofDriver = function () {
                console.log("stringify", JSON.stringify($scope.myTeamReimbusement))
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.approveReimbursements}', JSON.stringify($scope.myTeamReimbusement), $scope.aid, $scope.accid, $scope.showteam, JSON.stringify($scope.contidlist),
                    function (result, event) {
                        if (event.status && result != null && result != '') {
                           $('#spinner').hide();
                           console.log("approveReimbursements Result", result);
                           $scope.modalOpen = true;
                           $scope.$modalInstance = $modal.open({
                                        template: '<button type="button" ng-click="cancelProcess()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                                        scope: $scope
                            });
                            $scope.CheckStatus(result);

                            $scope.$apply();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                    },
                    { escape: false }
                );
            };

            $scope.unapproveReimbursementsofDriver = function () {
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.approveMileagesClone}', JSON.stringify($scope.unApprovedReimbusement), $scope.aid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            $('#spinner').hide();
                           console.log("approveMileagesClone Result", result);
                           $scope.modalOpen = true;
                           $scope.$modalInstance = $modal.open({
                                        template: '<button type="button" ng-click="cancelProcess()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                                        scope: $scope
                            });
                            $scope.unapproveCheckStatus(result);
                            $scope.$apply();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                    },
                    { escape: false }
                );
            }
            $scope.timeConversion = function (number) {
                var time;
                if(number<0){
                    time = number;
                }else{
                    var hours = Math.floor(number / 60);
                    var min = number % 60;
                    hours = hours < 10 ? "0" + hours : hours;
                    min = min < 10 ? "0" + min : min;
                    time = hours + ':' + min;
                }
              
                //var time = (hours < 12) ? (hours-12 + ':' + min +' PM') : (hours + ':' + min +' AM');
                return time;
            }
            $scope.reimbursementDialog = new MileagesofReimbursements(false);
            $scope.openmodalForunapprovedata = function (name, driverid, unapprovereimbursements, managerName, emailOfEmployee) {
                $('#spinner').show();
                document.getElementById("example-search-input")
                $scope.clickedMonth = "";
                $scope.unapprovereimbursements = unapprovereimbursements;
                console.log("unapprovereimbursements", unapprovereimbursements);
                $scope.driverid = driverid;
                $scope.name = name;
                $scope.managerName = managerName;
                $scope.mileagesList = [];
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AdminDashboardController.getUnapprovedMileages}', JSON.stringify($scope.unapprovereimbursements), $scope.accid,
                    function (result, event) {
                        if (event.status && result != null) {
                            var resultdata = result.replace(/\\/g, '');
                            $scope.result = JSON.parse(resultdata);
                            $scope.mileagesList = $scope.result.mileagesList;
                            angular.forEach($scope.mileagesList, function (item) {
                                item.drivingtime = $scope.timeConversion(item.drivingtime);
                                item.staytime = $scope.timeConversion(item.staytime);
                                item.totaltime = $scope.timeConversion(item.totaltime);
                                if (item.lockdate != null) {
                                    item.isLockDate = true;
                                    if (item.status === "Approved") {
                                        item.isSelected = true;
                                    }
                                    else if (item.status === "Rejected") {
                                        item.isChecked = true;
                                    }
                                    else if (item.status === "Not Approved Yet") {
                                        item.isSelected = false;
                                        item.isChecked = false;
                                    }
                                }
                                else if (item.lockdate === null) {

                                    item.isLockDate = false;
                                    if (item.status === "Approved") {
                                        item.isSelected = true;
                                    }
                                    else if (item.status === "Rejected") {
                                        item.isChecked = true;

                                    }
                                    else if (item.status === "Not Approved Yet") {
                                        item.isSelected = false;
                                        item.isChecked = false;

                                    }
                                }

                            });
                            $scope.emailOfEmployee = '{!emailofEmployee}';
                            console.log($scope.emailOfEmployee);
                            $scope.exportReimList = [];
                            $scope.exportReimList.push(["Contact Email", "Tracing Style", "Day Of Week", "Trip Date", "Start Time", "End Time", "Trip Origin", "Trip Destination", "Mileage", "Status", "Date Submitted", "Maint/Tires", "Fuel Rate", "Variable Rate", "Amount", "Drive Time", "Stay Time", "Total Time", "Notes", "Tags"]);
                            angular.forEach($scope.mileagesList, function (item, key) {
                                $scope.exportReimList.push([item.emailaddress, item.tracingstyle, item.dayofweek, item.tripdate, item.starttime, item.endtime, item.originname, item.destinationname, item.mileage, item.status, item.submitteddate, item.maintTyre, item.fuelRate, item.variablerate, (parseInt(item.variableamount)).toFixed(2), item.drivingtime, item.staytime, item.totaltime, item.notes, item.tag]);
                            });
                            $scope.fileName = $scope.name + '\'s Mileage ' + $scope.FromDate;
                            $scope.reimbursementDialog.open($scope.fileName, $scope.clickedMonth, $scope.name, $scope.mileagesList, $scope.emailOfEmployee);
                            $('#spinner').hide();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            };


            $scope.cancel = function () {
                $scope.$modalInstance.dismiss('cancel');
                $("#example-search-input").val();
                $("#example-search-input").html("");
                $("#example-search-input1").val();
                $("#example-search-input1").html("");
                $("#example-search-input2").val();
                $("#example-search-input2").html("");
            };

            $scope.cancelProcess = function() {
                var c = 0;
                $scope.endProcess = true;
                $scope.modalOpen = false;
                $scope.displayUnapprovedBtn = false;
                $scope.displayTeamRecordBtn = false;
                $scope.$modalInstance.dismiss('cancel');
                console.log($scope.AllDriversLastMonthUnapprovedReimbursementsClone)
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if (item.isSelected && item.status != 'Approved'){
                        item.reimbursementApproval = true;
                    }
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsClone, function (item) {
                    if (item.isSelected && item.status != 'Approved'){
                        item.reimbursementApproval = true;
                        c++;
                    }
                });
                if($scope.AllDriversLastMonthUnapprovedReimbursementsClone.length === c){
                    if($scope.checkAllShowForUnApprove){
                        $scope.checkAllShowForUnApprove = false;
                    }
                }
                if($scope.checkboxObj.IsAllCheckedForApprove){
                    $scope.checkAllShowTeamApprove = false;
                }
            }

            $scope.ok = function () {
                var total = $('.myteamcheck').length;
                if (total == 0) {
                    $scope.displayTeamRecordBtn = false;
                }
                $scope.$modalInstance.close();
            };
            $scope.okforUnapprove = function () {
                var total = $('.upapprovecheck').length;
                if (total == 0) {
                    $scope.displayUnapprovedBtn = false;
                }
                $scope.$modalInstance.close();
                location.reload();
            };
            $scope.viewchartdata = new viewChartDialogModel(false);
            $scope.viewchart = function () {

                $scope.data = [];
                $scope.data = JSON.parse('{!ChartData}');
                //  console.log(' $scope.data'+ $scope.data);
                $scope.viewchartdata.open($scope.data);
            }
            // id
            $scope.pushedArr = [];
            $scope.Total = function (value, list) {
                var found = $scope.pushedArr.find(function (element) {
                    return element.id == value.id;
                });
                if (!found) {
                    $scope.testSum = $scope.testSum + parseInt(value.totalMileages)
                    $scope.pushedArr.push(value)
                }
            }
            $scope.loadPagination = function () {
                setTimeout(function () {
                    $('#name').trigger("click")
                }, 50);
            }
            $scope.loadPagination()
            $('#spinner').hide();
            }]);
        </script>
    </head>

    <body ng-app="admindashboardModule" ng-controller="AdminDashboardController" ng-cloak="true">
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" href="/app/admindashboard?accid={{accid}}&id={{aid}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    <ul class="navbar-nav flex-row alignitemscenter">
                                        <li class="nav-item active">
                                            <a class="nav-link text-white" href="/app/admindashboard?accid={{accid}}&id={{aid}}&showteam={{showteam}}">Dashboard</a>
                                        </li>
                                         <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/MileageDashboard?accid={{accid}}&id={{aid}}&showteam={{showteam}}">Mileage</a>
                                        </li>
                                        <li class="nav-item" ng-if="aid!=adminID">
                                            <a class="nav-link text-white" href="/app/roster?accid={{accid}}&id={{aid}}&showteam={{showteam}}">Drivers</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/ManageNotification?accid={{accid}}&id={{aid}}&showteam={{showteam}}">Communications</a>
                                        </li>
                                        <li class="nav-item" ng-if="aid!=adminID">
                                            <a class="nav-link text-white" href="/app/reportlist?accid={{accid}}&id={{aid}}&showteam={{showteam}}">Reports</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>

                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
        <section class="container-fluid">
            <!-- <div class="back-btn my-3">
                <button class="btn btn-secondary float-right" ng-click="">Get Unapproved Trips</button>
            </div>
            <div class="back-btn my-3">
                <button class="btn btn-secondary float-right" ng-click="">Get Approved Trips</button>
            </div> -->
            <div class="back-btn my-3">
                <button class="btn btn-secondary float-right" ng-click="openmodalForloginas();">Login As</button>
            </div>
            <div class="back-btn my-3">
                <!-- ng-click="viewchart()" -->
                <c:ViewChart />
            </div>

            <div class="report-link">
                <h3 class="mb-30 d-block">Team Reimbursement Summary</h3>
            </div>

            <div class="my-3 admin-roster-tab-section">
                <ul class="nav nav-pills">
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" >
                        <a class="nav-link" data-toggle="pill" id="myteam-pills" data-target="#pills-admin-dashbord-myteam" ng-click="myTeamTabClick()">My Team</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" id="unapprove-pills" data-toggle="pill" data-target="#pills-admin-dashbord-mileage" ng-click="unApproveTabClick()">Unapproved Mileage</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" data-toggle="pill" id="showteam-pills" data-target="#pills-admin-dashbord-showteam"  ng-click="showTeamTabClick()">Company</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="pills-admin-dashbord-myteam">
                        <div class="py-4 table-responsive" id="myteam-responsive" ng-if="isDashboardTab">
                            <!-- AI-000206 - Start-->
                            <div id="example_filter" class="dataTables_filter pull-left d-block" ng-show="searchbartrueformyteam">
                                <div class="input-group w-85">
                                    <i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i>
                                    <input class="form-control py-2 border-right-0 border" type="search" ng-model="search" placeholder="Search" aria-controls="example"
                                        id="example-search-input"  ng-keypress="keyPressed($event, search.length)" />
                                </div>
                            </div>
                            <!-- AI-000206 - End-->
                            <!-- <div class="progress-background"></div>
                            <div class="progress" ng-show="enableBar">
                                <div class="progress-bar progress-bar-striped progress-bar-animated active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + '%' )}">{{deProgressBarWidth}}%</div>
                            </div> -->
                            <table id="admin-dashbord" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0" width="100%" ng-cloak="true">
                                <thead>
                                    <tr>
                                        <th class="w-328" id="name" ng-click="sort('name')">Name
                                            <span class="sort-icon pull-right" ng-show="sortKey=='name'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                        </th>
                                       <!-- <th class="w-200" ng-click="sort('threshold')">Approval
                                            <br/>Threshold
                                            <span class="sort-icon pull-right" ng-show="sortKey=='threshold'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                            </span>
                                        </th> -->
                                        <th class="w-180" ng-click="sort('totalMileages')">Submitted
                                            <br/> Mileage
                                            <span class="sort-icon pull-right" ng-show="sortKey=='totalMileages'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                        </th>
                                        <th class="w-175" ng-click="sort('rejectedMileages')">Flagged
                                            <br/> Mileage
                                            <span class="sort-icon pull-right" ng-show="sortKey=='rejectedMileages'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                        </th>
                                        <th class="w-230" ng-click="sort('approvedMileages')">Approved
                                            <br/>Mileage
                                            <span class="sort-icon pull-right" ng-show="sortKey=='approvedMileages'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                        </th>
                                        <th class="approveth">
                                            <div ng-if="displayApprovebtn" class="btn btn-primary-approve">
                                                <span class="appspan">Approve</span>
                                                <input ng-show="checkAllShowTeamApprove" type="checkbox" class="approvechk" ng-model="checkboxObj.IsAllCheckedForApprove"
                                                    ng-click="myTeamCheckUncheckAll(checkboxObj.IsAllCheckedForApprove)" />
                                            </div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="table-a-link">
                                    <tr dir-paginate="LastMonthReimbursement in AllDriversLastMonthReimbursements|filter:search|itemsPerPage:pageSize" current-page="currentPage"
                                        ng-model="LastMonthReimbursement">

                                        <td ng-model="LastMonthReimbursement.name">
                                            <a ng-if="!endProcess" href="/app/driverdashboardfromadminmanager?accid={{accid}}&id={{LastMonthReimbursement.contactid}}&adminid={{aid}}&showteam={{showteam}}">{{LastMonthReimbursement.name.replace('\\','') }} </a>
                                            <a ng-if="endProcess || LastMonthReimbursement.reimbursementApproval" ng-click="infoMessage()">{{LastMonthReimbursement.name.replace('\\','') }} </a>
                                        </td>

                                       <!-- <td ng-model="LastMonthReimbursement.threshold">                                            
                                            <input type="text" ng-change="showbtn(LastMonthReimbursement.contactid,LastMonthReimbursement.threshold)" ng-model="LastMonthReimbursement.threshold" 
                                                id="numberinput" class="numinputedit form-control rounded-0 col-md-6"
                                            />
                                        </td> -->
                                        <td ng-model="LastMonthReimbursement.totalMileages">
                                            {{LastMonthReimbursement.totalMileages | number:2}}

                                            <!-- {{ Total(LastMonthReimbursement) }} -->
                                        </td>
                                        <td ng-model="LastMonthReimbursement.totalMileages">
                                            {{LastMonthReimbursement.rejectedMileages | number:2}}
                                        </td>
                                        <td ng-model="LastMonthReimbursement.approvedMileages" class="approvetd">
                                            {{LastMonthReimbursement.approvedMileages | number:2}}
                                        </td>
                                        <td class="approvebtntd">
                                            <div class="statusapprove" ng-model="LastMonthReimbursement.status" ng-if="(LastMonthReimbursement.status=='Approved' || LastMonthReimbursement.status=='Rejected') && LastMonthReimbursement.totalMileages > '0.00'">
                                            {{LastMonthReimbursement.status}} on {{LastMonthReimbursement.approvedDate}}
                                            </div>
                                            <div ng-if="(LastMonthReimbursement.status=='Pending' || LastMonthReimbursement.status=='' || LastMonthReimbursement.status==undefined) && LastMonthReimbursement.totalMileages > '0.00' && !LastMonthReimbursement.reimbursementApproval">
                                                <input type="checkbox" ng-model="LastMonthReimbursement.isSelected" ng-click="CheckUncheckHeader(LastMonthReimbursement.status,LastMonthReimbursement)"
                                                    class="myteamcheck" />
                                            </div>
                                            <div class="statusapprove"  ng-if="LastMonthReimbursement.reimbursementApproval">
                                                Approval Processing
                                            </div>
                                        </td>
                                    </tr>
                                    <tr ng-if="lengthformyteam == 0 || (AllDriversLastMonthReimbursements | filter:search).length == 0">
                                        <td colspan="6" class="table-nodata">No Mileage Available</td>
                                    </tr>
                                </tbody>
                            </table>
                            <div ng-if="lengthformyteam > 30">
                                <dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" responsive="true" auto-hide="false" class="pull-right"></dir-pagination-controls>
                            </div>
                        </div>
                        <div excel-export="true" export-data="exportData" ng-if="lengthformyteam > 0" file-name="{{fileNameformyteam}}" />
                        <button class="btn btn-secondary float-right buttonSubmit" ng-show="displayTeamRecordBtn" ng-click="approveReimbursementsofDriver();"
                            ng-if="lengthformyteam > 0">Submit</button>
                    </div>
                    <div class="tab-pane fade" id="pills-admin-dashbord-mileage">
                        <div class="py-4 table-responsive" ng-if="isUnapprovedTab">
                            <!-- AI-000236 - Starts -->
                            <div id="example_filter" class="dataTables_filter pull-right d-block" ng-show="searchbartrueforunapprove">
                                <div class="input-group w-85">
                                    <i id="filtericon" class="fa fa-search" ng-if="searchforunapprove.length===0"></i>
                                    <input class="form-control py-2 border-right-0 border" type="search" ng-model="searchforunapprove" placeholder="Search" aria-controls="example"
                                        id="example-search-input2" ng-keypress="keyPressed($event, searchforunapprove.length)"/>
                                </div>
                            </div>
                            <!-- AI-000236 - Ends -->
                            <table id="admin-dashbord-mileage" class="table table-striped dt-responsive nowrap dataTable" cellspacing="0" width="100%"
                                ng-cloak="true">
                                <thead>
                                    <tr>
                                        <th id="nameforunapprove" ng-click="sort1('name')">Name
                                            <span class="sort-icon pull-right" ng-show="sortKey1=='name'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                        </th>
                                       <!-- <th ng-click="sort1('threshold')">Approval
                                            <br/> Threshold
                                            <span class="sort-icon pull-right" ng-show="sortKey1=='threshold'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}">
                                            </span>
                                        </th> -->
                                        <th ng-click="sort1('totalMileages')">Unapproved
                                            <br/> Mileage
                                            <span class="sort-icon pull-right" ng-show="sortKey1=='totalMileages'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                        </th>
                                        <th ng-click="sort1('approvedMileages')">Approved
                                            <br/> Mileage
                                            <span class="sort-icon pull-right" ng-show="sortKey1=='approvedMileages'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                        </th>
                                        <!-- <th ng-click="sort1('managerName')">Approving
                                        <br/>Manager
                                        <span class="sort-icon pull-right" ng-show="sortKey1=='managerName'" ng-class="{'fa fa-chevron-up':reverse1,'fa fa-chevron-down':!reverse1}"></span>
                                    </th>
                                    <th class="emailth">
                                        <button class="btn btn-secondary pull-right w-68 plt-0" ng-if="displayEmailReminder">
                                            <span class="emailspan">Email</span>
                                            <br/>
                                            <span class="fontS-17">Reminder</span>&nbsp;
                                             <input ng-show="checkAllShowForUnApprove" class="emailchk"
                                                type="checkbox" ng-model="checkboxObj.IsAllEmailCheckedForUnapprove" ng-click="unApprovedEmailCheckUncheckAll(checkboxObj.IsAllEmailCheckedForUnapprove)"
                                            />
                                        </button>
                                    </th> -->
                                        <th class="approveth">&nbsp;
                                            <button class="btn btn-primary-approve" ng-if="displayApprovebtn">
                                                <span class="appspan">Approve</span>
                                                <input ng-show="checkAllShowForUnApprove" class="approvechk"
                                                    type="checkbox" ng-model="checkboxObj.IsAllCheckedForUnapprove" ng-click="unApprovedCheckUncheckAll(checkboxObj.IsAllCheckedForUnapprove)"
                                                />
                                            </button>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="table-a-link">
                                    <tr dir-paginate="UnapprovedReimburesement in AllDriversLastMonthUnapprovedReimbursementsClone |filter:searchforunapprove|itemsPerPage:pageSize"
                                        current-page="currentPage" ng-model="UnapprovedReimburesement">
                                        <td ng-model="UnapprovedReimburesement.name">
                                            <a ng-if="!endProcess" ng-click="openmodalForunapprovedata(UnapprovedReimburesement.name,UnapprovedReimburesement.contactid,UnapprovedReimburesement,UnapprovedReimburesement.managerName)">{{UnapprovedReimburesement.name}} </a>
                                            <a ng-if="endProcess || UnapprovedReimburesement.reimbursementApproval" ng-click="infoMessage()">{{UnapprovedReimburesement.name}} </a>
                                        </td>
                                       <!-- <td ng-model="UnapprovedReimburesement.threshold">
                                            {{UnapprovedReimburesement.threshold | number:2 }}
                                        </td> -->
                                        <td ng-model="UnapprovedReimburesement.totalMileages">
                                            {{UnapprovedReimburesement.totalMileages | number:2 }}
                                        </td>
                                        <td ng-model="UnapprovedReimburesement.approvedMileages">
                                            {{UnapprovedReimburesement.approvedMileages | number:2 }}
                                        </td>
                                        <!-- <td ng-model="UnapprovedReimburesement.managerName">
                                        <a ng-click="openmodalForunapprovedata(UnapprovedReimburesement.managerName,UnapprovedReimburesement.contactid,UnapprovedReimburesement.mileagesList)">{{UnapprovedReimburesement.managerName | unescape:N }} </a>
                                    </td>-->
                                        <!--For Email Reminder -->
                                        <!-- <td ng-model="UnapprovedReimburesement.managerEmail">
                                        <div ng-if="UnapprovedReimburesement.totalMileages > '0.00'">
                                            <input type="checkbox" ng-model="UnapprovedReimburesement.isSelectedEmailReminder" ng-change="CheckUncheckHeaderUnapproveForEmail()" class="upapproveemailcheck"
                                            />
                                        </div>
                                      </td> -->

                                        <!-- end of email reminder -->
                                        <td ng-model="UnapprovedReimburesement.status">
                                            <div class="statusapprove" ng-model="UnapprovedReimburesement.status" ng-if="UnapprovedReimburesement.status=='Approved' && UnapprovedReimburesement.totalMileages > '0.00'">
                                            {{UnapprovedReimburesement.status}} on {{UnapprovedReimburesement.approvedDate}}
                                            </div>
                                            <div ng-if="UnapprovedReimburesement.status !='Approved' && UnapprovedReimburesement.totalMileages > '0.00' && !UnapprovedReimburesement.reimbursementApproval">
                                                <input type="checkbox" ng-model="UnapprovedReimburesement.isSelected" ng-change="CheckUncheckHeaderUnapprove(UnapprovedReimburesement)"
                                                    class="upapprovecheck" />
                                            </div>
                                            <div class="statusapprove"  ng-if="UnapprovedReimburesement.reimbursementApproval">
                                                Approval Processing
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- {{lengthforunapprovebtndisable}} -->
                                    <tr ng-if="lengthforunapprovebtndisable == 0 || (AllDriversLastMonthUnapprovedReimbursementsClone | filter:searchforunapprove).length == 0">
                                        <td colspan="5" class="table-nodata">No Unapproved Mileage</td>
                                    </tr>
                                </tbody>
                            </table>
                            <!-- ng-show = "IsVisibleUpdatebtn" -->
                            <!-- ng-show="searchbartrueforunapprove" -->
                            <div ng-if="lengthforunapprovebtndisable > 30">
                                <dir-pagination-controls max-size="5" direction-links="true" boundary-links="true" auto-hide="false" responsive="true" class="pull-right"></dir-pagination-controls>
                            </div>
                        </div>
                        <div excel-export="true" ng-if="lengthforunapprovebtndisable > 0" export-data="exportUpapprovedate" file-name="{{fileNameforunapprove}}"
                        />
                        <button class="btn btn-secondary float-right" ng-show="displayUnapprovedBtn" ng-click="unapproveReimbursementsofDriver();"
                            ng-if="lengthforunapprovebtndisable > 0">Submit</button>
                    </div>
                </div>
            </div>
        </section>

        <reimbursements-dialog-directive modal-Open="modalshowforapproved(status)" callback-fn="loadpageformodal(Id)" model="reimbursementDialog"
            export-data="exportReimList"></reimbursements-dialog-directive>
        <manager-dialog-directive model="managerDialog" export-data="exportManagerList"></manager-dialog-directive>
        <apex:include pageName="EMC_Common_footer" />
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular.min.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/Chart.min.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular-chart.min.js')}"></script>
        <script>
            Visualforce.remoting.timeout = 120000;
            $(function () {
                $('.numinputedit').on('input', function () {
                    this.value = this.value
                        .replace(/[^\d.]/g, '')             // numbers and decimals only
                        .replace(/(^[\d]{7})[\d]/g, '$1')   // not more than 4 digits at the beginning
                        .replace(/(\..*)\./g, '$1')         // decimal cant exist more than once
                        .replace(/(\.[\d]{2})./g, '$1');    // not more than 2 digits after decimal
                });
            });
        </script>
    </body>
</apex:page>