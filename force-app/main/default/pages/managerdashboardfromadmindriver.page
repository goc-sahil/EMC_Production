<apex:page showHeader="false" title="Manager Dashboard" sidebar="false" controller="ManagerDashboardFromAdminController"
    action="{!getRedirected}">
    <html lang="en">

    <head>
        <apex:include pageName="EMC_Common_Head" />

        <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.EmcCSS, 'emc-design/assets/css/CustomStyle.css')}" />
        <apex:include pageName="EMC_Common_Scripts" />
        <script src="{!URLFOR($Resource.modelJs)}"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        <style>
            a {
                cursor: pointer;
            }

            #example_filter {
                position: absolute;
                right: -88px !important;
                top: 0px !important;
            }

            .process-msg {
                float: none !important;
            }
        </style>
        <script type="text/javascript">
            var app = angular.module('managerdashboardAdminDriverModule', ['ui.bootstrap', 'angularUtils.directives.dirPagination', 'chart.js']);

            app.directive('manageradminReimbursementsDialogDirective', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '=',
                            data: "&exportData",
                            someCtrlFn: '&callbackFn',
                            modalformsg: '&modalOpen'
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                if (newValue == true) {
                                    //scope.init()
                                    scope.callfn('');
                                }
                                else {
                                    scope.IsAllChecked = false;
                                    scope.IsAllCheckedFlag = false;
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                }
                            });

                            scope.showData = []
                            scope.total = 0;
                            scope.totalvariablerate = 0;
                            scope.currentPage = 1;
                            scope.lastIndex = 0;
                            scope.totalRecords;
                            scope.reverse = false;
                            scope.maxPage = 0;
                            scope.selecteddid = '';
                            scope.selectedmileageidlist = [];
                            scope.selectedrejectedmileageidlist = [];
                            scope.selectednotapprovemileageidlist = [];
                            scope.displayBtn = false;
                            scope.IsAllChecked = false;
                            scope.IsAllCheckedFlag = false;
                            scope.checkAllShowApprove = false;
                            scope.checkAllShowFlag = false;
                            scope.allVariableAmount = 0;
                            scope.alltotalMileage = 0;
                            scope.search = "";
                            //scope.itemPerPage = 8;
                            scope.searchedArray = [];
                            //AI-000417 --> Starts
                            scope.pageSizeOptions = ['10', '15', '20', '100'];

                            scope.itemPerPage = scope.pageSizeOptions[1];
                            scope.itemPerPageV = parseInt(scope.itemPerPage);
                            scope.pageSizeChanged = function () {
                                scope.itemPerPageV = parseInt(scope.itemPerPage);
                                scope.init()
                                let lockdatecount = 0;
                                let count = 0;
                                let _showL = scope.model.mileageList.length;
                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false, isChecked: true });
                                let _approved = $filter("filter")(scope.showData, { isLockDate: false, isSelected: true });
                                let _pending = $filter("filter")(scope.showData, { isLockDate: false, isChecked: false, isSelected: false });
                                angular.forEach(scope.model.mileageList, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });
                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                    scope.IsAllEnable = false;
                                }
                                else {
                                    if (_showL === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                        //scope.displayBtn = true;
                                    }
                                    //scope.displayBtn = false;
                                    scope.IsAllEnable = true;
                                }
                            }

                            scope.init = function () {
                                scope.showData = [];
                                scope.total = 0.0;
                                scope.IsAllEnable = false;
                                scope.totalvariablerate = 0.0;
                                scope.maxPage = 0;
                                scope.totalRecords = scope.model.mileageList.length;
                                scope.model.mileageList
                                let tl = 0;
                                let tv = 0;
                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPageV)
                                scope.totalRecords
                                for (var i = 0; i < scope.itemPerPageV; i++) {
                                    scope.currentPage = 1;
                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                        scope.showData.push(scope.model.mileageList[i])
                                    }
                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                            }
                            scope.next = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                let tl = 0;
                                let tv = 0;
                                var count = 0;
                                let lockdatecount = 0;

                                for (var i = scope.lastIndex; i < lstInd + scope.itemPerPageV; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    scope.lastIndex = i + 1;
                                }

                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                let _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var mileageLen = scope.showData.length;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });

                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                }
                                else {
                                    if (mileageLen === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                        //scope.displayBtn = true;
                                    }
                                }

                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage++;
                            }
                            scope.previous = function () {
                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                let tl = 0;
                                let tv = 0;
                                let lockdatecount = 0;
                                var count = 0;
                                var lstInd = scope.lastIndex;
                                for (var i = scope.lastIndex - (scope.itemPerPageV * 2); i < lstInd - scope.itemPerPageV; i++) {
                                    let isSearch = scope.searchedArray.length > 0 ? true : false
                                    if (isSearch) {
                                        if (scope.searchedArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.searchedArray[i].mileage);
                                            tv = tv + parseFloat(scope.searchedArray[i].variableamount);
                                            scope.showData.push(scope.searchedArray[i])
                                        }
                                    } else {
                                        if (scope.model.mileageList[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);
                                            scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                            tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                    scope.lastIndex = i + 1;
                                }

                                let _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                let _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var mileageLen = scope.showData.length;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected || item.isChecked) {
                                        count++;
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });

                                if (lockdatecount === 0) {
                                    if (count === 0) {
                                        scope.displayBtn = false;
                                    }
                                    else {
                                        scope.displayBtn = true;
                                    }
                                }
                                else {
                                    if (mileageLen === lockdatecount) {
                                        scope.displayBtn = false;
                                    } else {
                                        if (_flagged.length > 0 || _approved.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                        //   scope.displayBtn = true;
                                    }
                                }

                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);
                                scope.currentPage--;
                            }
                            scope.sortKey = 'tripdate';
                            scope.sort = function (keyName) {
                                scope.reverse = (scope.sortKey === keyName) ? !scope.reverse : false;
                                scope.sortKey = keyName;

                                if (keyName === 'mileage' || keyName === 'variableamount') {

                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = (a[keyName] == null) ? '' : parseInt(a[keyName]),
                                            nameB = (b[keyName] == null) ? '' : parseInt(b[keyName]);

                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return valuscope.model.mileageList=e (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'originname' || keyName === 'destinationname') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = (a[keyName] == null) ? '' : a[keyName].toLowerCase(),
                                            nameB = (b[keyName] == null) ? '' : b[keyName].toLowerCase()
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }
                                if (keyName === 'tripdate' || keyName === 'submitteddate') {
                                    scope.model.mileageList.sort(function (a, b) {
                                        var nameA = (a[keyName] == null) ? '' : new Date(a[keyName].toLowerCase()),
                                            nameB = (b[keyName] == null) ? '' : new Date(b[keyName].toLowerCase())
                                        if (scope.reverse) {
                                            if (nameA < nameB) //sort string ascending
                                                return -1
                                            if (nameA > nameB)
                                                return 1
                                            return 0 //default return value (no sorting)
                                        } else {
                                            if (nameA < nameB) //sort string ascending
                                                return 1
                                            if (nameA > nameB)
                                                return -1
                                            return 0 //default return value (no sorting)
                                        }
                                    })
                                }

                                scope.showData = [];
                                scope.total = 0;
                                scope.totalvariablerate = 0;
                                var lstInd = scope.lastIndex;
                                let tl = 0;
                                let tv = 0;
                                for (var i = scope.lastIndex - scope.itemPerPageV; i < lstInd; i++) {

                                    if (scope.model.mileageList[i]) {
                                        /*scope.total = scope.total + parseInt(scope.model.mileageList[i].mileage);
                                        scope.totalvariablerate = scope.totalvariablerate + parseInt(scope.model.mileageList[i].variableamount);*/
                                        tl = tl + parseFloat(scope.model.mileageList[i].mileage);
                                        tv = tv + parseFloat(scope.model.mileageList[i].variableamount);
                                        scope.showData.push(scope.model.mileageList[i])
                                    }

                                    scope.lastIndex = i + 1;
                                }
                                scope.total = tl.toFixed(2);
                                scope.totalvariablerate = tv.toFixed(2);

                            }
                            scope.updatePagination = function () {
                                if (scope.search.length > 0) {
                                    scope.itemPerPageV = scope.itemPerPageV;

                                    var filteredArray = scope.model.mileageList.filter(function (number) {
                                        if (number.originname != '' && number.originname != null && number.originname != undefined && number.destinationname != '' && number.destinationname != null && number.destinationname != undefined) {

                                            return number.originname.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1 || number.destinationname.toLowerCase().indexOf(scope.search.toLowerCase()) !== -1;
                                        }
                                        return number.originname, number.destinationname;
                                    });

                                    scope.searchedArray = filteredArray;
                                    scope.showData = [];
                                    scope.total = 0.0;
                                    scope.totalvariablerate = 0.0;
                                    scope.maxPage = 0;
                                    scope.totalRecords = filteredArray.length;

                                    let tl = 0;
                                    let tv = 0;
                                    scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPageV)
                                    scope.totalRecords
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        scope.currentPage = 1;
                                        if (filteredArray[i]) {
                                            /*scope.total = scope.total + parseFloat(scope.model.mileageList[i].mileage);*/
                                            tl = tl + parseFloat(filteredArray[i].mileage);
                                            tv = tv + parseFloat(filteredArray[i].variableamount);
                                            /*scope.totalvariablerate = scope.totalvariablerate + parseFloat(scope.model.mileageList[i].variableamount);*/
                                            scope.showData.push(filteredArray[i])
                                        }
                                        scope.lastIndex = i + 1;
                                    }
                                    if (scope.showData.length == 0) {
                                        scope.displayDownloadBtn = false;
                                    }
                                    else {
                                        scope.displayDownloadBtn = true;
                                    }
                                    scope.total = tl.toFixed(2);
                                    scope.totalvariablerate = tv.toFixed(2);


                                } else {
                                    scope.itemPerPageV = scope.itemPerPageV;
                                    scope.init();
                                    scope.searchedArray.length = 0;
                                    scope.displayDownloadBtn = true;
                                }


                            }

                            //AI-000417 --> Ends
                            scope.refreshpage = function (approvedmileageid) {
                                scope.someCtrlFn({ Id: approvedmileageid });
                            }

                            scope.searchbarformodal = false;

                            scope.callfn = function (flagstatus) {
                                if (flagstatus == "") {
                                    scope.init();
                                }
                                scope.allVariableAmount = 0;
                                scope.alltotalMileage = 0;
                                scope.model.mileageList

                                let approvedcount = 0, flagcount = 0, chkcount = 0, lockdatecount = 0;

                                if (scope.showData.length == 0) {
                                    scope.checkAllShowApprove = false;
                                    scope.checkAllShowFlag = false;
                                    scope.displayBtn = false;
                                    scope.displayDownloadBtn = false;
                                }
                                if (scope.showData.length > 0) {
                                    scope.displayBtn = false;
                                    scope.displayDownloadBtn = true;
                                    if (scope.model.mileageList.length > scope.itemPerPageV)
                                        scope.searchbarformodal = true;
                                    else
                                        scope.searchbarformodal = false;

                                    scope.alltotalMileage = 0;
                                    scope.allVariableAmount = 0;
                                    let tv = 0;
                                    let tm = 0;
                                    angular.forEach(scope.model.mileageList, function (item) {
                                        /*scope.alltotalMileage = scope.alltotalMileage + parseInt(item.mileage);
                                        scope.allVariableAmount = scope.allVariableAmount + parseInt(item.variableamount);*/
                                        tm = tm + parseFloat(item.mileage);
                                        scope.alltotalMileage = tm.toFixed(2);
                                        tv = tv + parseFloat(item.variableamount);
                                        scope.allVariableAmount = tv.toFixed(2);

                                        if (item.isLockDate === true) {
                                            lockdatecount++;
                                        }

                                        if ((item.status != 'None' && item.status != '') && item.mileage >= 0) {
                                            chkcount++;
                                            scope.checkAllShowApprove = true;
                                            scope.checkAllShowFlag = true;
                                            if (item.isSelected) {
                                                approvedcount++;
                                            } else if (item.isChecked) {
                                                flagcount++;
                                            }
                                        }
                                    });
                                    if (chkcount == 0 && approvedcount == 0) {
                                        scope.checkAllShowApprove = false;
                                    }
                                    else {
                                        if (chkcount == approvedcount) {
                                            scope.IsAllChecked = true;
                                            scope.IsAllCheckedFlag = false;
                                        }
                                    }
                                    if (chkcount == 0 && flagcount == 0) {
                                        scope.checkAllShowFlag = false;
                                    }
                                    else {
                                        if (chkcount == flagcount) {
                                            scope.IsAllCheckedFlag = true;
                                            scope.IsAllChecked = false;
                                        }
                                    }
                                    // if (flagcount == 0 && approvedcount == 0)
                                    //     scope.displayBtn = false;
                                    // else
                                    //     scope.displayBtn = true;

                                    if (lockdatecount == 0) {
                                        scope.IsAllEnable = false;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                        // if (approvedcount != 0 || flagcount != 0) {
                                        //     scope.displayBtn = true;
                                        // }
                                        // else {
                                        //     scope.displayBtn = false;
                                        // }
                                    }
                                    else {
                                        scope.displayBtn = false;
                                        scope.IsAllEnable = true;
                                        scope.checkAllShowApprove = true;
                                        scope.checkAllShowFlag = true;
                                    }
                                }
                                var checktrues = $filter("filter")(scope.showData, { isChecked: true });
                                var selectedtrues = $filter("filter")(scope.showData, { isSelected: true });
                                var _flagged = $filter("filter")(scope.showData, { isLockDate: false , isChecked: true});
                                var _approved = $filter("filter")(scope.showData, {isLockDate: false, isSelected:true});
                                var pendingReq = $filter("filter")(scope.showData, { isLockDate: false , isChecked: false , isSelected: false});
                                var mileageLen = scope.model.mileageList.length;
                                if (checktrues.length > 0 || selectedtrues.length > 0) {
                                    if (lockdatecount > 0) {
                                        if (lockdatecount === mileageLen) {
                                            scope.displayBtn = false;
                                        } else {
                                            if (_flagged.length > 0 || _approved.length > 0) {
                                                scope.displayBtn = true;
                                            } else {
                                                scope.displayBtn = false;
                                            }
                                            // if(pendingReq.length > 0){
                                            //     scope.displayBtn = false;
                                            // }else{
                                            //     scope.displayBtn = true;
                                            // }
                                        }
                                    } else {
                                        scope.displayBtn = true;
                                    }
                                }
                                if (flagstatus != '') {
                                    scope.modalformsg({ status: flagstatus });
                                }
                            }

                            scope.CheckUncheckAll = function () {
                                // scope.showData = [];
                                if (scope.IsAllChecked == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;

                                scope.selectedmileageidlist = [];
                                angular.forEach(scope.model.mileageList, function (item) {
                                    item.isSelected = scope.IsAllChecked;
                                    scope.selectedmileageidlist.push(item.id);
                                    if (item.isChecked) {
                                        item.isChecked = !item.isChecked;
                                        if (scope.IsAllCheckedFlag) {
                                            scope.IsAllCheckedFlag = false;
                                        }
                                    }
                                });
                                if (scope.currentPage == 1) {
                                    scope.showData = [];
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        if (scope.model.mileageList[i]) {
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                }else{
                                    angular.forEach(scope.showData, function (item) {
                                        item.isSelected = scope.IsAllChecked;
                                        if (item.isChecked) {
                                            item.isChecked = !item.isChecked;
                                            if (scope.IsAllCheckedFlag) {
                                                scope.IsAllCheckedFlag = false;
                                            }
                                        }
                                    });
                                }
                                // for (var i = 0; i < scope.itemPerPageV; i++) {
                                //     scope.currentPage = 1;
                                //     if (scope.model.mileageList[i]) {
                                //         scope.showData.push(scope.model.mileageList[i])
                                //     }
                                //     scope.lastIndex = i + 1;
                                // }

                            }
                            scope.CheckUncheckHeader = function (bool, milId) {
                                scope.selecteddid = '';
                                scope.selectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                var lockdatecount = 0;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isSelected) {
                                        perpagecount++;
                                        scope.selectedmileageidlist.push(item.id);
                                        scope.selecteddid = item.driverid;
                                        if (item.isChecked) {
                                            item.isChecked = !item.isChecked;
                                        }
                                    }
                                    if (item.isUnapprove) {
                                        scope.selectednotapprovemileageidlist.push(item.id);
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });

                                angular.forEach(scope.model.mileageList, function (em) {
                                    em.isSelected = (em.id == milId) ? bool : em.isSelected;
                                    em.isChecked = (em.id == milId && em.isSelected == true) ? false : em.isChecked;
                                    if (em.isSelected) {
                                        count++;
                                    }
                                });

                                if (total == perpagecount && (total != 0 && perpagecount != 0)) {
                                    scope.model.mileageList = scope.showData;
                                    scope.IsAllChecked = true;
                                    scope.IsAllCheckedFlag = false;
                                }
                                else {
                                    if (total == count && (total != 0 && count != 0)) {
                                        scope.IsAllChecked = true;
                                        scope.IsAllCheckedFlag = false;
                                    } else {
                                        scope.IsAllChecked = false;
                                        scope.IsAllCheckedFlag = false;
                                    }
                                }

                                var trues = $filter("filter")(scope.showData, { isChecked: true });
                                var pReq = $filter("filter")(scope.showData, { isLockDate: false, isChecked: true});
                                var pSelect = $filter("filter")(scope.showData, {  isLockDate: false, isSelected: true});
                                scope.chkselectcount = trues.length;
                                if (perpagecount == 0 && scope.chkselectcount == 0){
                                    scope.displayBtn = false;
                                }
                                else{
                                    if (lockdatecount > 0) {
                                        if (pSelect.length > 0 || pReq.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                    } else {
                                        scope.displayBtn = true;
                                    }
                                }

                            }
                            scope.CheckUncheckAllForFlag = function () {
                                //scope.showData = [];
                                if (scope.IsAllCheckedFlag == true)
                                    scope.displayBtn = true;
                                else
                                    scope.displayBtn = false;
                                scope.selectedrejectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                angular.forEach(scope.model.mileageList, function (item) {
                                    item.isChecked = scope.IsAllCheckedFlag;
                                    scope.selectedrejectedmileageidlist.push(item.id);
                                    if (item.isSelected) {
                                        item.isSelected = !item.isSelected;
                                        if (scope.IsAllChecked) {
                                            scope.IsAllChecked = false;
                                        }
                                    }
                                });
                                if (scope.currentPage == 1) {
                                    scope.showData = [];
                                    for (var i = 0; i < scope.itemPerPageV; i++) {
                                        if (scope.model.mileageList[i]) {
                                            scope.showData.push(scope.model.mileageList[i])
                                        }
                                    }
                                }else{
                                    angular.forEach(scope.showData, function (item) {
                                        item.isChecked = scope.IsAllCheckedFlag;
                                        if (item.isSelected) {
                                            item.isSelected = !item.isSelected;
                                            if (scope.IsAllChecked) {
                                                scope.IsAllChecked = false;
                                            }
                                        }
                                    });
                                }
                                // for (var i = 0; i < scope.itemPerPageV; i++) {
                                //     scope.currentPage = 1;
                                //     if (scope.model.mileageList[i]) {
                                //         scope.showData.push(scope.model.mileageList[i])
                                //     }
                                //     scope.lastIndex = i + 1;
                                // }
                            };

                            scope.CheckUncheckHeaderForFlag = function (boolval, mId) {
                                scope.selecteddid = '';
                                scope.selectedrejectedmileageidlist = [];
                                scope.selectednotapprovemileageidlist = [];
                                var total = scope.model.mileageList.length;
                                var count = 0;
                                var perpagecount = 0;
                                var lockdatecount = 0;
                                angular.forEach(scope.showData, function (item) {
                                    if (item.isChecked) {
                                        perpagecount++;
                                        scope.selecteddid = item.driverid;
                                        scope.selectedmileageid = item.id;
                                        scope.selectedrejectedmileageidlist.push(item.id);
                                        if (item.isSelected) {
                                            item.isSelected = !item.isSelected;
                                        }
                                    }
                                    if (item.isUnapprove) {
                                        perpagecount++;
                                        scope.selectednotapprovemileageidlist.push(item.mileage);
                                    }
                                    if (item.isLockDate) {
                                        lockdatecount++;
                                    }
                                });

                                angular.forEach(scope.model.mileageList, function (em) {
                                    em.isChecked = (em.id == mId) ? boolval : em.isChecked;
                                    em.isSelected = (em.id == mId && em.isSelected === true) ? false : em.isSelected;
                                    if (em.isChecked) {
                                            count++;
                                    }
                                });
                                 
                                if (total == perpagecount && (total != 0 && perpagecount != 0)) {
                                    scope.model.mileageList = scope.showData;
                                    scope.IsAllCheckedFlag = true;
                                    scope.IsAllChecked = false;
                                }
                                else {
                                    if (total == count && (total != 0 && count != 0)) {
                                        scope.IsAllCheckedFlag = true;
                                        scope.IsAllChecked = false;
                                    } else {
                                        scope.IsAllCheckedFlag = false;
                                        scope.IsAllChecked = false;
                                    }
                                }

                                var trues = $filter("filter")(scope.showData, { isSelected: true });
                                var pReq = $filter("filter")(scope.showData, { isLockDate: false, isChecked: true});
                                var pSelect = $filter("filter")(scope.showData, {  isLockDate: false, isSelected: true});
                                scope.chkselectcount = trues.length;
                                if (perpagecount == 0 && scope.chkselectcount == 0){
                                    scope.displayBtn = false;
                                }
                                else{
                                    if (lockdatecount > 0) {
                                        if (pSelect.length > 0 || pReq.length > 0) {
                                            scope.displayBtn = true;
                                        } else {
                                            scope.displayBtn = false;
                                        }
                                    } else {
                                        scope.displayBtn = true;
                                    }
                                }
                            };

                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;
                                    scope.search = "";
                                    scope.searchedArray.length = 0;
                                });
                            });

                            $('input[type=search]').on('search', function () {
                                scope.search = "";
                                scope.searchedArray.length = 0;
                            });

                            scope.onClickManagerDashboard = function () {
                                $('#spinner').show();
                                scope.model.mileageList
                                scope.updateformileagelist = [];

                                var arr = [];
                                if (scope.IsAllChecked || scope.IsAllCheckedFlag) {
                                    arr = scope.model.mileageList;
                                } else {
                                    arr = scope.showData;
                                }
                                angular.forEach(arr, function (item) {
                                    if (item.isChecked == true || item.isSelected == true) {
                                        item.isUnapprove = false;
                                        scope.updateformileagelist.push(item.id);
                                    }
                                    if (item.isChecked == false && item.isSelected == false) {
                                        item.isUnapprove = true;
                                        scope.updateformileagelist.push(item);
                                    }
                                });
                                var truecheck = $filter("filter")(arr, { isChecked: true });
                                scope.chkcount = truecheck.length;

                                var trueselect = $filter("filter")(arr, { isSelected: true });
                                scope.selectcount = trueselect.length;

                                var trueunapprove = $filter("filter")(arr, { isUnapprove: true });
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ManagerDashboardFromAdminController.approveMileages}', JSON.stringify(truecheck), JSON.stringify(trueselect), JSON.stringify(trueunapprove), scope.model.name, scope.model.emailOfEmployee,
                                    function (result, event) {

                                        if (event.status && result == 'success') {

                                            var tempArray = JSON.parse(JSON.stringify(scope.model.mileageList));
                                            if (tempArray.length !== scope.updateformileagelist.length) {
                                                tempArray.forEach(function (item) {
                                                    scope.updateformileagelist.forEach(function (ui) {
                                                        if (item.id == ui) {
                                                            let index = scope.model.mileageList.findIndex(x => x.id === ui);
                                                            scope.model.mileageList.splice(index, 1);
                                                        }
                                                    })
                                                })
                                            } else {
                                                scope.model.mileageList = [];
                                            }

                                            var flagstatus = '';
                                            if (scope.selectedmileageidlist.length == 0 && scope.selectedrejectedmileageidlist.length == 0) {
                                                $('#spinner').hide();
                                                toastr.success('This Mileage has already approved/flagged.');
                                            }
                                            if (scope.selectcount > 0 && scope.selectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'true';
                                                scope.refreshpage(scope.selectedmileageidlist);
                                                scope.selectedmileageidlist = [];
                                            }
                                            if (scope.chkcount > 0 && scope.selectedrejectedmileageidlist.length > 0) {
                                                flagstatus = flagstatus + 'false';
                                                scope.refreshpage(scope.selectedrejectedmileageidlist);
                                                scope.selectedrejectedmileageidlist = [];
                                            }
                                            scope.callfn(flagstatus);
                                        }
                                    });
                            };

                        },
                        //AI-000417 -->
                        template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog"aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="modal-dialog modal-xl modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><h4 ng-model="month">{{model.name}}</h4><div class="col-md-6 ml-45"><span>Trips per page : </span><select class="form-control numberSelect" name="recordsPerPage" ng-model="itemPerPage" ng-options="page for page in pageSizeOptions" ng-change="pageSizeChanged()"></select></div><div class="modal-divider" ></div><div class="table-responsive" ><div id="example_filter" class="dataTables_filter pull-right d-block"><div class="input-group w-85" ><i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i><input class="form-control py-2 border-right-0 border" type="search" ng-model="search" ng-change="updatePagination()" placeholder="Search..." aria-controls="example" id="example-search-input" /></div></div><table id="driver-dashbord-month-model" class="table table-striped dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><thead><tr><th ng-click="sort(\'tripdate\')">Trip Date<span ng-show="sortKey == \'tripdate\'" class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}"></span></th><th ng-click="sort(\'originname\')">Origin<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'originname\'"></span></th><th ng-click="sort(\'destinationname\')">Dest.<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'destinationname\'"></span></th><th ng-click="sort(\'submitteddate\')">Submitted<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'submitteddate\'"></span></th><th ng-click="sort(\'mileage\')">Mileage<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'mileage\'"></span></th><th ng-click="sort(\'variableamount\')">Amount<span class="sort-icon pull-right" ng-class="{\'fa fa-chevron-up\':reverse,\'fa fa-chevron-down\':!reverse}" ng-show="sortKey == \'variableamount\'"></span></th><th class="w-rem"><button class="btn btn-primary">Approve <input type="checkbox" ng-click="CheckUncheckAll()" ng-model="IsAllChecked" ng-show="checkAllShowApprove" ng-disabled="IsAllEnable"/></button></th><th class="w-rem"><button class="btn btn-third">Flag </span><input type="checkbox" ng-show="checkAllShowFlag" ng-click="CheckUncheckAllForFlag()" ng-model="IsAllCheckedFlag" ng-disabled="IsAllEnable"></button></th></tr></thead><tbody class="table-a-link"><tr ng-repeat="mil in showData|itemsPerPage:itemPerPage|filter:search" ><td ng-model="mil.tripdate">{{ mil.tripdate}}</td><td ng-model="mil.originname">{{ mil.originname}}</td><td ng-model="mil.destinationname">{{ mil.destinationname }}</td><td ng-model="mil.submitteddate">{{ mil.submitteddate }}</td><td ng-model="mil.mileage" id="modalmileageid">{{ mil.mileage }}</td><td id="modalvariableid" ng-model="mil.variableamount">${{ mil.variableamount | number:2}}</td><td ng-model="mil.status"><div ng-model="mil.status"  ng-if="mil.status ==\'Approved\' && mil.mileage > \'0\'"></div><div class="pull-right mr-13" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isSelected" class="myteamcheck1" ng-click="CheckUncheckHeader(mil.isSelected, mil.id);" ng-disabled="mil.isLockDate"></div></td><td ng-model="mil.status"><div  ng-model="mil.status" ng-if="mil.mileage > \'0\'"></div><div class="pull-right mr-13" ng-if="mil.mileage > \'0\'"><input type="checkbox" ng-model="mil.isChecked"  class="flagcheck" ng-click="CheckUncheckHeaderForFlag(mil.isChecked, mil.id);" ng-disabled="mil.isLockDate"></div></td></tr><tr ng-if="showData.length == 0"><td colspan="8" class="table-nodata">No Mileage Available</td></tr></tbody><tfoot ng-if="displayDownloadBtn"><tr><th scope="row">Total</th><th colspan="3"> </th><th>{{total}} / {{alltotalMileage}}</th><th>${{totalvariablerate}} / ${{allVariableAmount}}</th><th colspan="2"></th></tr></tfoot></table></div></div><div class="modal-footer"><div class="col-md-6" ng-if="displayDownloadBtn">Page {{currentPage}} of {{maxPage}}</div><div class="col-md-6"><ul ng-if="displayDownloadBtn" class="pagination float-right paginationformodal"><li class="page-item " ng-class="{\'disable-pagination\':currentPage === 1}"><a class="page-link" ng-click="previous()">Previous</a></li><li class="page-item"><a class="page-link" >{{currentPage}}</a></li><li class="page-item" ng-class="{\'disable-pagination\':currentPage === maxPage}"><a class="page-link" ng-click="next()" href="#">Next</a></li></ul><div class="paginationformodaldownloadbutton"><div excel-export="true" export-data="data()" ng-show="displayDownloadBtn" file-name="{{model.fileName}}"/><button class="btn btn-secondary float-right" ng-click="onClickManagerDashboard();" ng-show="displayBtn">Submit</button></div></div></div></div></div></div>'
                    };
                }
            ]);
            app.controller('ManagerDashboardFromAdminDriverController', ['$scope', '$modal', '$filter',
                function ($scope, $modal, $filter) {
                    var url_string = $(location).attr("href");
                    var url = new URL(url_string);
                    console.log("URL->", url);
                    $scope.managerid = url.searchParams.get("managerid");
                    $scope.accid = url.searchParams.get("accid");
                    $scope.adminid = url.searchParams.get("id");
                    $scope.showteam = url.searchParams.get("showteam");
                    $scope.admindriver = false;
                    $scope.admindriver = url.searchParams.get("admindriver");
                    if ($scope.admindriver == undefined || $scope.admindriver == '') {
                        $scope.admindriver = false;
                    }
                    $scope.endProcess = false;
                    $scope.modalOpen = false;
                    $scope.displayApprovebtn = false;
                    $scope.adminname = '{!nameofEmployee}';
                    $scope.approvalTopMsg = '{!($Label.mileageApprovalTopMsg)}';
                    $scope.approvalBottomMsg = '{!($Label.mileageApprovalBottomMsg)}';
                    $scope.PLMarketing = '{!($Label.PL_Marketing)}';
                    $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                    $scope.fileName = $scope.adminname + '\'s MyTeam Records ' + $scope.FromDate;
                    $scope.fileName1 = $scope.adminname + '\'s Unapproved Records ' + $scope.FromDate;
                    $scope.currentPage = 1;
                    $scope.isUnapproveMileageTab = false;
                    $scope.isTeamTab = true;
                    $scope.checkboxObj = { IsAllCheckedForApprove: false, IsAllCheckedForUnapprove: false }

                    //Fill My Team's Mileage Table
                    $scope.AllDriversLastMonthReimbursements = {!AllDriversLastMonthReimbursements
                };
            $scope.myTeamReimbusement = [];

            //Fill Unapprove Tab Table
            $scope.AllDriversLastMonthUnapprovedReimbursementsclone = {!AllDriversLastMonthUnapprovedReimbursementsclone};
            $scope.unApprovedReimbusement = [];

            var url_locate = "/app/managerdashboardfromadmindriver?managerid=" + $scope.managerid + "&accid=" + $scope.accid + "&id=" + $scope.adminid + "&showteam=" + "false" + "&admindriver=" + $scope.admindriver;
            var url_locate_showTeam = "/app/managerdashboardfromadmindriver?managerid=" + $scope.managerid + "&accid=" + $scope.accid + "&id=" + $scope.adminid + "&showteam=" + "true" + "&admindriver=" + $scope.admindriver;
            var batchId = sessionStorage.getItem("Batch-Id");

            this.setOptions = function () {
                toastr.options.positionClass = "toast-bottom-right";
                toastr.options.closeButton = true;
                toastr.options.progressBar = true;
            };
            this.setOptions();
            this.clear = function () {
                toastr.clear();
            };
            //On My Team's Tab Click
            $scope.TeamTabClick = function () {
                location.assign(url_locate);
                $('#name').trigger("click")
                $scope.checkboxObj.IsAllCheckedForUnapprove = false;

                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursements, function (item) {
                    item.isSelected = false;
                });
                $scope.isUnapproveMileageTab = false;
                $scope.isTeamTab = true;
            }
            //On Unapprove Tab Click
            $scope.unapproveTabClick = function () {
                $scope.currentPage = 1;
                $('#nameforunapprove').trigger("click");
                $scope.checkboxObj.IsAllCheckedForApprove = false;
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    item.isSelected = false;
                    item.isLockDate = false;
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    if (item.totalMileages > 0.00 && item.status == 'Approved')
                        $scope.displayApprovebtn = false;
                    else
                        $scope.displayApprovebtn = true;
                    $scope.displayEmailReminder = true;
                });
                if (batchId != null) {
                    var c = 0;
                    angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                        if (item.reimbursementApproval === true) {
                            c++;
                        }
                    });
                    if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone.length === c) {
                        if ($scope.checkAllShowForUnApprove) {
                            $scope.checkAllShowForUnApprove = false;
                        }
                    }
                }
                $scope.isUnapproveMileageTab = true;
                $scope.isTeamTab = false;
            }
            $scope.showTeamTabClick = function () {

                location.assign(url_locate_showTeam);
            }
            function removeDumplicateValue(myArray) {
                var newArray = [];
                angular.forEach(myArray, function (value, key) {
                    var exists = false;
                    angular.forEach(newArray, function (val2, key) {
                        if (angular.equals(value, val2)) { exists = true };
                    });
                    if (exists == false && value != "") {
                        newArray.push(value);
                    }
                });
                return newArray;
            }


            $scope.apexCallStatus = function () {
                var reimCount = 0;
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ManagerDashboardFromAdminController.CheckBatchStatus}', batchId,
                    function (result, event) {
                        console.log("Batch Id", batchId);
                        if (event.status && result != null && result != '') {
                            if (result === 'Completed') {
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.UpdatedReimList}', $scope.managerid, $scope.accid, $scope.showteam,
                                    function (result, event) {
                                        if (event.status && result != null && result != '') {
                                            $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g, "\""));
                                            console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                            angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                                                if (item.totalMileages > '0.00' && item.status === 'Pending') { /* EMC - 168 : Approve checkbox still present on dashboard */
                                                    reimCount++;
                                                }
                                            });
                                            $scope.displayApprovebtn = (reimCount > 0) ? true : false;

                                            // angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                                            //     if (item.totalMileages > '0.00' && item.status == 'Approved')
                                            //         $scope.displayApprovebtn = false;
                                            //     else
                                            //         $scope.displayApprovebtn = true;
                                            // });
                                        }
                                        $scope.$apply();
                                    }, { escape: false }
                                )
                            } else if (result.includes("Failed=")) {
                                var errResult = result.split("=");
                                toastr.error(errResult[1]);
                            } else {
                                setTimeout(function () {
                                    $scope.apexCallStatus();
                                }, 5000);
                            }
                            console.log("CheckBatchStatus", result);
                        }
                        else {
                            toastr.error('Some error has occur');
                        }
                        $scope.$apply();
                    }, { escape: false }
                );

            }

            if (window.performance.navigation.type == 1) {
                console.info("This page is reloaded");
            } else {
                console.info("This page is not reloaded");
                if (batchId != null) {
                    $scope.apexCallStatus();
                }

            }

            //select all
            $scope.loadpage = function () {
                $scope.displayApprovebtn = false;
                if ($scope.showteam === "false") {
                    if (!document.querySelector("#unapprove-pills").className.includes("active")) {
                        angular.element(document.querySelector("#myteam-pills")).addClass("active");
                    }
                }
                else {
                    if (!document.querySelector("#unapprove-pills").className.includes("active")) {
                        angular.element(document.querySelector("#showteam-pills")).addClass("active");
                    }
                }
                $scope.checkAllShowForMyTeam = false;
                $scope.checkAllShowForUnApprove = false;
                $scope.lengthformyteam = $scope.AllDriversLastMonthReimbursements.length;
                $scope.lengthforUnapprove = $scope.AllDriversLastMonthUnapprovedReimbursementsclone.length;
                var count = 0;
                var countforunapprove = 0;
                var countforbtn = 0;
                $scope.exportData = [];
                var countapprove = 0;/* "Status",item.status,*/
                $scope.exportData.push(["Month", "Name",  "Approved Mileages", "Submited Mileage","Rejected Mileage", "Approved By", "Approval Date", "Lock Date/Report Run", "Managers Name", "Managers Email"]);
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item, key) {
                    $scope.exportData.push([item.month, item.name.replace(/\\'/g, "\'"), item.approvedMileages, item.totalMileages,item.rejectedMileages,item.mileageApproval, item.approvedDate, item.lockDate, item.managerName, item.managerEmail]);
                    if (item.totalMileages > '0.00' && item.status === 'Pending') { /* EMC - 168 : Approve checkbox still present on dashboard */
                        count++;
                        $scope.displayApprovebtn = true;
                    }
                    if (item.isSelected)
                        countforbtn++;
                    if (item.status == 'Approved')
                        countapprove++;
                });

                var approvechecklen = 0;

                if (countapprove != 0)
                    approvechecklen = $scope.lengthformyteam - countapprove;
                if (countforbtn == 0)
                    $scope.displayTeamRecordBtn = false;
                else
                    $scope.displayTeamRecordBtn = true;


                if (count == 0 && approvechecklen == 0)
                    $scope.checkAllShowForMyTeam = false;
                else
                    $scope.checkAllShowForMyTeam = true;

                $scope.checkAllShowForMyTeam

                var countforbtnUnapprove = 0;
                $scope.exportUpapprovedate = [];/* "Status", item.status,*/
                $scope.exportUpapprovedate.push(["Month", "Name","Unapproved Mileage","Approved Mileage", "Approved By", "Approval Date", "Lock Date/Report Run", "Managers Name", "Managers Email"]);
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    $scope.exportUpapprovedate.push([item.month, item.name.replace(/\\'/g, "\'"), item.totalMileages, item.approvedMileages, item.mileageApproval, item.approvedDate, item.lockDate, item.managerName, item.managerEmail]);
                    if (item.totalMileages > '0.00') {
                        countforunapprove++;
                    }
                    if (item.isSelected)
                        countforbtnUnapprove++;
                });
                if (countforbtnUnapprove == 0)
                    $scope.displayUnapprovedBtn = false;
                else
                    $scope.displayUnapprovedBtn = true;

                if (countforunapprove > 0) {
                    $scope.checkAllShowForUnApprove = true;
                }
            }
            $scope.loadpage();
            $scope.displayTeamRecordBtn = false;
            $scope.displayUnapprovedBtn = false;

            $scope.myTeamCheckUncheckAll = function (IsAllChecked) {
                $scope.checkboxObj.IsAllCheckedForApprove = IsAllChecked;
                if ($scope.checkboxObj.IsAllCheckedForApprove == true)
                    $scope.displayTeamRecordBtn = true;
                else
                    $scope.displayTeamRecordBtn = false;

                angular.forEach($scope.AllDriversLastMonthReimbursements, function (LastMonthReimbursement) {
                    LastMonthReimbursement.isSelected = $scope.checkboxObj.IsAllCheckedForApprove;
                });
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if (item.isSelected && item.status != 'Approved') {
                        $scope.myTeamReimbusement.push(item.id);

                    }

                });
                $scope.myTeamReimbusement = removeDumplicateValue($scope.myTeamReimbusement);
            }

            $scope.CheckUncheckHeader = function (status, elem) {
                $scope.myTeamReimbusement = [];
                var total = $('.myteamcheck').length;
                var count = 0;
                var countstatus = 0;
                var myteamlen = $scope.AllDriversLastMonthReimbursements.length;
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if (item.totalMileages > '0.00') {
                        if (item.isSelected && item.status != 'Approved') {
                            $scope.myTeamReimbusement.push(item.id);
                            count++;
                        }
                    }
                    if (item.status == 'Approved')
                        countstatus++;
                });
                if (countstatus != 0)
                    myteamlen = myteamlen - countstatus;
                if (myteamlen == count || total == count) {
                    $scope.checkboxObj.IsAllCheckedForApprove = true;
                }
                else {
                    $scope.checkboxObj.IsAllCheckedForApprove = false;
                }

                if (count > 0) {
                    $scope.displayTeamRecordBtn = true;
                    $scope.myTeamReimbusement = removeDumplicateValue($scope.myTeamReimbusement);
                    if (elem.isSelected == false) {
                        angular.forEach($scope.myTeamReimbusement, function (item) {
                            if (angular.equals(item, elem.id)) {
                                $scope.myTeamReimbusement = _.without($scope.myTeamReimbusement, elem.id);
                            }
                        });
                    }
                }
                else {
                    $scope.displayTeamRecordBtn = false;
                }
            }

            $scope.unApprovedCheckUncheckAll = function (check) {
                var count = 0;
                $scope.checkboxObj.IsAllCheckedForUnapprove = check
                if ($scope.checkboxObj.IsAllCheckedForUnapprove == true) {
                    $scope.displayUnapprovedBtn = true;
                } else {
                    $scope.displayUnapprovedBtn = false;
                }
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (j) {
                    j.isSelected = $scope.checkboxObj.IsAllCheckedForUnapprove;
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    if (item.isSelected) {
                        if (item.reimbursementIdList.length > 0) {
                            angular.forEach(item.reimbursementIdList, function (reimb) {
                                $scope.unApprovedReimbusement.push(reimb);
                            });

                        }
                        count++;
                    }
                });
                $scope.unApprovedReimbusement = removeDumplicateValue($scope.unApprovedReimbusement);
            }
            //Select any one reim
            $scope.CheckUncheckHeaderForUnapprove = function (elem) {
                var total = $('.upapprovecheck').length;
                var count = 0;
                var unapprovelen = $scope.AllDriversLastMonthUnapprovedReimbursementsclone.length;
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    if (item.totalMileages > '0.00') {
                        if (item.isSelected) {
                            count++;
                        }
                    }
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    if (item.isSelected) {
                        if (item.reimbursementIdList.length > 0) {
                            angular.forEach(item.reimbursementIdList, function (reimb) {
                                $scope.unApprovedReimbusement.push(reimb);
                            });

                        }

                    }
                });
                if (unapprovelen == count || total == count)
                    $scope.checkboxObj.IsAllCheckedForUnapprove = true;
                else
                    $scope.checkboxObj.IsAllCheckedForUnapprove = false;

                if (count > 0) {
                    $scope.displayUnapprovedBtn = true;
                    $scope.unApprovedReimbusement = removeDumplicateValue($scope.unApprovedReimbusement);
                    if (elem.isSelected == false) {

                        angular.forEach($scope.unApprovedReimbusement, function (item) {
                            if (angular.equals(item, elem.reimbursementid)) {

                                $scope.unApprovedReimbusement = _.without($scope.unApprovedReimbusement, elem.reimbursementid);
                            }
                        });
                    }
                }
                else {
                    $scope.displayUnapprovedBtn = false;
                }
            }

            $scope.infoMessage = function () {
                $scope.$modalInstance = $modal.open({
                    template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                    scope: $scope
                });
            }

            $scope.CheckStatus = function (runTime) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ManagerDashboardFromAdminController.CheckBatchStatus}', runTime.Id,
                    function (result, event) {
                        console.log("CheckBatchStatus", result);
                        sessionStorage.setItem("Batch-Id", runTime.Id);
                        console.log("Batch Id", runTime.Id);
                        if (event.status && result != null && result != '') {
                            if (result === 'Completed') {
                                $('#spinner').show();
                                $scope.reimbursements = [];
                                for (var i = 0; i < $scope.AllDriversLastMonthReimbursements.length; i++) {
                                    if ($scope.AllDriversLastMonthReimbursements[i].isSelected == true) {
                                        $scope.reimbursements.push($scope.AllDriversLastMonthReimbursements[i]);
                                    }
                                }
                                $scope.msg = '';
                                $scope.msg = 'Employee mileage has been approved.';
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.UpdatedReimList}', $scope.managerid, $scope.accid, $scope.showteam,
                                    function (result, event) {
                                        if (event.status && result != null && result != '') {
                                            if ($scope.myTeamReimbusement.length > 0) {
                                                $scope.myTeamReimbusement.splice(0, $scope.myTeamReimbusement.length);
                                            }
                                            toastr.success($scope.msg);
                                            $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g, "\""));
                                            console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                            $scope.AllDriversLastMonthUnapprovedReimbursementsclone = JSON.parse(result[1].replace(/(&quot\;)/g, "\""));
                                            $scope.endProcess = false;
                                            if ($scope.checkboxObj.IsAllCheckedForApprove) {
                                                $scope.checkboxObj.IsAllCheckedForApprove = false;
                                            }
                                            setTimeout(() => {
                                                location.reload();
                                            }, 3000);
                                            $scope.$apply();
                                        }
                                    })
                                $('#spinner').hide();

                                if ($scope.modalOpen === true) {
                                    $scope.$modalInstance.close();
                                }
                            }
                            else if (result.includes("Failed=")) {
                                var errResult = result.split("=");
                                toastr.error(errResult[1]);
                            }
                            else {
                                setTimeout(function () {
                                    $scope.CheckStatus(runTime);
                                }, 5000);
                            }
                        }
                        else {
                            toastr.error('Some error has occur');
                        }
                        $scope.$apply();
                    }, { escape: false }
                );

            }

            $scope.unapproveCheckStatus = function (runTime) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ManagerDashboardFromAdminController.CheckBatchStatus}', runTime.Id,
                    function (result, event) {
                        console.log("CheckBatchStatus", result);
                        sessionStorage.setItem("Batch-Id", runTime.Id);
                        console.log("Batch Id", runTime.Id);
                        if (event.status && result != null && result != '') {
                            if (result === 'Completed') {
                                $('#spinner').show();
                                $scope.unapprovereimbursements = [];
                                if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone != undefined) {
                                    for (var i = 0; i < $scope.AllDriversLastMonthUnapprovedReimbursementsclone.length; i++) {
                                        if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone[i].isSelected == true) {
                                            $scope.unapprovereimbursements.push($scope.AllDriversLastMonthUnapprovedReimbursementsclone[i]);
                                            for (var i = 0; i < $scope.AllDriversLastMonthUnapprovedReimbursementsclone.length; i++) {
                                                if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone[i].isSelected == true) {
                                                    $scope.unapprovereimbursements.push($scope.AllDriversLastMonthUnapprovedReimbursementsclone[i]);
                                                }
                                            }
                                        }
                                    }
                                }
                                $scope.msg = '';
                                $scope.msg = 'Employee mileage has been approved.';
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.UpdatedReimList}', $scope.managerid, $scope.accid, $scope.showteam,
                                    function (result, event) {
                                        if (event.status && result != null && result != '') {
                                            toastr.success($scope.msg);
                                            // $scope.$modalInstance = $modal.open({
                                            //     template: '<button type="button" ng-click="cancel()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{msg}}</h4></div><div class="check-in-info"><p></p></div><div class="check-submit"><button type="button" ng-click="ok()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                                            //     scope: $scope
                                            // });
                                            $scope.AllDriversLastMonthReimbursements = JSON.parse(result[0].replace(/(&quot\;)/g, "\""));
                                            console.log("approveReimbursements Result 2", $scope.AllDriversLastMonthReimbursements);
                                            $scope.AllDriversLastMonthUnapprovedReimbursementsclone = JSON.parse(result[1].replace(/(&quot\;)/g, "\""));
                                            $scope.endProcess = false;
                                            if ($scope.checkboxObj.IsAllCheckedForUnapprove) {
                                                $scope.checkboxObj.IsAllCheckedForUnapprove = false;
                                            }
                                            setTimeout(() => {
                                                location.reload();
                                            }, 2000);
                                            $scope.$apply();
                                        }
                                    })
                                $('#spinner').hide();

                                if ($scope.modalOpen === true) {
                                    $scope.$modalInstance.close();
                                }
                            }
                            else if (result.includes("Failed=")) {
                                var errResult = result.split("=");
                                toastr.error(errResult[1]);
                            }
                            else {
                                setTimeout(function () {
                                    $scope.unapproveCheckStatus(runTime);
                                }, 5000);
                            }
                        }
                        else {
                            toastr.error('Some error has occur');
                        }
                        $scope.$apply();
                    }, { escape: false }
                );

            }

            $scope.approveReimbursementsofManager = function (element) {
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.approveReimbursements}', JSON.stringify($scope.myTeamReimbusement), $scope.managerid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            $('#spinner').hide();
                            console.log("approveReimbursements Result", result);
                            $scope.modalOpen = true;
                            $scope.$modalInstance = $modal.open({
                                template: '<button type="button" ng-click="cancelProcess()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                                scope: $scope
                            });
                            $scope.CheckStatus(result);
                            $scope.$apply();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                    },
                    { escape: false }
                );
            };

            $scope.unapproveReimbursementsofManager = function (element) {
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.approveMileagesClone}', JSON.stringify($scope.unApprovedReimbusement), $scope.managerid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            $('#spinner').hide();
                            console.log("approveMileagesClone Result", result);
                            $scope.modalOpen = true;
                            $scope.$modalInstance = $modal.open({
                                template: '<button type="button" ng-click="cancelProcess()" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body text-center"><div class="checkhead"><h4>Updating Reimbursements</h4></div><div class="check-in-info process-msg"><p>Mileage approvals are processing</p></div></div>',
                                scope: $scope
                            });
                            $scope.unapproveCheckStatus(result);
                            $scope.$apply();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something went wrong');
                        }
                    },
                    { escape: false }
                );
            };

            $scope.cancel = function () {
                $scope.$modalInstance.dismiss('cancel');
            };

            $scope.cancelProcess = function () {
                var c = 0;
                $scope.endProcess = true;
                $scope.modalOpen = false;
                $scope.displayUnapprovedBtn = false;
                $scope.displayTeamRecordBtn = false;
                $scope.$modalInstance.dismiss('cancel');
                angular.forEach($scope.AllDriversLastMonthReimbursements, function (item) {
                    if (item.isSelected && item.status != 'Approved') {
                        item.reimbursementApproval = true;
                    }
                });
                angular.forEach($scope.AllDriversLastMonthUnapprovedReimbursementsclone, function (item) {
                    if (item.isSelected && item.status != 'Approved') {
                        item.reimbursementApproval = true;
                        c++;
                    }
                });
                if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone.length === c) {
                    if ($scope.checkAllShowForUnApprove) {
                        $scope.checkAllShowForUnApprove = false;
                    }
                }
                if ($scope.checkboxObj.IsAllCheckedForApprove) {
                    $scope.checkAllShowForMyTeam = false;
                }
            }

            $scope.ok = function () {
                var totalmyteam = $('.myteamcheck').length;
                if (totalmyteam == 0) {
                    $scope.displayTeamRecordBtn = false;
                }
                $scope.$modalInstance.close();
            };
            $scope.okforUnapprove = function () {
                var totalforunapprove = $('.upapprovecheck').length;
                if (totalforunapprove == 0) {
                    $scope.displayUnapprovedBtn = false;
                }
                if ($scope.AllDriversLastMonthUnapprovedReimbursementsclone.length < 11) {
                    $scope.isUnapprovedTab = false;
                    $scope.$apply(function () {
                        $scope.currentPage = 1;
                    });
                    $scope.isUnapprovedTab = true;
                }
                $scope.$modalInstance.close();
                location.reload();
            };

            $scope.reimbursementDialog = new MileagesofReimbursements(false);
            $scope.timeConversion = function (number) {
                var time;
                if (number < 0) {
                    time = number;
                } else {
                    var hours = Math.floor(number / 60);
                    var min = number % 60;
                    hours = hours < 10 ? "0" + hours : hours;
                    min = min < 10 ? "0" + min : min;
                    time = hours + ':' + min;
                }

                //var time = (hours < 12) ? (hours-12 + ':' + min +' PM') : (hours + ':' + min +' AM');
                return time;
            }
            $scope.openmodalForunapprovedata = function (name, driverid, mileagesList, emailOfEmployee) {
                $('#spinner').show();
                $scope.driverid = driverid;
                $scope.name = name;
                $scope.mileagesList = mileagesList;
                $scope.emailOfEmployee = '{!emailofEmployee}';
                $scope.clickedMonth = "";
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ManagerDashboardFromAdminController.getUnapprovedMileages}', JSON.stringify($scope.mileagesList), $scope.accid, 
                    function (result, event) {
                        if (event.status && result != null) {
                            var resultdata = result.replace(/\\/g, '');
                            var mileageList1 = JSON.parse(resultdata);
                            angular.forEach(mileageList1.mileagesList, function (item) {
                                item.drivingtime = $scope.timeConversion(item.drivingtime);
                                item.staytime = $scope.timeConversion(item.staytime);
                                item.totaltime = $scope.timeConversion(item.totaltime);
                                if (item.lockdate != null) {
                                    item.isLockDate = true;
                                    if (item.status === "Approved") {
                                        item.isSelected = true;
                                    }
                                    else if (item.status === "Rejected") {
                                        item.isChecked = true;
                                    }
                                    else if (item.status === "Not Approved Yet") {
                                        item.isSelected = false;
                                        item.isChecked = false;
                                    }
                                }
                                else if (item.lockdate === null) {
                                    item.isLockDate = false;
                                    if (item.status === "Approved") {
                                        item.isSelected = true;
                                    }
                                    else if (item.status === "Rejected") {
                                        item.isChecked = true;
                                    }
                                    else if (item.status === "Not Approved Yet") {
                                        item.isSelected = false;
                                        item.isChecked = false;
                                    }
                                }
                            });
                            $scope.exportReimList = [];
                            $scope.exportReimList.push(["Contact Email", "Tracing Style", "Day Of Week", "Trip Date", "Start Time", "End Time", "Trip Origin", "Trip Destination", "Mileage", "Status", "Date Submitted", "Maint/Tires", "Fuel Rate", "Variable Rate", "Amount", "Drive Time", "Stay Time", "Total Time", "Notes", "Tags"]);
                            angular.forEach(mileageList1.mileagesList, function (item, key) {
                                $scope.exportReimList.push([item.emailaddress, item.tracingstyle, item.dayofweek, item.tripdate, item.starttime, item.endtime, item.originname, item.destinationname, item.mileage, item.status, item.submitteddate, item.maintTyre, item.fuelRate, item.variablerate, (parseInt(item.variableamount)).toFixed(2), item.drivingtime, item.staytime, item.totaltime, item.notes, item.tag]);
                            });
                            $scope.fileName = $scope.name + '\'s Mileage ' + $scope.FromDate;
                            $scope.reimbursementDialog.open($scope.fileName, $scope.name, mileageList1.mileagesList, $scope.emailOfEmployee);
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            };

            $scope.modalshowforapproved = function (status) {
                $('#spinner').hide();
                if (status == 'true')
                    $scope.flagstatus = 'Approved';
                if (status == 'false')
                    $scope.flagstatus = 'Rejected';
                if (status == 'truefalse')
                    $scope.flagstatus = 'Approved and Rejected';

                $scope.$apply();

                $scope.$modalInstance = $modal.open({
                    template: '<button type="button" ng-click="okforapprove()" class="childcls close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body text-center"><div class="checkhead"><h4>{{approvalTopMsg}}</h4></div><div class="check-in-info"><p>{{approvalBottomMsg}}</p></div><div class="check-submit"><button type="button" ng-click="okforapprove()" class="btn btn-primary" data-dismiss="modal">OK</button></div></div>',
                    scope: $scope
                });
            }
            $scope.okforapprove = function () {
                $('#spinner').show();
                $scope.$modalInstance.close();

                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.getAllDriversLastMonthUpdatedUnapprovedReimburseClone1}', $scope.managerid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            var data = result.replace(/\\'/g, "\'")
                            $scope.AllDriversLastMonthUnapprovedReimbursementsclone = JSON.parse(data);
                            $('#spinner').hide();
                            $scope.$apply();
                            $scope.loadpage();
                        }
                    },
                    { escape: false }
                );
                $scope.reimbursementDialog.close();
            };

            $scope.loadpageformodal = function (id) {
                $scope.pageSize = 30
                $scope.exportReimList;
                $scope.flagefordownload = false;
                var expoArray = [];
                $scope.removeElement = { isRemove: false, index: -1 };
                var removeIndex = 0;
                $scope.mileageslistfordownload = [];
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ManagerDashboardFromAdminController.getAllDriversLastMonthUpdatedReimbursements}', $scope.managerid, $scope.accid, $scope.showteam,
                    function (result, event) {
                        if (event.status && result != null) {
                            var data = result.replace(/\\'/g, "\'")
                            $scope.AllDriversLastMonthReimbursements = JSON.parse(data);
                            $scope.$apply();
                            $scope.loadpage();
                        }
                    },
                    { escape: false }
                );
            }


            $scope.viewchartdata = new viewChartDialogModel(false);
            $scope.viewchart = function () {

                $scope.data = [];
                $scope.data = JSON.parse('{!ChartData}');
                $scope.viewchartdata.open($scope.data);
            }
            $('#spinner').hide();
    }]);
        </script>
    </head>

    <body ng-app="managerdashboardAdminDriverModule" ng-controller="ManagerDashboardFromAdminDriverController" ng-cloak="true">
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="!admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver=true">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    <ul class="navbar-nav">
                                        <li class="nav-item active">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver={{admindriver}}">Dashboard</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver={{admindriver}}">Drivers</a>
                                        </li>
                                        <li class="nav-item" ng-if="accid == PLMarketing">
                                            <a class="nav-link text-white" ng-show="!admindriver"  href="/app/ManageNotification?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Communications</a>
                                            <a class="nav-link text-white" ng-show="admindriver"  href="/app/ManageNotification?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver={{admindriver}}">Communications</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?managerid={{managerid}}&accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver={{admindriver}}">Reports</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?managerid={{managerid}}&accid={{accid}}&showteam={{showteam}}&id={{adminid}}&admindriver={{admindriver}}">My Details</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
        <section class="container-fluid">
            <div class="font-s my-3 rt">
                <a ng-show="!admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}">
                    <i class="fas fa-chevron-left"></i> Back</a>
                <a ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{adminid}}&showteam={{showteam}}&admindriver={{admindriver}}">
                    <i class="fas fa-chevron-left"></i> Back</a>
            </div>
            <div class="font-s my-3">
                <c:ViewChart />
            </div>
            <div class="report-link">
                <h3 class="mb-30 d-block">Team Reimbursement Summary</h3>
            </div>
            <div class="my-3 admin-roster-tab-section">
                <ul class="nav nav-pills">
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" data-toggle="pill" id="myteam-pills" href="#pills-manager-dashbord-team-record" ng-click="TeamTabClick()">My Team's Mileage</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" data-toggle="pill" id="unapprove-pills" href="#pills-manager-dashbord-unapproved-record" ng-click="unapproveTabClick()">Unapproved Mileage</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" data-toggle="pill" id="showteam-pills" data-target="#pills--manager-dashbord-showteam" ng-click="showTeamTabClick()">Company</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="pills-manager-dashbord-team-record">
                        <div class="py-4 table-responsive" ng-if="isTeamTab">
                            <search-bar-directive></search-bar-directive>
                            <managerteam-table-directive></managerteam-table-directive>
                        </div>
                        <div excel-export="true" export-data="exportData" ng-if="lengthformyteam > 0" file-name="{{fileName}}" />
                        <button class="btn btn-secondary float-right" ng-show="displayTeamRecordBtn" ng-click="approveReimbursementsofManager();"
                            ng-if="lengthformyteam > 0">Submit</button>
                    </div>
                    <div class="tab-pane fade" id="pills-manager-dashbord-unapproved-record">
                        <div class="py-4 table-responsive" ng-if="isUnapproveMileageTab">
                            <searchbar-unapprove-directive></searchbar-unapprove-directive>
                            <manager-unapprovemileage-table-directive></manager-unapprovemileage-table-directive>
                        </div>
                        <div excel-export="true" ng-if="lengthforUnapprove > 0" export-data="exportUpapprovedate" file-name="{{fileName1}}" />
                        <button class="btn btn-secondary float-right" ng-show="displayUnapprovedBtn" ng-click="unapproveReimbursementsofManager();"
                            ng-if="lengthforUnapprove > 0">Submit</button>
                    </div>
                </div>
            </div>
        </section>
        <manageradmin-reimbursements-dialog-directive modal-Open="modalshowforapproved(status)" callback-fn="loadpageformodal(Id)"
            model="reimbursementDialog" export-data="exportReimList"></manageradmin-reimbursements-dialog-directive>
        <apex:include pageName="EMC_Common_footer" />
        <script>
            Visualforce.remoting.timeout = 120000;
        </script>

        <script src="{!URLFOR($Resource.DirectiveJS)}"></script>

        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular.min.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/Chart.min.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular-chart.min.js')}"></script>
    </body>

    </html>
</apex:page>