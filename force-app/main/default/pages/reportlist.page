<apex:page showHeader="false" title="My Reports" sidebar="false" controller="ReportListController" action="{!getRedirected}">

    <head>
        <apex:include pageName="EMC_Common_Head" />
        <apex:include pageName="EMC_Common_Scripts" />
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/angular-sanitize.js')}"></script>
        <script type="text/javascript" src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/js/select.js')}"></script>
        <link rel="stylesheet" href="{!URLFOR($Resource.EmcCSS,'emc-design/assets/css/select.css')}" />
        <link rel="stylesheet" href="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/css/select2.css')}" />
        <script src="{!URLFOR($Resource.modelJs)}"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>
        
        <style>
            a {
                cursor: pointer;
            }

            table tr td {
                border-top: none !important;
            }

            .select2 > .select2-choice.ui-select-match {
                /* Because of the inclusion of Bootstrap */
                height: 29px;
            }

            .selectize-control > .selectize-dropdown {
                top: 36px;
            }
            /* Some additional styling to demonstrate that append-to-body helps achieve the proper z-index layering. */
            .select-box {
            background: #fff;
            position: relative;
            z-index: 1;
            }

            .alert-info.positioned {
            margin-top: 1em;
            position: relative;
            z-index: 10000; /* The select2 dropdown has a z-index of 9999 */
            }

            .ui-select-search{
            font-size:16px !important;
            }            
            .selectize-control.single .selectize-input:after {
            display: contents !important;
            content: ' ';
            }

            .loading-text{
                position: fixed;
                top: 55%;
                left: 40%;
                right: 40%;
                z-index: 1000000;
                text-align: center;
                color: #fff;
            }

            .font-back-div{
                font-family: 'Proxima Nova Bold';
                color: #78bc42;
                font-size: 16px;
                cursor: pointer;
            }

            .font-back-div .fa-chevron-left{
                color: #78bc42 !important;
            }

            .custom-payPeriod {
                width: 300px !important;
            }

            .btn-primary:disabled {
                cursor: not-allowed !important;
            }
            .width-dp {
                width: 125% !important;
            }

            .modal-footer {
                padding: 0rem;
            }

            .ml-45 {
                position: absolute;
                top: 4px;
                margin-left: 30rem;
            }

            .mt-16 {
                margin-top: 16px !important;
            }

            .mr-302 {
                margin-right: 302px !important;
            }

            .mt-6 {
                margin-top: 6px !important;
            }

            .mt-3 {
                margin-top: 3px !important;
            }

            .mb-3 {
                margin-bottom: 3px !important;
            }

            .mb-6 {
                margin-bottom: 6px !important;
            }

            .ml-300 {
                margin-left: 300px !important;
            }

            .row-inline {
                display: flex;
                flex-wrap: wrap;
                width: 100%;
            }

            .main-input {
                width: 50% !important;
                margin: 0 auto;
            }

            .progress-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.4;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .progress {
                position: fixed;
                top: 56%;
                left: 21%;
                z-index: 1000000;
                width: 57%;
            }

            .spinner-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.8;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .spinner-load {
                position: fixed;
                top: 49%;
                left: 49%;
                z-index: 1000000;
            }

            .attendanceCheck {
                margin-top: 6px;
                float: right;
            }

            .pagination {
                display: inline-block;
                padding-left: 0;
                margin: 20px 0;
                border-radius: 4px;
            }

            .pagination>li {
                display: inline;
            }

            .pagination>li>a,
            .pagination>li>span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #78bc42;
                text-decoration: none;
                background-color: #fff;
                border: 1px solid #ddd;
            }

            .pagination>li:first-child>a,
            .pagination>li:first-child>span {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #777;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #fff;
                border-color: #ddd;
            }

            .pagination>.active>a,
            .pagination>.active>a:focus,
            .pagination>.active>a:hover,
            .pagination>.active>span,
            .pagination>.active>span:focus,
            .pagination>.active>span:hover {
                z-index: 3;
                color: #fff;
                cursor: default;
                background-color: #78bc42;
                border-color: #78bc42;
            }

            .disable-pagination {
                pointer-events: none;
            }

            .paginationformodal {
                margin: 0px 0 !important;
            }

            .piginationpages {
                color: #78bc42 !important;
            }

            .margin-center {
                margin: 0 auto;
            }

            .paginationformodal>a {
                color: #78bc42 !important;
            }

            .modal-backdrop.fade {
                opacity: 0.7 !important;
            }

            .modal-header {
                background-color: #78bc42;
                justify-content: center !important;
                padding: 0.5rem 0.5rem !important;
                border-top-left-radius: 0rem !important;
                border-top-right-radius: 0rem !important;
                box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            }

            .modal-heading {
                font-family: 'Proxima Nova Bold' !important;
                color: #ffffff !important;
            }

            .form-group-theme {
                margin-top: 23px;
            }

            .form-group-theme-md {
                margin-top: 0px;
                margin-bottom: 35px;
            }

            .fade:not(.show) {
                opacity: 1;
            }

            .inputLockdate {
                padding-left: 6rem !important;
            }

            .datepickerinput {
                padding-right: 3rem !important;
            }

            .modal-dialog {
                z-index: 1057;
            }

            .tagquestion1 {
                font-size: 12px !important;
                position: absolute;
                top: 1px;
            }

            .modal-body {
                padding: 1rem !important;
            }

            .close-lockdatebtn {
                margin: 0px !important;
            }

            .popup-close-btn {
                margin: 0;
            }

            .submitBtn {
                box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            }

            .cancelbtn {
                margin-left: 8px !important;
                box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            }

            .popup-close-btn span {
                color: #79c03f !important;
                background: #ffffff !important;
            }

            .mb-20 {
                margin-bottom: 20px !important;
            }
        </style>
        <script type="text/javascript">
            var app = angular.module('reportModule', ['ui.bootstrap', 'angularUtils.directives.dirPagination', 'ngSanitize', 'ui.select']);


            var EditLockDateModel = function () {
                this.visible = false;
            };

            EditLockDateModel.prototype.open = function (reportid) {
                this.visible = true;
                this.reportId = reportid;
            };
            EditLockDateModel.prototype.close = function () {
                this.visible = false;
            };

            /* Model Directive For Deactivation Date*/
            app.directive('editLockDate', [function () {
                return {
                    restrict: 'E',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');

                        });

                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        scope.tripStatus = {!checkTripStatus                    
};
                    scope.ListAllReports = {!AllReports                
};
                scope.accid = url.searchParams.get("accid");
                scope.id = url.searchParams.get("id");
                scope.admindriver = false;
                scope.showteam = url.searchParams.get("showteam");
                scope.admindriver = url.searchParams.get("admindriver");
                if (scope.admindriver == undefined || scope.admindriver == '') {
                    scope.admindriver = false;
                }

                scope.updateLockDate = function () {
                    // scope.lockDate = $('#report-lockdatepicker').val();
                    scope.reportID = scope.model.reportId;
                    // angular.forEach(scope.ListAllReports, function (report) {
                    //     if (report.categoryName != undefined) {
                    //         report.currentReports.forEach((data) => {
                    //             if (data.reportId === scope.reportID) {
                    //                 data.mileageLockDate = scope.lockDate
                    //             }
                    //         })
                    //     }
                    // });
                    var url_locate = "/app/reportdetail?accid=" + scope.accid + "&id=" + scope.id + "&reportid=" + scope.reportID + "&showteam=" + scope.showteam + "&admindriver=" + "true";
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ReportListController.updateLockDate}', scope.accid, scope.id,
                        function (result, event) {
                            if (event.status) {
                                if (scope.tripStatus) {
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.ReportListController.ChangeTripStatus}', scope.accid,
                                        function (result, event) {
                                            if (event.status) {
                                                $('.lockdateModal').modal('hide');
                                                location.assign(url_locate);
                                            }
                                            else {
                                                toastr.error('Some error has occur while changing trip status');
                                            }
                                            scope.$apply();
                                        }, { escape: false }
                                    );
                                } else {
                                    $('.lockdateModal').modal('hide');
                                    location.assign(url_locate);
                                }
                            }
                            else {
                                $('.lockdateModal').modal('show');
                                toastr.error('Some error has occur');
                            }
                        });
                }



                element.on('shown.bs.modal', function () {
                    scope.$apply(function () {
                        scope.model.visible = true;
                    });
                });

                element.on('hidden.bs.modal', function () {
                    scope.$apply(function () {
                        scope.model.visible = false;
                    });
                });

            },
                template: '<div class="modal fade show lockdateModal" tabindex="-1" role="dialog"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn close-lockdatebtn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-header"><h5 class="modal-heading">Mileage Lock Date</h5></div><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme-md row justify-content-center text-center"><div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">Make sure your team has reviewed the details of each trip and the information is accurate. By generating your report you will lock the trips so they can not be edited.<br />Are you sure you want to generate the report?</div></div><div class="form-group  justify-content-center text-center"><button class="btn btn-primary submitBtn" ng-click="updateLockDate()">Submit</button><button type="button" class="btn btn-secondary cancelbtn" data-dismiss="modal">Cancel</button></div></form></div></div></div></div>'
                };
                            
            }]);


            /*Model For Export Report Send */

            // var StayTimeReportModel = function () {
            //     this.visible = false;
            // }

            // StayTimeReportModel.prototype.open = function () {
            //     this.visible = true;
            // }

            // StayTimeReportModel.prototype.close = function () {
            //     this.visible = false;
            // }
            // //AI-000150
            // app.directive('stayTimeReport', ['$filter',
            //     function ($filter) {
            //         return {
            //             restrict: 'E',
            //             scope: {
            //                 model: '='
            //             },
            //             link: function (scope, element, attributes) {
            //                 scope.$watch('model.visible', function (newValue) {
            //                     var modalElement = element.find('.modal');
            //                     modalElement.modal(newValue ? 'show' : 'hide');

            //                 });

            //                 var url_string = $(location).attr("href");
            //                 var url = new URL(url_string);
            //                 var contactData = [];
            //                 scope.accid = url.searchParams.get("accid");
            //                 scope.contactList = [];
            //                 scope.reimbursementList = [];
            //                 scope.nullOption = {};
            //                 scope.selectedReimbersment = '';
            //                 scope.selectedContact = '';
            //                 scope.nullOption = { Name: 'None', Id: '' };
            //                 // contactData = [scope.nullOption];
            //                 scope.reimbursementList = [scope.nullOption];
            //                 scope.selectContactFun = function (con) {
            //                     scope.selectedContact = con.Id;
            //                     Visualforce.remoting.Manager.invokeAction(
            //                         '{!$RemoteAction.ReportListController.reimbursementListModal}', scope.selectedContact,
            //                         function (result, event) {
            //                             scope.reimbursementList = result;
            //                             scope.reimbursementList.splice(0, 0, scope.nullOption);
            //                         });
            //                     //  console.log(scope.contactList);
            //                 }
            //                 scope.selectReimbersmentFun = function (reimburesment) {
            //                     scope.selectedReimbersment = '';
            //                     scope.selectedReimbersment = reimburesment.Id;
            //                 }
            //                 scope.reportExportToExcel = function () {
            //                     window.open('https://mburse--fullcopy.cs8.my.salesforce.com/apex/StaytimeReportExcel?id=' + scope.selectedReimbersment);
            //                 }

            //                 element.on('shown.bs.modal', function () {
            //                     scope.$apply(function () {
            //                         scope.model.visible = true;

            //                         Visualforce.remoting.Manager.invokeAction(
            //                             '{!$RemoteAction.ReportListController.contactListModal}', scope.accid,
            //                             function (result, event) {
            //                                 contactData = result;
            //                                 scope.contactList = contactData.map(function (obj) {
            //                                     obj['Name'] = obj['FirstName'] + ' ' + obj['LastName'];
            //                                     delete obj['FirstName'];
            //                                     delete obj['LastName'];
            //                                     return obj;
            //                                 });
            //                                 scope.contactList.splice(0, 0, scope.nullOption);
            //                             });

            //                     });
            //                 });

            //                 element.on('hidden.bs.modal', function () {
            //                     scope.$apply(function () {
            //                         scope.model.visible = false;
            //                         scope.selectedContact = '';

            //                     });
            //                 });

            //             },
            //             template: '<div class="modal fade show" tabindex="-1" role="dialog"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span> </button><div class="modal-header"><h5 class="modal-heading">Export Stay Time Report</h5></div><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row mb-20"> <label for="selectContact:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Contact: </label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><ui-select ng-model="selectedContact" style="font-size: 16px;" theme="selectize" title="Search contact" ng-change="selectContactFun(selectedContact)" ><ui-select-match placeholder="Search..." style="font-size: 16px;">{{$select.selected.Name}}</ui-select-match> <ui-select-choices repeat="contact in contactList | filter: $select.search" null-option="nullOption"> <span style="font-size: 16px;" ng-bind-html="contact.Name | highlight: $select.search"></span> </ui-select-choices> <ui-select-no-choice></ui-select-no-choice> </ui-select></div></div><div class="form-group-theme row mb-20"> <label for="selectReimbursement:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Reimbersments: </label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><ui-select ng-model="selectedReimbersment" style="font-size: 16px;" theme="selectize" title="Search reimbersment" ng-change="selectReimbersmentFun(selectedReimbersment)" ><ui-select-match placeholder="Search..." style="font-size: 16px;">{{$select.selected.Name}}</ui-select-match> <ui-select-choices repeat="reim in reimbursementList | filter: $select.search" null-option="nullOption"> <span style="font-size: 16px;" ng-bind-html="reim.Name | highlight: $select.search"></span> </ui-select-choices> <ui-select-no-choice> </ui-select-no-choice> </ui-select></div></div><div class="form-group  justify-content-center text-center"><button class="btn btn-primary" ng-click="reportExportToExcel()">Download</button><button type="button" class="btn btn-secondary cancelbtn" data-dismiss="modal">Cancel</button></div></form></div></div></div></div>'
            //         };

            //     }]);


            var EditMonthlyTaxReportModel = function () {
                this.visible = false;
            }

            EditMonthlyTaxReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditMonthlyTaxReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editMonthlyTaxReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });

                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.month = '{!($Label.Ermi_Tax_Report_month_picklist)}';
                            scope.empl = '{!($Label.Ermi_Tax_Report_employee_type_picklist)}';
                            scope.monthArr = [];
                            scope.empType = [];
                            scope.defaultOption = "Select Month";
                            scope.defaultEmpOption = "Select Employee Type";
                            scope.monthArr = scope.month.split(',');
                            scope.monthArr.splice(0, 0, scope.defaultOption);
                            scope.monthList = scope.monthArr[0];
                            scope.selectedMonth = scope.defaultOption;
                            scope.empType = scope.empl.split(',');
                            scope.empType.splice(0, 0, scope.defaultEmpOption);
                            scope.empTypeList = scope.empType[0];
                            scope.selectedempType = scope.defaultEmpOption;
                            scope.monthA = "";
                            scope.monthB = "";

                            function refreshModal() {
                                location.reload();
                            }

                            scope.onmonthChange = function (month) {
                                scope.selectedMonth = month;
                                if (scope.selectedMonth === 'Select Month'  || scope.selectedempType == 'Select Employee Type') {
                                    $('#downloadTaxReportBtn').prop('disabled', true);
                                }
                                else {
                                    $('#downloadTaxReportBtn').prop('disabled', false);
                                }
                            }

                            scope.onemployeeChange = function (el) {
                                scope.selectedempType = el;
                                scope.monthB = scope.selectedempType.length;
                                if ((scope.selectedMonth === 'Select Month' || "") && (scope.selectedempType == 'Select Employee Type' || "")) {
                                    $('#downloadTaxReportBtn').prop('disabled', true);
                                }
                                else {
                                    $('#downloadTaxReportBtn').prop('disabled', false);
                                }
                            }

                            scope.downloadTaxReport = function () {
                                //window_url = 'https://' + host + '/apex/TaxReportPage?month=' +  scope.selectedMonth + '&empType=' + scope.selectedempType;
                                window_url = 'https://' + host + '/app/TaxReportPage?month=' + scope.selectedMonth + '&empType=' + scope.selectedempType;

                                window.open(window_url, '_blank');
                                refreshModal();
                            }


                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in monthlyTaxModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Monthly Tax Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"> <label for="Month:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable">Month:<span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select month</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"> <select ng-model="monthList" ng-change="onmonthChange(monthList)" class="browser-default custom-select custom-select-xl width-dp"><option ng-repeat="date in monthArr" ng-selected="{{monthList == date}}" value="{{date}}">{{date}}</option> </select></div></div><div class="form-group-theme row-inline"> <label for="Employee:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable">Employee Type: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select employee type</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"> <select ng-model="empTypeList" ng-change="onemployeeChange(empTypeList)" class="browser-default custom-select custom-select-xl width-dp"><option ng-repeat="empltype in empType" ng-selected="{{empTypeList == empltype}}" value="{{empltype}}">{{empltype}}</option> </select></div></div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="downloadTaxReportBtn" class="btn btn-primary mt-3 mb-3" ng-click="downloadTaxReport()" disabled>Download <i class="fa fa-download"></i> </button></div></div></div></div></div>'
                    };

                }
            ]);

            // NetChex Time and Attendance Report
            var EditTimeReportModel = function () {
                this.visible = false;
            }

            EditTimeReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditTimeReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editTimeAttendanceReport', ['$filter', '$http',
                function ($filter, $http) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                // if (newValue == true) {

                                // }
                            });

                            var count = 0;
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.accid = url.searchParams.get("accid");
                            scope.FrampAcc = '{!($Label.FramptonConstruction)}';
                            scope.currentPage = 1;
                            scope.maxRecord = 25;
                            scope.maxPage = 0;
                            scope.showData = [];
                            scope.itemPerPage = 10;
                            scope.showList = false;
                            scope.reimburesmentDataList = []; 
                            scope.checkboxobj = {}
                            scope.totalRecords;
                            scope.maxPage;

                            function refreshModal() {
                                location.reload();
                            }

                            $('body').on('keydown', '#report-startdatepicker', function(e){
                                return false;
                            })

                            $('body').on('keydown', '#report-enddatepicker', function(e){
                                return false;
                            })

                            $('#report-enddatepicker, #report-startdatepicker').on('change', function () {
                                var reportstdateVal = $('#report-startdatepicker').val().trim();
                                var reportendateVal = $('#report-enddatepicker').val().trim();
                                var reportBtn = reportstdateVal.length == 0 || reportendateVal.length == 0;
                                if (reportBtn) {
                                    $('#requestReimBtn').prop('disabled', true);
                                }
                                else {
                                    $('#requestReimBtn').prop('disabled', false);
                                }
                            });

                            scope.backToFilter = function (){
                                scope.showList = false;
                                scope.checkboxobj.isCheckedAll = false;
                                $('#reportDownloadReimBtn').prop('disabled', true);
                            }

                            scope.requestList = function(){
                                    $('#spinner').show();
                                    let firstDate = $('#report-startdatepicker').val();
                                    let lastDate = $('#report-enddatepicker').val();
                                    var $dates = $('#report-startdatepicker, #report-enddatepicker').datepicker();
                                    Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.ErmiDriverList}', firstDate, lastDate, scope.accid,
                                    function (result, event) {
                                        if(result){
                                            scope.reimburesmentDataList = JSON.parse(result);
                                            if(scope.reimburesmentDataList.length != 0){
                                                scope.totalRecords = scope.reimburesmentDataList.length;
                                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                                angular.forEach(scope.reimburesmentDataList, function (obj) {
                                                    obj["isReimbChecked"] = false;
                                                });
                                                scope.showList = true;
                                                $('#spinner').hide();
                                            }else{
                                                $dates.datepicker('setDate', null);
                                                toastr.error("None of the driver has trips for your selected dates. Please change the dates");
                                                $('#spinner').hide();
                                            }
                                        }else{
                                            toastr.error("Please try again");
                                            $('#spinner').hide();
                                        }
                                        scope.$apply();
                                }, { escape: false }
                                );
                            }
                   
                            scope.showRecord = function (list) {
                                if (list) {
                                    scope.showData.push(list)
                                }
                                if (scope.currentPage === scope.maxPage) {
                                    count++;
                                }
                            }

                            scope.onPageChange = function (pageNum) {
                                if (scope.currentPage != scope.maxPage) {
                                    scope.showData = scope.showData.slice(-10)
                                }
                                else {
                                    scope.showData = scope.showData.slice(-count);
                                }


                                if (scope.checkboxobj != undefined) {
                                    scope.checkboxobj.isCheckedAll = false;
                                }

                                angular.forEach(scope.reimburesmentDataList, function (list) {
                                    list.isReimbChecked = false
                                });
                            }

                            scope.CheckUncheckForAllListReimbursement = function (CheckUncheckForAllListReimbursement) {
                                var allcount = 0;
                                scope.checkboxobj.isCheckedAll = CheckUncheckForAllListReimbursement;
                                scope.reimburesmentDataList.forEach(arr1 => {
                                    scope.showData.forEach(arr2 => {
                                        if (arr1.reimbId == arr2.reimbId) {
                                            arr1.isReimbChecked = scope.checkboxobj.isCheckedAll;
                                            if (arr1.isReimbChecked) {
                                                allcount++
                                            }
                                        } else {
                                            return;
                                        }
                                    });
                                });
                            
                                if (allcount != 0) {
                                    $('#reportDownloadReimBtn').prop('disabled', false);
                                }
                                else {
                                    $('#reportDownloadReimBtn').prop('disabled', true);
                                }
                            }

                            scope.CheckUncheckForAllReimbursement = function (CheckUncheckForAllReimbursement, reimblist) {
                                var chkcount = 0;
                                var total = scope.reimburesmentDataList.length;
                                angular.forEach(scope.reimburesmentDataList, function (list) {
                                    if (list.isReimbChecked) {
                                        chkcount++;
                                    }
                                })

                                let startDateReport = $('#report-startdatepicker').val().trim();
                                let endDateReport = $('#report-enddatepicker').val().trim();
                                var btnVal = startDateReport.length == 0 || endDateReport.length == 0;
                                if (total == chkcount) {
                                    scope.checkboxobj.isCheckedAll = true;
                                } else {
                                    scope.checkboxobj.isCheckedAll = false;
                                }
                                if (chkcount != 0) {
                                    if (!btnVal) {
                                        $('#reportDownloadReimBtn').prop('disabled', false);
                                    }
                                    else {
                                        $('#reportDownloadReimBtn').prop('disabled', true);
                                    }
                                } else {
                                    $('#reportDownloadReimBtn').prop('disabled', true);
                                }
                            }

                            scope.downloadReimbursement = function () {
                                var window_url;
                                scope.stDate = $('#report-startdatepicker').val();
                                scope.enDate = $('#report-enddatepicker').val();
                                angular.forEach(scope.reimburesmentDataList, function (reimObj) {
                                    if (reimObj.isReimbChecked === true) {
                                        // Job Costing Summary Report For Frampton Construction Account
                                        if (scope.accid === scope.FrampAcc) {
                                            window_url = 'https://' + host + '/app/JobCostingSummary?id=' + reimObj.reimbId + '&startDate=' + scope.stDate + '&endDate=' + scope.enDate;
                                        } else {
                                            window_url = 'https://' + host + '/app/TimeandSummaryReport?id=' + reimObj.reimbId + '&startDate=' + scope.stDate + '&endDate=' + scope.enDate;
                                        }

                                        window.open(window_url, '_blank');
                                    }
                                });
                                refreshModal();
                            }

                            scope.closeModal = function(){
                                refreshModal();
                            }

                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;
                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeModal()"><span aria-hidden="true">×</span></button><div class="modal-body"><h4>Contact List</h4><div class="modal-divider"></div><form name="signup" class="form"  ng-show="!showList"><div class="form-row"><div class="form-group-theme row-inline"><label for="startDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable startDate">Start Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" data-original-title="<b>Please select start date</b>"><i class="fa fa-question"></i></span></label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"><div class="input-group"><input id="report-startdatepicker" class="form-control rounded-0 reimbdatepicker" placeholder="Select Start Date" required  ng-model="selectedstartDate" autocomplete="off"><div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group-theme row-inline"><label for="endDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable endDate">End Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" data-original-title="<b>Please select end date</b>"><i class="fa fa-question"></i></span></label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"><div class="input-group"><input id="report-enddatepicker" class="form-control rounded-0 reimbdatepicker" placeholder="Select End Date" required ng-model="selectedendDate" autocomplete="off"><div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group-theme row-inline"><div class="col-md-7"><button id="requestReimBtn" class="btn btn-primary float-right mr-12" ng-click="requestList()" disabled>Submit</button></div></div></div></form><div class="table-responsive" ng-show="showList"><div class="font-back-div" ng-click="backToFilter()"><i class="fas fa-chevron-left"></i> Back</div><table id="driver-dashbord-month-model" class="table dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><tbody class="table-a-link"><tr><td ng-model="allList"><div class="input-group main-input"><div class="input-group-prepend"><div class="input-group-text"><input id="allreimbchecked" type="checkbox" ng-model="checkboxobj.isCheckedAll" class="attendanceCheck" ng-click="CheckUncheckForAllListReimbursement(checkboxobj.isCheckedAll)"></div></div><span class="form-control" ng-model="alllist">Select All</span></div></td></tr><tr dir-paginate="list in reimburesmentDataList|itemsPerPage:itemPerPage" current-page="currentPage" ng-model="list" ng-init="showRecord(list)"><td ng-model="list.name"><div class="input-group main-input"><div class="input-group-prepend"><div class="input-group-text"><input id="reimbchecked" type="checkbox" ng-model="list.isReimbChecked" class="attendanceCheck" ng-click="CheckUncheckForAllReimbursement(list.isReimbChecked,list)"></div></div><span class="form-control" ng-model="list.name">{{list.name}}</span></div></td></tr></tbody><tfoot><tr></tr></tfoot></table></div></div><div class="modal-footer" ng-show="showList"><div class="col-md-6"><dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" responsive="true" auto-hide="false" class="pull-left" on-page-change="onPageChange(newPageNumber)"></dir-pagination-controls></div><div class="col-md-6"><button id="reportDownloadReimBtn" class="btn btn-primary float-right mr-12" ng-click="downloadReimbursement()" disabled>Download <i class="fa fa-download"></i></button></div></div></div></div></div>'
                    };
            }]);

            // Variable Reimbursement Report --- Added 21 Feb 2023
            var EditVariableReimbursementModel = function () {
                this.visible = false;
            }

            EditVariableReimbursementModel.prototype.open = function () {
                this.visible = true;
            }

            EditVariableReimbursementModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editVariableReimbursementReport', ['$filter', '$http',
                function ($filter, $http) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });

                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.accid = url.searchParams.get("accid");
                            scope.dateObjArr = [];
                            scope.originalObjArr = [];
                            scope.defaultOption = "Select Pay Period";
                            scope.startDate = "";
                            scope.endDate = "";
                            scope.reimbursementDownload = true;

                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ReportListController.payPeriodDateList}', scope.accid,
                                        function (result, event) {
                                            if(result){
                                                scope.originalObjArr = result.split(',');
                                                scope.dateObjArr = scope.originalObjArr;
                                                scope.dateObjArr.splice(0, 0, scope.defaultOption);
                                                scope.variableReimbursement = scope.dateObjArr[0];
                                            }
                                            scope.$apply();
                                            console.log("Result", result)
                            });

                            function refreshModal() {
                                location.reload();
                            }

                            scope.onVariableReimbursementPayPeriodChange = function (period) {
                                if (period != "Select Pay Period") {
                                    scope.splitObj = period.split(' to ');
                                    scope.startDate = scope.splitObj[0];
                                    scope.endDate = scope.splitObj[1];
                                    scope.reimbursementDownload = false;
                                } else {
                                    scope.reimbursementDownload = true;
                                }
                            }

                            scope.downloadReimbursementReport = function () {
                                var window_url;
                                window_url = 'https://' + host + '/app/PayDateReport?id='+ scope.accid + '&startDate=' + scope.startDate + '&endDate=' + scope.endDate;
                                window.open(window_url, '_blank');
                                refreshModal();
                            }

                            scope.closeModal = function(){
                                refreshModal();
                            }

                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;
                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in reimbursementModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeModal()"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Bi-Weekly Payment Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"><label for="payRole:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable payRole">Pay Period: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"><select ng-model="variableReimbursement" ng-change="onVariableReimbursementPayPeriodChange(variableReimbursement)" class="browser-default custom-select custom-select-xl custom-payPeriod"><option ng-repeat="dateobj in dateObjArr" ng-selected="{{variableReimbursement == dateobj}}" value="{{dateobj}}">{{dateobj}}</option> </select></div></div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"><button id="downloadReimReportBtn" class="btn btn-primary float-right mt-3 mb-3" ng-click="downloadReimbursementReport()" ng-disabled="reimbursementDownload">Download <i class="fa fa-download"></i> </button></div></div></div></div></div>'
                    };
            }]);

            // Annual Tax Liability Report

            var EditTaxLiabilityReportModel = function(){
                this.visible = false;
            }

            EditTaxLiabilityReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditTaxLiabilityReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editTaxLiabilityReport', ['$filter', '$http',
                function ($filter, $http) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                // if (newValue == true) {

                                // }
                            });

                            var count = 0;
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.accid = url.searchParams.get("accid");
                            scope.currentPage = 1;
                            scope.maxRecord = 25;
                            scope.maxPage = 0;
                            scope.showData = [];
                            scope.itemPerPage = 10;
                            scope.showList = false;
                            scope.taxDataList = []; 
                            scope.checkboxobj = {}
                            scope.totalRecords;
                            scope.maxPage;
                            scope.year = [];
                            scope.defaultOption = {value: "Select Year"};
                            scope.accountYear = {!AccountYear}
                            console.log(scope.accountYear)
                            var maxYear = new Date().getFullYear();
                            var minYear = scope.accountYear;
                            //var minYear = new Date().getFullYear() - 2;

                            for(var i = minYear; i<=maxYear ; i++){
                                scope.year.push(i);
                            }
                            let finalyear = scope.year;
                            scope.year = [];
                            finalyear.map(function(item){
                                scope.year.push({
                                    value:item
                                })
                            });

                            scope.year.splice(0, 0, scope.defaultOption);
                            scope.selectedYear = scope.year[0].value;
                            function refreshModal() {
                                location.reload();
                            }

                            scope.showBtn = function(yt){
                                console.log(yt)
                                scope.selectedYear = yt;
                             }

                            scope.backToFilter = function (){
                                scope.showList = false;
                                scope.checkboxobj.isCheckedAll = false;
                                $('#taxDownloadReimBtn').prop('disabled', true);
                            }

                            scope.requestList = function(){
                                    $('#spinner').show();
                                    Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.taxLiabilityReport}', scope.accid,
                                    function (result, event) {
                                        if(result){
                                            console.log('Tax List', result)
                                            scope.taxDataList = JSON.parse(result);
                                            if(scope.taxDataList.length != 0){
                                                scope.totalRecords = scope.taxDataList.length;
                                                scope.maxPage = Math.ceil(scope.totalRecords / scope.itemPerPage)
                                                angular.forEach(scope.taxDataList, function (obj) {
                                                    obj["isReimbChecked"] = false;
                                                });
                                                scope.showList = true;
                                                $('#spinner').hide();
                                            }else{
                                                $('#spinner').hide();
                                            }
                                        }else{
                                            toastr.error("Please try again");
                                            $('#spinner').hide();
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );
                            }
                   
                            scope.showRecord = function (list) {
                                if (list) {
                                    scope.showData.push(list)
                                }
                                if (scope.currentPage === scope.maxPage) {
                                    count++;
                                }
                            }

                            scope.onPageChange = function (pageNum) {
                                if (scope.currentPage != scope.maxPage) {
                                    scope.showData = scope.showData.slice(-10)
                                }
                                else {
                                    scope.showData = scope.showData.slice(-count);
                                }


                                if (scope.checkboxobj != undefined) {
                                    scope.checkboxobj.isCheckedAll = false;
                                }

                                angular.forEach(scope.taxDataList, function (list) {
                                    list.isReimbChecked = false
                                });
                            }

                            scope.downloadToExcel = function (sheetData, excelfile) {
                                    function datenum(v, date1904) {
                                        if (date1904) v += 1462;
                                        var epoch = Date.parse(v);
                                        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                                    };

                                    function getSheet(sheetData, opts) {
                                        var ws = {};
                                        var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                                        for (var R = 0; R != sheetData.length; ++R) {
                                            for (var C = 0; C != sheetData[R].length; ++C) {
                                                if (range.s.r > R) range.s.r = R;
                                                if (range.s.c > C) range.s.c = C;
                                                if (range.e.r < R) range.e.r = R;
                                                if (range.e.c < C) range.e.c = C;
                                                var cell = { v: sheetData[R][C] };
                                                if (cell.v == null) continue;
                                                var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });

                                                if (typeof cell.v === 'number') cell.t = 'n';
                                                else if (typeof cell.v === 'boolean') cell.t = 'b';
                                                else if (cell.v instanceof Date) {
                                                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                                    cell.v = datenum(cell.v);
                                                }
                                                else cell.t = 's';
                                                ws[cell_ref] = cell;
                                            }
                                        }
                                        if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                        return ws;
                                    };

                                    function Workbook() {
                                        if (!(this instanceof Workbook)) return new Workbook();
                                        this.SheetNames = [];
                                        this.Sheets = {};
                                    }
                                    var wb = new Workbook(), ws = getSheet(sheetData);
                                    /* add worksheet to workbook */
                                    wb.SheetNames.push(excelfile);
                                    wb.Sheets[excelfile] = ws;
                                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                                    function s2ab(s) {
                                        var buf = new ArrayBuffer(s.length);
                                        var view = new Uint8Array(buf);
                                        for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                        return buf;
                                    }
                                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), excelfile + '.xlsx');
                            }

                            scope.CheckUncheckForAllListReimbursement = function (CheckUncheckForAllListReimbursement) {
                                var allcount = 0;
                                scope.checkboxobj.isCheckedAll = CheckUncheckForAllListReimbursement;
                                scope.taxDataList.forEach(arr1 => {
                                    scope.showData.forEach(arr2 => {
                                        if (arr1.reimbId == arr2.reimbId) {
                                            arr1.isReimbChecked = scope.checkboxobj.isCheckedAll;
                                            if (arr1.isReimbChecked) {
                                                allcount++
                                            }
                                        } else {
                                            return;
                                        }
                                    });
                                });
                            
                                if (allcount != 0) {
                                    $('#taxDownloadReimBtn').prop('disabled', false);
                                }
                                else {
                                    $('#taxDownloadReimBtn').prop('disabled', true);
                                }
                            }

                            scope.CheckUncheckForAllReimbursement = function (CheckUncheckForAllReimbursement, reimblist) {
                                var chkcount = 0;
                                var total = scope.taxDataList.length;
                                angular.forEach(scope.taxDataList, function (list) {
                                    if (list.isReimbChecked) {
                                        chkcount++;
                                    }
                                })

                                // let startDateReport = $('#report-startdatepicker').val().trim();
                                // let endDateReport = $('#report-enddatepicker').val().trim();
                                var btnVal = scope.selectedYear === 'Select Year' ? false : true;
                                if (total == chkcount) {
                                    scope.checkboxobj.isCheckedAll = true;
                                } else {
                                    scope.checkboxobj.isCheckedAll = false;
                                }
                                console.log("chkcount", chkcount, btnVal)
                                if (chkcount != 0) {
                                    if (btnVal) {
                                        $('#taxDownloadReimBtn').prop('disabled', false);
                                    }
                                    else {
                                        $('#taxDownloadReimBtn').prop('disabled', true);
                                    }
                                } else {
                                    $('#taxDownloadReimBtn').prop('disabled', true);
                                }
                            }

                            scope.downloadReimbursement = function () {
                                $('#spinner').show();
                                $('#custom-loading').text("The report is being generated now. please wait just a moment.");
                                var listOfTax = [];
                                // scope.stDate = $('#report-startdatepicker').val();
                                // scope.enDate = $('#report-enddatepicker').val();
                                angular.forEach(scope.taxDataList, function (reimObj) {
                                    if (reimObj.isReimbChecked === true) {
                                        listOfTax.push(reimObj.reimbId);
                                    }
                                });
                                scope.fileExName = "Annual Tax Liability Report";
                                scope.summarytaxdownload = [];
                                scope.exportTaxDataList = [];
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.downLoadComplianceReport}', JSON.stringify(listOfTax), scope.selectedYear,
                                    function (result, event) {
                                        if(result){
                                            console.log('Tax List downloaded', result)
                                            scope.exportTaxDataList = JSON.parse(result);
                                            if(scope.exportTaxDataList.length > 0){
                                                scope.summarytaxdownload.push(["Employee Name",  "Employee ID", "Employee Email", "Imputed Income"]);
                                                angular.forEach(scope.exportTaxDataList, function (item) {
                                                            scope.summarytaxdownload.push([item.drivername, item.employeeid, item.emailid, item.imputedincome]);
                                                });
                                                scope.downloadToExcel(scope.summarytaxdownload, scope.fileExName);
                                                $('#spinner').hide();
                                                $('#custom-loading').text("");
                                                refreshModal();
                                            }else{
                                                $('#spinner').hide();
                                                toastr.error("No report available for these driver's.Please try again");
                                                setTimeout(()=>{
                                                    refreshModal();
                                               }, 2000)
                                            }
                                        }else{
                                            toastr.error("Please try again");
                                            $('#spinner').hide();
                                            setTimeout(()=>{
                                                    refreshModal();
                                            }, 2000)
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );
                            }

                            scope.closeModal = function(){
                                refreshModal();
                            }

                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                    scope.requestList();
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;
                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeModal()"><span aria-hidden="true">×</span></button><div class="modal-body"><h4>Contact List</h4><div class="modal-divider"></div><div class="form-row"><div class="form-group-theme row-inline"><label for="Filter" class="col-xl-1 col-lg-2 col-md-2 col-sm-2 col-form-label form-lable">Year:</label><div class="col-12 col-sm-3 col-md-3 col-lg-3 col-xl-3 validate-div" style="font-size:16px!important"><select ng-model="selectedYear" ng-change="showBtn(selectedYear)" class="browser-default custom-select custom-select-xl width-dp"><option ng-repeat="yr in year" ng-selected="{{selectedYear == yr.value}}" value="{{yr.value}}">{{yr.value}}</option></select></div></div></div><div class="table-responsive" ng-show="showList"><table id="driver-dashbord-month-model" class="table dt-responsive nowrap no-footer dataTable" cellspacing="0" width="100%"><tbody class="table-a-link"><tr><td ng-model="allList"><div class="input-group main-input"><div class="input-group-prepend"><div class="input-group-text"><input id="allreimbchecked" type="checkbox" ng-model="checkboxobj.isCheckedAll" class="attendanceCheck" ng-click="CheckUncheckForAllListReimbursement(checkboxobj.isCheckedAll)"></div></div><span class="form-control" ng-model="alllist">Select All</span></div></td></tr><tr dir-paginate="list in taxDataList|itemsPerPage:itemPerPage" current-page="currentPage" ng-model="list" ng-init="showRecord(list)"><td ng-model="list.name"><div class="input-group main-input"><div class="input-group-prepend"><div class="input-group-text"><input id="reimbchecked" type="checkbox" ng-model="list.isReimbChecked" class="attendanceCheck" ng-click="CheckUncheckForAllReimbursement(list.isReimbChecked,list)"></div></div><span class="form-control" ng-model="list.name">{{list.name}}</span></div></td></tr></tbody><tfoot><tr></tr></tfoot></table></div></div><div class="modal-footer" ng-show="showList"><div class="col-md-6"><dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" responsive="true" auto-hide="false" class="pull-left" on-page-change="onPageChange(newPageNumber)"></dir-pagination-controls></div><div class="col-md-6"><button id="taxDownloadReimBtn" class="btn btn-primary float-right mr-12" ng-click="downloadReimbursement()" disabled>Download <i class="fa fa-download"></i></button></div></div></div></div></div>'
                    };
            }]);

            //EMC - 393 ERMI Report

            var EditTripDetailReportModel = function () {
                this.visible = false;
            }

            EditTripDetailReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditTripDetailReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editTripDetailReport', ['$filter', '$http',
                    function ($filter, $http) {
                        return {
                            restrict: 'E',
                            scope: {
                                model: '='
                            },
                            link: function (scope, element, attributes) {
                                scope.$watch('model.visible', function (newValue) {
                                    var modalElement = element.find('.modal');
                                    modalElement.modal(newValue ? 'show' : 'hide');
                                    // if (newValue == true) {

                                    // }
                                });

                                var url_string = $(location).attr("href");
                                var url = new URL(url_string);
                                var host = url.host;
                                scope.accid = url.searchParams.get("accid");
                                scope.id = url.searchParams.get("id");

                                function refreshModal() {
                                    location.reload();
                                }

                                $('body').on('keydown', '#report-startdatepicker-trip', function (e) {
                                    return false;
                                })

                                $('body').on('keydown', '#report-enddatepicker-trip', function (e) {
                                    return false;
                                })

                                $('#report-enddatepicker-trip, #report-startdatepicker-trip').on('change', function () {
                                    var stdateTripVal = $('#report-startdatepicker-trip').val();
                                    var endateTripVal = $('#report-enddatepicker-trip').val();
                                    var reportBtn = stdateTripVal.length == 0 || endateTripVal.length == 0;
                                    if (reportBtn) {
                                        $('#reportDownloadTripBtn').prop('disabled', true);
                                    }
                                    else {
                                        $('#reportDownloadTripBtn').prop('disabled', false);
                                    }
                                });

                                scope.downloadToExcel = function (sheetData, excelfile) {
                                    function datenum(v, date1904) {
                                        if (date1904) v += 1462;
                                        var epoch = Date.parse(v);
                                        return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                                    };

                                    function getSheet(sheetData, opts) {
                                        var ws = {};
                                        var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                                        for (var R = 0; R != sheetData.length; ++R) {
                                            for (var C = 0; C != sheetData[R].length; ++C) {
                                                if (range.s.r > R) range.s.r = R;
                                                if (range.s.c > C) range.s.c = C;
                                                if (range.e.r < R) range.e.r = R;
                                                if (range.e.c < C) range.e.c = C;
                                                var cell = { v: sheetData[R][C] };
                                                if (cell.v == null) continue;
                                                var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });

                                                if (typeof cell.v === 'number') cell.t = 'n';
                                                else if (typeof cell.v === 'boolean') cell.t = 'b';
                                                else if (cell.v instanceof Date) {
                                                    cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                                    cell.v = datenum(cell.v);
                                                }
                                                else cell.t = 's';
                                                ws[cell_ref] = cell;
                                            }
                                        }
                                        if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                        return ws;
                                    };

                                    function Workbook() {
                                        if (!(this instanceof Workbook)) return new Workbook();
                                        this.SheetNames = [];
                                        this.Sheets = {};
                                    }
                                    var wb = new Workbook(), ws = getSheet(sheetData);
                                    /* add worksheet to workbook */
                                    wb.SheetNames.push(excelfile);
                                    wb.Sheets[excelfile] = ws;
                                    var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });
                                    function s2ab(s) {
                                        var buf = new ArrayBuffer(s.length);
                                        var view = new Uint8Array(buf);
                                        for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                        return buf;
                                    }
                                    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), excelfile + '.xlsx');
                                }

                                scope.downloadTripDetail = function () {
                                    $('#spinner').show();
                                    $('#custom-loading').text("The report is being generated now. please wait just a moment.");
                                    scope.stDate = $('#report-startdatepicker-trip').val();
                                    scope.enDate = $('#report-enddatepicker-trip').val();
                                    scope.fileExName = "Trip Detail Report";
                                    scope.summaryreportfordownload = [];
                                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.ReportListController.TripDetailReport}', scope.stDate, scope.enDate, scope.accid,
                                    function (result, event) {
                                            if (event.status && result != null) {
                                                scope.$apply(function () {
                                                    scope.listOfReport = JSON.parse(result);
                                                    scope.summaryreportfordownload.push(["Driver",  "Email", "Date", "Day", "Start Time", "End Time", "Mileage (mi)", "From Location Name", "From Location Address", "To Location Name", "To Location Address", "Notes", "Tracking Method", "From Location Lat", "From Location Long", "To Location Lat", "To Location Long"]);
                                                    angular.forEach(scope.listOfReport, function (item) {
                                                        scope.summaryreportfordownload.push([item.driverName, item.driverEmail, item.tripDate, item.tripDay, item.startTime, item.endTime, item.mileage, item.FLocationName, item.FLocationAdd, item.TLocationName, item.TLocationAdd, item.notes, item.trackingMethod, item.FLocationLatitude, item.FLocationLongitude, item.TLocationLatitude, item.TLocationLongitude]);
                                                    });
                                                    scope.downloadToExcel(scope.summaryreportfordownload, scope.fileExName);
                                                   $('#spinner').hide();
                                                   $('#custom-loading').text("");
                                                })
                                               refreshModal();
                                            }else{
                                                $('#spinner').hide();
                                                $('#custom-loading').text("");
                                                toastr.error("No trip found between "+  scope.stDate + " to " +   scope.stDate);
                                               setTimeout(()=>{
                                                    refreshModal();
                                               }, 2000)
                                            }
                                        },
                                        { escape: false }
                                    )
                                    // window_url = 'https://' + host + '/app/TripDetailReport?startDate=' + scope.stDate + '&endDate=' + scope.enDate + '&id=' + scope.accid;
                                    // window.open(window_url, '_blank');
                                    //refreshModal();
                                }

                                scope.closeModal = function () {
                                    refreshModal();
                                }

                                element.on('shown.bs.modal', function () {
                                    scope.$apply(function () {
                                        scope.model.visible = true;
                                    });
                                });

                                element.on('hidden.bs.modal', function () {
                                    scope.$apply(function () {
                                        scope.model.visible = false;
                                    });
                                });

                            },
                            template: '<div class="modal fade driver-dashboard-monthrecord show in" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"> <div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"> <div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeModal()"> <span aria-hidden="true">×</span> </button> <div class="modal-body"> <h4>Trip Detail Report</h4> <div class="modal-divider"></div><form name="signup" class="form"> <div class="form-row"> <div class="form-group-theme row-inline"> <label for="startDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable startDate">Start Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" data-original-title="<b>Please select start date</b>"> <i class="fa fa-question"></i> </span> </label> <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"> <div class="input-group"> <input id="report-startdatepicker-trip" class="form-control rounded-0 reimbdatepicker" placeholder="Select Start Date" ng-model="selectedstartDate" autocomplete="off"> <div class="input-group-prepend"> <span class="input-group-text"> <i class="fas fa-calendar-alt"></i> </span> </div></div></div></div><div class="form-group-theme row-inline"> <label for="endDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable endDate">End Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" data-original-title="<b>Please select end date</b>"> <i class="fa fa-question"></i> </span> </label> <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"> <div class="input-group"> <input id="report-enddatepicker-trip" class="form-control rounded-0 reimbdatepicker" placeholder="Select End Date" ng-model="selectedendDate" autocomplete="off"> <div class="input-group-prepend"> <span class="input-group-text"> <i class="fas fa-calendar-alt"></i> </span> </div></div></div></div></div></form> </div><div class="modal-footer"><div class="col-md-6" style="padding: 8px;"><button id="reportDownloadTripBtn" class="btn btn-primary float-right mr-12" ng-click="downloadTripDetail()" disabled>Download  <i class="fa fa-download"></i> </button> </div></div></div></div></div>'
                        };
                    }]);

            // Jira Ticket EMC - 342

            var EditTimeReportSummaryModel = function () {
                this.visible = false;
            }

            EditTimeReportSummaryModel.prototype.open = function () {
                this.visible = true;
            }

            EditTimeReportSummaryModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editTimeSummaryReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.eid = url.searchParams.get("id");
                            scope.accid = url.searchParams.get("accid");
                            function refreshModal() {
                                location.reload();
                            }
                            
                            scope.netchexpayPeriod = '{!($Label.ERMIPayPeriodDate)}';
                            scope.dateObjArr = [];
                            scope.originalObjArr = [];
                            scope.defaultOption = "Select Pay Period";
                            scope.originalObjArr = scope.netchexpayPeriod.split(',');
                            var currentDate = new Date();
                            var payArr = [];
                            function daysInMonth(month, year)
                            {
                                return 32 - new Date(year, month, 32).getDate();
                            }
                            
                            var y = currentDate.getFullYear();
                            var m = currentDate.getMonth() - 1;
                            var d = Math.min(currentDate.getDate(), daysInMonth(m, y));
                            var previousDate = new Date(y, m, d);
                            
                            var yNext = currentDate.getFullYear();
                            var mNext = currentDate.getMonth() + 1;
                            var dNext = Math.min(currentDate.getDate(), daysInMonth(mNext, yNext));
                            var nextDate = new Date(yNext, mNext, dNext);
                            
                            var currentMonth = $filter('date')(new Date(), 'MMMM');
                            var preMonth = $filter('date')(previousDate , 'MMMM');
                            var neMonth = $filter('date')(nextDate , 'MMMM');
                            angular.forEach(scope.originalObjArr, function (date) {
                            
                                var split = date.split(' to ');
                                var startMonth = $filter('date')(new Date(split[0]), 'MMMM');
                                if (startMonth === currentMonth || startMonth === preMonth || startMonth === neMonth) {
                              
                                    payArr.push(date);
                                }
                            });
                            scope.dateObjArr = payArr;
                            scope.dateObjArr.splice(0, 0, scope.defaultOption);
                            scope.netchexPayRole = scope.dateObjArr[0];
                            scope.startDate = '';
                            scope.endDate = '';
                            scope.reimbursementDownload = true;

                            scope.closeModal = function(){
                                refreshModal();
                            }

                            scope.onnetchexPayPeriodChange = function (period) {
                                if (period != "Select Pay Period") {
                                    scope.splitObj = period.split(' to ');
                                    scope.startDate = scope.splitObj[0];
                                    scope.endDate = scope.splitObj[1];
                                    scope.reimbursementDownload = false;
                                } else {
                                    scope.reimbursementDownload = true;
                                }
                            }
                        
                            scope.downloadReimbursementReport = function () {
                                var selectedPayPeriod = scope.netchexPayRole;
                                var window_url;
                                window_url = 'https://' + host + '/app/TimeandSummaryDetailReport?id='+scope.accid+ '&endDate=' + scope.endDate + '&startDate=' + scope.startDate ;
                                window.open(window_url, '_blank');
                                refreshModal();
                            }

          
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in netchexModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="closeModal()"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Time, Attendance and Mileage Summary Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"><label for="payRole:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable payRole">Pay Period: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"><select ng-model="netchexPayRole" ng-change="onnetchexPayPeriodChange(netchexPayRole)" class="browser-default custom-select custom-select-xl custom-payPeriod"><option ng-repeat="dateobj in dateObjArr" ng-selected="{{netchexPayRole == dateobj}}" value="{{dateobj}}">{{dateobj}}</option> </select></div></div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"><button id="downloadReimReportBtn" class="btn btn-primary float-right mt-3 mb-3" ng-click="downloadReimbursementReport()" ng-disabled="reimbursementDownload">Download <i class="fa fa-download"></i> </button></div></div></div></div></div>'
                    };

                }
            ]);
            
            // Jira Ticket EMC - 342 -- ends

            var EditTimeCustomReportModel = function () {
                this.visible = false;
            }

            EditTimeCustomReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditTimeCustomReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editTimeCustomReport', ['$filter', '$http',
                function ($filter, $http) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                                // if (newValue == true) {

                                // }
                            });

                            // Format date in yyyy-MM-dd format
                            function FormatDate(elDate){
                                var today = new Date(elDate);
                                var dd = String(today.getDate()).padStart(2, '0');
                                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                                var year = today.getFullYear();
                                var yy = year.toString().substr(-2);
                                // today = yyyy + '-' + mm + '-' + dd;
                                today = mm + '/' + dd + '/' + yy
                                return today;
                            }

                            function filterByYear(item){
                                var a = item.split(' to ');
                                var year = parseInt(scope.biweeklyPayRoleYear);
                                if (year != undefined) {
                                    if (new Date(a[0]).getFullYear() === year) {
                                        return true;
                                    } else {
                                        if (new Date(a[1]).getFullYear() === year) {
                                            return true;
                                        }
                                    }
                                }
                              
                            }
                            function payDate(date) {
                                var st = new Date(date);
                                var today = new Date((new Date()).getFullYear(), 12, 0);
                                var i = 0;
                                var dateArr = [];
                                var end;
                                var pDays = scope.payPeriodDays
                                var currentYear = (new Date()).getFullYear();
                                if (date) {
                                    for (i = 0; i <= dateArr.length; i++) {
                                            if (st < today) {
                                                end = new Date(st);
                                                end = new Date(end.setDate(end.getDate() + pDays));
                                                let finaldate = FormatDate(st) + ' to ' + FormatDate(end)
                                               // if (currentYear === end.getFullYear()) {
                                                    dateArr.push(finaldate);
                                                //}
                                                st = new Date(end.setDate(end.getDate() + 1));
                                          }
                                    }
                                    let arrByYear = dateArr.filter(filterByYear)
                                    console.log("List->", arrByYear);
                                    return arrByYear;
                                   
                                }
                            }

                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.option = "Select Pay Period"
                            scope.payPeriodDays = {!accPayDays};
                            scope.payPeriodStDate = $filter('date')(new Date('{!accPayperiodStart}'), 'MM/dd/yy');
                            scope.biweeklyDate = [];
                            scope.biweeklyDate[0] = scope.option;
                            scope.biweeklyPayRole = scope.biweeklyDate[0];
                            scope.pLPayPeriod2021 = '{!($Label.PLPayPeriod2021)}';  
                            scope.pLPayPeriod2022 = '{!($Label.PLPayPeriod2022)}';
                            scope.stCustomDate = '';
                            scope.enCustomDate = '';
                            scope.biweeklyPayYear = [];
                            scope.yearDefault = "Select Year"
                            scope.accountYear = {!AccountYear};
                            var maxYear = new Date().getFullYear();
                            var minYear = scope.accountYear;
                            //var minYear = new Date().getFullYear() - 2;

                            for(var i = minYear; i<= maxYear; i++){
                                scope.biweeklyPayYear.push(i);
                            }
                            scope.biweeklyPayYear.splice(0, 0, scope.yearDefault);
                            scope.biweeklyPayRoleYear = scope.biweeklyPayYear[0];
                            scope.biweeklyDownload = true;
                            function refreshModal() {
                                location.reload();
                            }
                            scope.onbiweeklyPayPeriodChange = function (period) {
                                if (period != "Select Pay Period") {
                                    scope.splitObj = period.split(' to ');
                                    scope.stCustomDate = scope.splitObj[0];
                                    scope.enCustomDate = scope.splitObj[1];
                                    scope.convertedStartDate = $filter('date')(new Date(scope.stCustomDate), 'yyyy-MM-dd');
                                    scope.convertedEndDate = $filter('date')(new Date(scope.enCustomDate), 'yyyy-MM-dd');
                                    scope.biweeklyDownload = false;
                                } else {
                                    scope.biweeklyDownload = true;
                                }
                            }

                            scope.onbiweeklyPayYearChange = function (year){
                                if(year != "Select Year"){
                                    if(year === "2022"){
                                       scope.biweeklyDate = [];
                                       scope.biweeklyDate = scope.pLPayPeriod2022.split(",");
                                    }
                                    if(year === "2021"){
                                         scope.biweeklyDate = [];
                                         scope.biweeklyDate = scope.pLPayPeriod2021.split(",");
                                    }
                                   // scope.biweeklyDate = payDate(scope.payPeriodStDate, year);
                                   if(scope.biweeklyDate.length > 0) {
                                       scope.biweeklyDate.splice(0, 0, scope.option) 
                                   } else {
                                        scope.biweeklyDate = [];
                                        scope.biweeklyDate[0] = scope.option;
                                        scope.biweeklyPayRole = scope.biweeklyDate[0];
                                        scope.biweeklyDownload = true;
                                    } 
                                }else{
                                    scope.biweeklyDate = [];
                                    scope.biweeklyDate[0] = scope.option;
                                    scope.biweeklyPayRole = scope.biweeklyDate[0];
                                    scope.biweeklyDownload = true;
                                }
                            }

                            scope.downloadReimbursementReport = function () {
                                var window_url;
                                window_url = 'https://' + host + '/app/BiWeeklyReimReportforPLM?startDate=' + scope.convertedStartDate + '&endDate=' + scope.convertedEndDate;
                                window.open(window_url, '_blank');
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.UpdateMileageLockDate}', scope.convertedStartDate, scope.convertedEndDate,
                                    function (result, event) {
                                        if (event.status) {
                                            console.log("UpdateMileageLockDate Result->", result);
                                        }else {
                                            console.log("error");
                                        }
                                    });
                                refreshModal();
                            }

                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.biweeklyDate = [];
                                    scope.biweeklyDate[0] = scope.option;
                                    scope.biweeklyPayRole = scope.biweeklyDate[0];
                                    scope.biweeklyPayRoleYear = scope.biweeklyPayYear[0];
                                    scope.biweeklyDownload = true;
                                    scope.model.visible = false;
                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in " tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-md modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Bi-Weekly Reimbursement Report</h4><div class="modal-divider"></div><form name="signup" class="form"><div class="form-row"><div class="form-group row-inline"><label for="payYear:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable payRole">Pay Period Year : <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period year</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"><select ng-model="biweeklyPayRoleYear" ng-change="onbiweeklyPayYearChange(biweeklyPayRoleYear)" class="browser-default custom-select custom-select-xl"><option ng-repeat="bYear in biweeklyPayYear" ng-selected="{{biweeklyPayRoleYear == bYear}}" value="{{bYear}}">{{bYear}}</option> </select></div></div></div><div class="form-row"><div class="form-group row-inline"><label for="payRole:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable payRole">Pay Period: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"><select ng-model="biweeklyPayRole" ng-change="onbiweeklyPayPeriodChange(biweeklyPayRole)" class="browser-default custom-select custom-select-xl"><option ng-repeat="bDate in biweeklyDate" ng-selected="{{biweeklyPayRole == bDate}}" value="{{bDate}}">{{bDate}}</option> </select></div></div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="downloadBiReimReportBtn" class="btn btn-primary float-right mt-3 mb-3" ng-click="downloadReimbursementReport()" ng-disabled="biweeklyDownload">Download <i class="fa fa-download"></i> </button></div></div></div></div></div>'
                    };

                }]);
            // var EditTripReportModel = function (){
            //     this.visible = false;
            // }

            // EditTripReportModel.prototype.open = function () {
            //     this.visible = true;
            // }

            // EditTripReportModel.prototype.close = function () {
            //     this.visible = false;
            // }

            // app.directive('editTripReport', ['$filter',
            //     function ($filter) {
            //         return {
            //             restrict: 'E',
            //             scope: {
            //                 model: '='
            //             },
            //             link: function (scope, element, attributes) {
            //                 scope.$watch('model.visible', function (newValue) {
            //                     var modalElement = element.find('.modal');
            //                     modalElement.modal(newValue ? 'show' : 'hide');
            //                 });
            //                 var url_string = $(location).attr("href");
            //                 var url = new URL(url_string);
            //                 var host = url.host;
            //                 scope.eid = url.searchParams.get("id");
            //                 scope.accid = url.searchParams.get("accid");
            //                 var mDate = new Date();
            //                 var pMonth = new Date(mDate);
            //                 pMonth.setMonth(mDate.getMonth() - 1);
            //                 scope.nowMonth =  $filter('date')(pMonth, 'MMMM');

            //                 scope.onSubmitTripStatus = function(){
            //                     $('#spinner').show();
            //                     Visualforce.remoting.Manager.invokeAction(
            //                         '{!$RemoteAction.ReportListController.ChangeTripStatus}', scope.accid, scope.eid, 
            //                         function (result, event) {
            //                             if (event.status) {
            //                                 $('#spinner').hide();
            //                                 $('.tripModal').hide();
            //                                 toastr.success('Approval process going on background.You will receive an email once it is completed.', {timeOut: 6000});
            //                                 location.reload();
            //                             }
            //                             else {
            //                                 $('#spinner').hide();
            //                                 toastr.error('Some error has occur while changing trip status');
            //                                 $('.tripModal').hide();
            //                             }
            //                             scope.$apply();
            //                             }, { escape: false }
            //                         );
            //                 }

            //                 element.on('shown.bs.modal', function () {
            //                     scope.$apply(function () {
            //                         scope.model.visible = true;
            //                     });
            //                 });

            //                 element.on('hidden.bs.modal', function () {
            //                     scope.$apply(function () {
            //                         scope.model.visible = false;

            //                     });
            //                 });
            //             },
            //             template: '<div class="modal fade driver-dashboard-monthrecord show in tripModal"tabindex="-1"role="dialog"aria-labelledby="driver-dashboard-monthrecord"id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-md modal-dialog-centered"><div class="modal-content rounded-0"><button type="button"class="close popup-close-btn"data-dismiss="modal"aria-label="Close"><span aria-hidden="true">×</span></button><div class="modal-body"><h4>Change Trip Status in mlog/Triplog</h4><div class="modal-divider"></div><form name="signup"class="form"id="myform"><div class="form-row"><div class="form-group-theme-md d-block"><div class="col-md-12 text-center">All approved trips of {{nowMonth}} month will change status of trips in mlog/Triplog as approved.</div></div><div class="form-group-theme-md d-block"><div class="col-md-12 text-center">All rejected trips of {{nowMonth}} month will change status of trips in mlog/Triplog as rejected.</div></div><div class="d-block"><div class="col-md-12 text-center">All pending trips of {{nowMonth}} month will change status of trips in mlog/Triplog as submitted.</div></div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"><button id="submitTrip" class="btn btn-primary submitBtn" ng-click="onSubmitTripStatus()">Submit</button><button id="cancelTrip" class="btn btn-secondary cancelbtn" data-dismiss="modal" ng-click="cancelTrip()">Cancel</button></div></div></div></div></div>'
            //         };

            //     }
            // ]);

            var EditNetchexReportModel = function () {
                this.visible = false;
            }

            EditNetchexReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditNetchexReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editNetchexReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var host = url.host;
                            scope.eid = url.searchParams.get("id");
                            scope.accid = url.searchParams.get("accid");
                            scope.AISid = '{!($Label.AISAccount)}';
                            function refreshModal() {
                                location.reload();
                            }
                            scope.netchexpayPeriod = (scope.accid != scope.AISid) ? '{!($Label.ERMIPayPeriodDate)}' : '{!($Label.PayPeriodDate)}';
                            scope.dateObjArr = [];
                            scope.originalObjArr = [];
                            scope.defaultOption = "Select Pay Period";
                            scope.originalObjArr = scope.netchexpayPeriod.split(',');
                            var currentDate = new Date();
                            var payArr = [];
                            function daysInMonth(month, year)
                            {
                                return 32 - new Date(year, month, 32).getDate();
                            }
                            
                            var y = currentDate.getFullYear();
                            var m = currentDate.getMonth() - 1;
                            var d = Math.min(currentDate.getDate(), daysInMonth(m, y));
                            var previousDate = new Date(y, m, d);
                            
                            var yNext = currentDate.getFullYear();
                            var mNext = currentDate.getMonth() + 1;
                            var dNext = Math.min(currentDate.getDate(), daysInMonth(mNext, yNext));
                            var nextDate = new Date(yNext, mNext, dNext);
                            
                            var currentMonth = $filter('date')(new Date(), 'MMMM');
                            var preMonth = $filter('date')(previousDate , 'MMMM');
                            var neMonth = $filter('date')(nextDate , 'MMMM');
                            angular.forEach(scope.originalObjArr, function (date) {
                                var split = date.split(' to ');
                                var startMonth = $filter('date')(new Date(split[0]), 'MMMM');
                                if (startMonth === currentMonth || startMonth === preMonth || startMonth === neMonth) {
                                    payArr.push(date);
                                }
                            });
                            scope.dateObjArr = payArr;
                            scope.dateObjArr.splice(0, 0, scope.defaultOption);
                            scope.netchexPayRole = scope.dateObjArr[0];
                            scope.startDate = '';
                            scope.endDate = '';
                            scope.reimbursementDownload = true;
                            //progress bar params
                            $('.progress-background').hide();
                            scope.enableBar = false;
                            scope.deProgressBarWidth = 5;
                            iCount = 10;
                            scope.onnetchexPayPeriodChange = function (period) {
                                if (period != "Select Pay Period") {
                                    scope.splitObj = period.split(' to ');
                                    scope.startDate = scope.splitObj[0];
                                    scope.endDate = scope.splitObj[1];
                                    scope.reimbursementDownload = false;
                                } else {
                                    scope.reimbursementDownload = true;
                                }
                            }
                            scope.onSubmitPay = function () {
                                $('.progress-background').show();
                                scope.enableBar = true;
                                //$('#spinner').show();
                                // scope.deleteApi = false;
                                // scope.startDate = $('.datepicker1').val();
                                // scope.endDate = $('.datepicker2').val();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.postTimeSheetImportAPI}', scope.startDate, scope.endDate, scope.eid,
                                    function (result, event) {
                                        if (event.status) {
                                            //  toastr.success('Succesfully send data to netchex');
                                            //  setTimeout(function () {
                                            //   location.reload();
                                            //  }, 2000);
                                            scope.CheckStatus(result);

                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                        }
                                    });
                            }
                            scope.CheckStatus = function (runTime) {

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.CheckStatus}', runTime, 'TimeSheetImportNetchexBatch',
                                    function (result, event) {
                                        if (event.status) {

                                            if (result.enablePollar) {
                                                scope.deProgressBarWidth = scope.deProgressBarWidth == 5 ? 0 : scope.deProgressBarWidth;
                                                scope.deProgressBarWidth = (iCount != 0 ? (iCount > 95 ? 95 : iCount) / 100 * 100 : 0);

                                                setTimeout(function () {
                                                    scope.CheckStatus(runTime);
                                                }, 5000);

                                            } else {
                                                ///Add code to hide Loader///
                                                $('#spinner').hide();
                                                var message = JSON.parse(result.Message);
                                                if (message[0].IsSuccess) {
                                                    toastr.success('Succesfully send data to netchex');
                                                    $('.netchexModal').hide();
                                                    location.reload();
                                                } else {
                                                    toastr.error(message[0].Messages[0]);
                                                    $('.netchexModal').hide();
                                                }
                                                scope.strStatus = 'Completed';
                                            }
                                            iCount += (iCount >= 70 ? 1 : 10);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.netchexModal').hide();
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );

                            }

                            scope.downloadReimbursementReport = function () {
                                var selectedPayPeriod = scope.netchexPayRole;
                                var window_url;
                                if (scope.accid === scope.AISid) {
                                    window_url = 'https://' + host + '/app/MileagesforAISAccountReport?startDate=' + scope.startDate + '&endDate=' + scope.endDate;
                                } else {
                                    window_url = 'https://' + host + '/app/TimeSheetNetchexReport?startDate=' + scope.startDate + '&endDate=' + scope.endDate;
                                }
                                window.open(window_url, '_blank');
                                refreshModal();
                            }

                            // scope.onDeletePay = function () {
                            //     Visualforce.remoting.Manager.invokeAction(
                            //         '{!$RemoteAction.ReportListController.DeleteNetchexCallout}', scope.startDate, scope.endDate,
                            //         function (result, event) {
                            //             if (event.status) {
                            //                 $('.netchexModal').modal('hide');
                            //                 toastr.success('Succesfully deleted data');
                            //                 setTimeout(function () {
                            //                     location.reload();
                            //                 }, 2000);

                            //             }
                            //             else {
                            //                 toastr.error('Some error has occur');
                            //             }
                            //         });
                            // }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in netchexModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4 ng-if="accid != AISid">Time and Attendance Payment Report</h4><h4 ng-if="accid === AISid">Biweekly Mileage Reimbursement Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"><label for="payRole:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable payRole">Pay Period: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"><select ng-model="netchexPayRole" ng-change="onnetchexPayPeriodChange(netchexPayRole)" class="browser-default custom-select custom-select-xl custom-payPeriod"><option ng-repeat="dateobj in dateObjArr" ng-selected="{{netchexPayRole == dateobj}}" value="{{dateobj}}">{{dateobj}}</option> </select></div></div></div><div class="progress-background"></div><div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + \'%\' )}">{{deProgressBarWidth}}%</div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="submitPayment" class="btn btn-primary float-right mt-3" ng-click="onSubmitPay()" ng-if="accid != AISid">Submit</button> <button id="downloadReimReportBtn" class="btn btn-primary float-right mt-3 mb-3" ng-click="downloadReimbursementReport()" ng-disabled="reimbursementDownload">Download <i class="fa fa-download"></i> </button></div></div></div></div></div>'
                    };

                }
            ]);

            var EditMonthlyNetchexReportModel = function () {
                this.visible = false;
            }

            EditMonthlyNetchexReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditMonthlyNetchexReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editMonthlyNetchexReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });

                            //progress bar params
                            $('.progress-background').hide();
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            scope.eid = url.searchParams.get("id");
                            scope.enableBar = false;
                            scope.deProgressBarWidth = 5;
                            iCount = 10;

                            scope.dateNetchexArr = [];
                            scope.reportDate = '';
                            var todayDate = new Date();
                            var firstDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 1);
                            var fifteenthDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 15);
                            var first = $filter('date')(firstDay, 'yyyy-MM-dd');
                            var fifteenth = $filter('date')(fifteenthDay, 'yyyy-MM-dd');
                            scope.dateNetchexArr.push(first);
                            scope.dateNetchexArr.push(fifteenth);
                            scope.dateNetchexArr.splice(0, 0, "Select Date");
                            scope.monthlyNetchexPay = scope.dateNetchexArr[0];
                            scope.onmonthlyNetchexPayChange = function (mdate) {
                                if (mdate != "Select Date") {
                                    $('#submitPay').prop('disabled', false);
                                }
                                else {
                                    $('#submitPay').prop('disabled', true);
                                }
                                scope.reportDate = mdate;
                            }

                            scope.onSubmit = function () {
                                $('.progress-background').show();
                                scope.enableBar = true;
                                // $('#spinner').show();
                                //  scope.deleteApi = false;
                                // scope.reportDate = $('.datepicker1').val();
                                console.log(scope.reportDate);
                                // scope.endDate = $('.datepicker2').val();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.postVariablePaymentAPI}', scope.reportDate, scope.eid,
                                    function (result, event) {
                                        if (event.status) {
                                            //    toastr.success('Variable Payment is succesfully send to netchex');
                                            //   setTimeout(function () {
                                            // location.reload();
                                            //   }, 2000);
                                            scope.CheckStatus(result);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                        }
                                    });
                            }

                            scope.CheckStatus = function (runTime) {

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.CheckStatus}', runTime, 'NetchexVariablePaymentBatch',
                                    function (result, event) {
                                        if (event.status) {

                                            console.log('Status Check', result);
                                            if (result.enablePollar) {
                                                scope.deProgressBarWidth = scope.deProgressBarWidth == 5 ? 0 : scope.deProgressBarWidth;
                                                scope.deProgressBarWidth = (iCount != 0 ? (iCount > 95 ? 95 : iCount) / 100 * 100 : 0);

                                                setTimeout(function () {
                                                    scope.CheckStatus(runTime);
                                                }, 5000);

                                            } else {
                                                ///Add code to hide Loader///
                                                $('#spinner').hide();
                                                var message = JSON.parse(result.Message);
                                                if (message[0].IsSuccess) {
                                                    toastr.success('Variable Payment is succesfully send to netchex');
                                                    $('.monthlynetchexModal').hide();
                                                    location.reload();
                                                } else {
                                                    toastr.error(message[0].Messages[0]);
                                                    $('.monthlynetchexModal').hide();
                                                }
                                                scope.strStatus = 'Completed';
                                            }
                                            iCount += (iCount >= 70 ? 1 : 10);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.monthlynetchexModal').hide();
                                        }
                                        scope.$apply();

                                    }, { escape: false }
                                );

                            }
                            // scope.onDelete = function () {
                            //     // scope.deleteApi = true;
                            //     Visualforce.remoting.Manager.invokeAction(
                            //         '{!$RemoteAction.ReportListController.DeleteNetchexCallout}', scope.startDate, scope.endDate,
                            //         function (result, event) {
                            //             if (event.status) {
                            //                 toastr.success('Successfully deleted data');
                            //                 setTimeout(function () {
                            //                     location.reload();
                            //                 }, 2000);

                            //             }
                            //             else {
                            //                 toastr.error('Some error has occur');
                            //             }
                            //         });
                            // }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in monthlynetchexModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Monthly Variable Payment Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline margin-center"> <label for="Date:" class="col-xl-3 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable startDate">Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select date</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"><select ng-model="monthlyNetchexPay" ng-change="onmonthlyNetchexPayChange(monthlyNetchexPay)" class="browser-default custom-select custom-select-xl"><option ng-repeat="netDate in dateNetchexArr" ng-selected="{{monthlyNetchexPay == netDate}}" value="{{netDate}}">{{netDate}}</option> </select><!-- <div class="input-group"><input id="report-startdatepicker" class="form-control rounded-0 datepicker1" placeholder="Select Date" required="true" ng-model="selectedstartDate" /><div class="input-group-prepend"> <span class="input-group-text"><i class="fas fa-calendar-alt"></i> </span></div></div>--></div></div></div><div class="progress-background"></div><div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + \'%\' )}">{{deProgressBarWidth}}%</div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="submitPay" class="btn btn-primary " ng-click="onSubmit()" disabled>Submit</button></div></div></div></div>'
                    };

                }
            ]);

            var EditPartTimeReportModel = function () {
                this.visible = false;
            }

            EditPartTimeReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditPartTimeReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editPartTimeReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });
                            //progress bar params
                            $('.progress-background').hide();
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            var todayDate = new Date();
                            var firstDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 1);
                            var fifteenthDay = new Date(todayDate.getFullYear(), todayDate.getMonth(), 15);
                            var first = $filter('date')(firstDay, 'yyyy-MM-dd');
                            var fifteenth = $filter('date')(fifteenthDay, 'yyyy-MM-dd');
                            scope.eid = url.searchParams.get("id");
                            scope.enableBar = false;
                            scope.deProgressBarWidth = 5;
                            iCount = 10;
                            scope.dateList = [];
                            scope.reportDate = '';
                            scope.dateList.push(first);
                            scope.dateList.push(fifteenth);
                            scope.dateList.splice(0, 0, "Select Date");
                            scope.partTimePay = scope.dateList[0];
                            scope.onpartlyPayChange = function (mdate) {
                                if (mdate != "Select Date") {
                                    $('#submitButton').prop('disabled', false);
                                }
                                else {
                                    $('#submitButton').prop('disabled', true);
                                }
                                scope.reportDate = mdate;
                            }
                            scope.onSubmitClick = function () {
                                // $('#spinner').show();
                                // scope.deleteApi = false;
                                $('.progress-background').show();
                                scope.enableBar = true;
                                // scope.reportDate = $('.datepickerModal').val();
                                // scope.endDate = $('.datepicker2Modal').val();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.postFixedAmountAPI}', scope.reportDate, scope.eid,
                                    function (result, event) {
                                        if (event.status) {
                                            /*toastr.success('Fixed Amount Payment is succesfully send to netchex');
                                            setTimeout(function () {
                                                location.reload();
                                            }, 2000);*/
                                            console.log('Batch Run Time', result);
                                            scope.CheckStatus(result);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                        }
                                    });
                            }

                            scope.CheckStatus = function (runTime) {

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.CheckStatus}', runTime, 'NetchexSalaryPartFixAmountBatch',
                                    function (result, event) {
                                        if (event.status) {

                                            console.log('Status Check', result);
                                            if (result.enablePollar) {
                                                scope.deProgressBarWidth = scope.deProgressBarWidth == 5 ? 0 : scope.deProgressBarWidth;
                                                scope.deProgressBarWidth = (iCount != 0 ? (iCount > 95 ? 95 : iCount) / 100 * 100 : 0);

                                                setTimeout(function () {
                                                    scope.CheckStatus(runTime);
                                                }, 5000);

                                            } else {
                                                ///Add code to hide Loader///
                                                $('#spinner').hide();
                                                var message = JSON.parse(result.Message);
                                                if (message[0].IsSuccess) {
                                                    toastr.success('Fixed Amount Payment is succesfully send to netchex');
                                                    $('.partTimeModal').hide();
                                                    location.reload();
                                                } else {
                                                    toastr.error(message[0].Messages[0]);
                                                    $('.partTimeModal').hide();
                                                }
                                                scope.strStatus = 'Completed';
                                            }
                                            iCount += (iCount >= 70 ? 1 : 10);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.partTimeModal').hide();
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );

                            }
                            // scope.onDeleteClick = function () {
                            //     // scope.deleteApi = true;
                            //     Visualforce.remoting.Manager.invokeAction(
                            //         '{!$RemoteAction.ReportListController.DeleteNetchexCallout}', scope.startDate, scope.endDate,
                            //         function (result, event) {
                            //             if (event.status) {
                            //                 toastr.success('Successfully deleted data');
                            //                 setTimeout(function () {
                            //                     location.reload();
                            //                 }, 2000);

                            //             }
                            //             else {
                            //                 toastr.error('Some error has occur');
                            //             }
                            //         });
                            // }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in partTimeModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Part Time Fixed Amount Payment Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline margin-center"> <label for="Date:" class="col-xl-3 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable startDate">Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select date</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"> <select ng-model="partTimePay" ng-change="onpartlyPayChange(partTimePay)" class="browser-default custom-select custom-select-xl"><option ng-repeat="dt in dateList" ng-selected="{{partTimePay == dt}}" value="{{dt}}">{{dt}}</option> </select></div></div></div><div class="progress-background"></div><div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + \'%\' )}">{{deProgressBarWidth}}%</div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="submitButton" class="btn btn-primary " ng-click="onSubmitClick()" disabled>Submit</button></div></div></div></div>'
                    };

                }
            ]);

            var EditFullTimeReportModel = function () {
                this.visible = false;
            }

            EditFullTimeReportModel.prototype.open = function () {
                this.visible = true;
            }

            EditFullTimeReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('editFullTimeReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });
                            var url_string = $(location).attr("href");
                            var url = new URL(url_string);
                            scope.eid = url.searchParams.get("id");
                            scope.payPeriod = '{!($Label.ERMIPayPeriodDate)}'
                            scope.dateArr = [];
                            scope.defaultOption = "Select Pay Period";
                            scope.dateArr = scope.payPeriod.split(',');
                            scope.dateArr.splice(0, 0, scope.defaultOption);
                            scope.payRole = scope.dateArr[0];
                            scope.startDate = '';
                            scope.endDate = '';
                            //progress bar params
                            $('.progress-background').hide();
                            scope.enableBar = false;
                            scope.deProgressBarWidth = 5;
                            iCount = 10;

                            scope.onPayPeriodChange = function (periodOpt) {
                                scope.splitArr = periodOpt.split(' to ');
                                scope.startDate = scope.splitArr[0];
                                scope.endDate = scope.splitArr[1];
                            }
                            scope.onSubmitPayClick = function () {
                                $('.progress-background').show();
                                scope.enableBar = true;
                                // $('#spinner').show();
                                //  scope.deleteApi = false;
                                //  scope.startDate = $('.datepickerReport1').val();
                                //  scope.endDate = $('.datepickerReport2').val();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.postHalfFPFullDriverAPI}', scope.startDate, scope.endDate, scope.eid,
                                    function (result, event) {
                                        if (event.status) {
                                            scope.CheckStatus(result);
                                            //   toastr.success('Full Time Fixed Amount Payment is succesfully send.');
                                            //  setTimeout(function () {
                                            //   location.reload();
                                            //    }, 2000);

                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                        }
                                    });
                            }
                            scope.CheckStatus = function (runTime) {

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.CheckStatus}', runTime, 'NetchexFulltimeHalfFPBatch',
                                    function (result, event) {
                                        if (event.status) {

                                            console.log('Status Check', result);
                                            if (result.enablePollar) {
                                                scope.deProgressBarWidth = scope.deProgressBarWidth == 5 ? 0 : scope.deProgressBarWidth;
                                                scope.deProgressBarWidth = (iCount != 0 ? (iCount > 95 ? 95 : iCount) / 100 * 100 : 0);

                                                setTimeout(function () {
                                                    scope.CheckStatus(runTime);
                                                }, 5000);

                                            } else {
                                                ///Add code to hide Loader///
                                                $('#spinner').hide();
                                                var message = JSON.parse(result.Message);
                                                if (message[0].IsSuccess) {
                                                    toastr.success('Full Time Fixed Amount Payment is succesfully send to netchex');
                                                    $('.fullTimeModal').hide();
                                                    location.reload();
                                                } else {
                                                    toastr.error(message[0].Messages[0]);
                                                    $('.fullTimeModal').hide();
                                                }
                                                scope.strStatus = 'Completed';
                                            }
                                            iCount += (iCount >= 70 ? 1 : 10);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.fullTimeModal').hide();
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );

                            }


                            // scope.onDeletePayClick = function () {
                            //     // scope.deleteApi = true;
                            //     Visualforce.remoting.Manager.invokeAction(
                            //         '{!$RemoteAction.ReportListController.DeleteNetchexCallout}', scope.startDate, scope.endDate,
                            //         function (result, event) {
                            //             if (event.status) {
                            //                 toastr.success('Successfully deleted data');
                            //                 setTimeout(function () {
                            //                     location.reload();
                            //                 }, 2000);

                            //             }
                            //             else {
                            //                 toastr.error('Some error has occur');
                            //             }
                            //         });
                            // }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in fullTimeModal" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Salary and Full Time Fixed Amount Payment Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"> <label for="payRole:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable payRole">Pay Period: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select pay period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-6 col-lg-6 col-md-6 col-sm-6"> <select ng-model="payRole" ng-change="onPayPeriodChange(payRole)" class="browser-default custom-select custom-select-xl custom-payPeriod"><option ng-repeat="date in dateArr" ng-selected="{{payRole == date}}" value="{{date}}">{{date}}</option> </select></div></div></div><div class="progress-background"></div><div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + \'%\' )}">{{deProgressBarWidth}}%</div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="submitPayButton" class="btn btn-primary" ng-click="onSubmitPayClick()">Submit</button></div></div></div></div>'
                    };

                }
            ]);

            var DeleteNetchexReportModel = function () {
                this.visible = false;
            }
            DeleteNetchexReportModel.prototype.open = function () {
                this.visible = true;
            }
            DeleteNetchexReportModel.prototype.close = function () {
                this.visible = false;
            }

            app.directive('deleteNetchexReport', ['$filter',
                function ($filter) {
                    return {
                        restrict: 'E',
                        scope: {
                            model: '='
                        },
                        link: function (scope, element, attributes) {
                            scope.$watch('model.visible', function (newValue) {
                                var modalElement = element.find('.modal');
                                modalElement.modal(newValue ? 'show' : 'hide');
                            });
                            //progress bar params
                            $('.progress-background').hide();
                            scope.enableBar = false;
                            scope.deProgressBarWidth = 5;
                            iCount = 10;
                            scope.onDeletePayClick = function () {
                                // scope.deleteApi = true;
                                $('.progress-background').show();
                                scope.enableBar = true;
                                scope.startDate = $('.datepickerReport1').val();
                                scope.endDate = $('.datepickerReport2').val();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.DeleteNetchexCallout}', scope.startDate, scope.endDate,
                                    function (result, event) {
                                        if (event.status) {
                                            //       toastr.success('Successfully deleted data');
                                            //  setTimeout(function () {
                                            //    location.reload();
                                            //   }, 2000);
                                            console.log('Batch Run Time', result);
                                            scope.CheckStatus(result);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.deleteNetchexReport').hide();
                                        }

                                    });
                            }

                            scope.CheckStatus = function (runTime) {

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.ReportListController.CheckStatus}', runTime, 'NetchexDeleteCallout',
                                    function (result, event) {
                                        if (event.status) {

                                            console.log('Status Check', result);
                                            if (result.enablePollar) {
                                                scope.deProgressBarWidth = scope.deProgressBarWidth == 5 ? 0 : scope.deProgressBarWidth;
                                                scope.deProgressBarWidth = (iCount != 0 ? (iCount > 95 ? 95 : iCount) / 100 * 100 : 0);

                                                setTimeout(function () {
                                                    scope.CheckStatus(runTime);
                                                }, 5000);

                                            } else {
                                                ///Add code to hide Loader///
                                                $('#spinner').hide();
                                                //var message = JSON.parse(result.Message);
                                                //  if(message[0].IsSuccess) {
                                                toastr.success('Successfully deleted data');
                                                $('.deleteNetchexReport').hide();
                                                location.reload();
                                                // } else {
                                                //   toastr.error(message[0].Messages[0]);
                                                //  $('.deleteNetchexReport').hide();
                                                //   }
                                                scope.strStatus = 'Completed';
                                            }
                                            iCount += (iCount >= 70 ? 1 : 10);
                                        }
                                        else {
                                            toastr.error('Some error has occur');
                                            $('.deleteNetchexReport').hide();
                                        }
                                        scope.$apply();
                                    }, { escape: false }
                                );

                            }
                            element.on('shown.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = true;
                                });
                            });

                            element.on('hidden.bs.modal', function () {
                                scope.$apply(function () {
                                    scope.model.visible = false;

                                });
                            });

                        },
                        template: '<div class="modal fade driver-dashboard-monthrecord show in deleteNetchexReport" tabindex="-1" role="dialog" aria-labelledby="driver-dashboard-monthrecord" id="driver-dashboard-monthrecord"><div class="fade modal-backdrop"></div><div class="modal-dialog modal-lg modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button><div class="modal-body"><h4>Delete Netchex Report</h4><div class="modal-divider"></div><form name="signup" class="form" id="myform"><div class="form-row"><div class="form-group-theme row-inline"> <label for="startDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable startDate">Start Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select start date</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"><div class="input-group"> <input id="report-startdatepicker" class="form-control rounded-0 datepickerReport1" placeholder="Select Start Date" required="true" ng-model="selectedstartDate" /><div class="input-group-prepend"> <span class="input-group-text"> <i class="fas fa-calendar-alt"></i> </span></div></div></div></div><div class="form-group-theme row-inline"> <label for="endDate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable endDate">End Date: <span class="tagquestion1" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select end date</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 datepickerinput"><div class="input-group"> <input id="report-enddatepicker" class="form-control rounded-0 datepickerReport2" placeholder="Select End Date" required="true" ng-model="selectedendDate" /><div class="input-group-prepend"> <span class="input-group-text"> <i class="fas fa-calendar-alt"></i> </span></div></div></div></div></div><div class="progress-background"></div><div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + \'%\' )}">{{deProgressBarWidth}}%</div></div></form></div><div class="modal-footer mb-3"><div class="col-md-12 mt-3 text-center"> <button id="deletePayButton" class="btn btn-secondary" ng-click="onDeletePayClick()" disabled>Delete</button></div></div></div></div>'
                    };

                }
            ]);

            app.controller('reportController', ['$scope', '$filter', function ($scope, $filter) {
                $scope.ListAllReports = {!AllReports

            }
            console.log($scope.ListAllReports);
            console.log("accPayperiodStart",'{!accPayperiodStart}');
            console.log("accPayDays", {!accPayDays});
            $scope.showtaxdifferently = true;
            $scope.accountReport = true;
            $scope.chkTripStatus = {!checkTripStatus}
            angular.forEach($scope.ListAllReports, function (report) {
                if (report.categoryName != undefined && report.categoryName == "Tax Liability Reports") {
                    $scope.showtaxdifferently = false;
                }
            });
         
            $('#spinner').hide();
            var url_string = $(location).attr("href");
            var url = new URL(url_string);
            $scope.AISReport = 'AIS Report';
            $scope.showteam = url.searchParams.get("showteam");
            $scope.accid = url.searchParams.get("accid");
            $scope.id = url.searchParams.get("id");
            $scope.spbsId = '{!($Label.SPBS_Account)}';
            $scope.deltaId = '{!($Label.Delta_Account)}';
            $scope.antonpaarId = '{!($Label.Anton_Paar)}';
            $scope.ERMIAcc = '{!($Label.ERMI_Account)}';
            $scope.plMAcc = '{!($Label.PLMarketing)}';
            $scope.FrampAcc = '{!($Label.FramptonConstruction)}';
            $scope.AISId = '{!($Label.AISAccount)}';
            $scope.SanguineAcc = '{!($Label.Sanguine_Account)}';
            $scope.FlatWaterAcc = '{!($Label.Flat_Water_Homes_Account)}';
            var TaxReportAccountIds = '{!($Label.TaxLiabilityReport)}';
            var ERMIAdminAcc = '{!($Label.ERMI_ADMIN_ID)}';
            $scope.adminIDs = [];
            $scope.accountTaxIDs = [];
            $scope.adminIDs = ERMIAdminAcc.split(',');
            $scope.accountTaxIDs = TaxReportAccountIds.split(',');
            console.log("Tax ids--", $scope.accountTaxIDs);
            $scope.admindriver = false;
            $scope.manId = url.searchParams.get("managerid");
            $scope.manVisible = false;
            if ($scope.manId == undefined || $scope.manId == '') {
                $scope.manVisible = false;
            }else{
                $scope.manVisible = true;
            }

            angular.forEach($scope.accountTaxIDs, function (taxId) {
                if (taxId === $scope.accid) {
                    $scope.accountReport = false;
                }
            });

            $scope.editDateModel = new EditLockDateModel();
            // $scope.stayTimeReportModel = new StayTimeReportModel();
            $scope.editTimeReportModel = new EditTimeReportModel();
            $scope.editVariableReimbursementModel = new EditVariableReimbursementModel();
            $scope.editTimeReportSummaryModel = new EditTimeReportSummaryModel();
            $scope.editMonthlyTaxReportModel = new EditMonthlyTaxReportModel();
            $scope.editTimeCustomReportModel = new EditTimeCustomReportModel();
            $scope.editNetchexReportModel = new EditNetchexReportModel();
            $scope.editTaxLiabilityReportModel = new EditTaxLiabilityReportModel();
            $scope.editTripDetailReportModel = new EditTripDetailReportModel();
            // $scope.editTripReportModel = new EditTripReportModel();
            $scope.editMonthlyNetchexReportModel = new EditMonthlyNetchexReportModel();
            $scope.editPartTimeReportModel = new EditPartTimeReportModel();
            $scope.editFullTimeReportModel = new EditFullTimeReportModel();
            $scope.deleteNetchexReportModel = new DeleteNetchexReportModel();
            $scope.admindriver = url.searchParams.get("admindriver");
            if ($scope.admindriver == undefined || $scope.admindriver == '') {
                $scope.admindriver = false;
            }
         
        }]);
        </script>
    </head>

    <body ng-app="reportModule" ng-controller="reportController" ng-cloak="true">
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="!admindriver" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>

                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">

                                    <ul class="navbar-nav flex-row">
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="!admindriver && !manVisible" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver && !manVisible" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="!admindriver && manVisible" href="/app/managerdashboardfromadmin?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver && manVisible" href="/app/managerdashboardfromadmindriver?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Mileage</a>
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Mileage</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Drivers</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Drivers</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}">Communications</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Communications</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible && accid === plMAcc">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/ManageNotification?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Communications</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/ManageNotification?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Communications</a>
                                        </li>
                                        <li class="nav-item active" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item active" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">My Details</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">My Details</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="loading-text" id="custom-loading"></div>
        </div>
        <section class="container-fluid">
            <div class="back-btn my-3">
                <a ng-show="!admindriver" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">
                    <i class="fas fa-chevron-left"></i> Back</a>
                <a ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">
                    <i class="fas fa-chevron-left"></i> Back</a>
            </div>
            <div class="report-link">
                <div class="row">
                    <div class="col-sm-6">
                        <div ng-repeat="report in ListAllReports">
                            <h3 class="mb-10 d-block">{{report.categoryName}}</h3>
                            <div ng-if="report.categoryName=='My Custom Reports'" ng-repeat="singlereport in report.currentReports">
                                <p>
                                    <a ng-show="!admindriver && !manVisible" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                    <a ng-show="!admindriver && manVisible" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                </p>
                                <p>
                                    <a ng-show="admindriver && !manVisible" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                    <a ng-show="admindriver && manVisible" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                </p>
                            </div>
                            <div ng-if="report.categoryName=='Reimbursement Reports'" ng-repeat="singlereport in report.currentReports">
                                <!-- <p><a ng-show="!admindriver" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a></p>   -->
                                <p>
                                    <a ng-show="singlereport.lockDate && singlereport.mileageLockDate == null" ng-click="editDateModel.open(singlereport.reportId)">{{singlereport.reportName}}</a>
                                </p>
                                <p>
                                    <a ng-show="!admindriver && !manVisible &&(!singlereport.lockDate && singlereport.mileageLockDate == null)" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                    <a ng-show="!admindriver && manVisible &&(!singlereport.lockDate && singlereport.mileageLockDate == null)" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                </p>
                                <p>
                                    <a ng-show="admindriver && !manVisible &&(!singlereport.lockDate && singlereport.mileageLockDate == null)" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                    <a ng-show="admindriver && manVisible && (!singlereport.lockDate && singlereport.mileageLockDate == null)" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                </p>
                                <p>
                                    <a ng-show="!admindriver && !manVisible && singlereport.mileageLockDate != null" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                    <a ng-show="!admindriver && manVisible && singlereport.mileageLockDate != null" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}">{{singlereport.reportName}}</a>
                                </p>
                                <p>
                                    <a ng-show="admindriver && !manVisible && singlereport.mileageLockDate != null" ng-href="/app/reportdetail?accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                    <a ng-show="admindriver && manVisible &&  singlereport.mileageLockDate != null" ng-href="/app/reportdetail?managerid={{manId}}&accid={{accid}}&id={{id}}&reportid={{singlereport.reportId}}&showteam={{showteam}}&admindriver=true">{{singlereport.reportName}}</a>
                                </p>
                            </div>

                            <div ng-if="report.categoryName=='Tax Liability Reports'">
                                <p>
                                    <a ng-show="!admindriver  && !manVisible" href="/app/ReportofDriverCompliance?accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'">Tax Liability</a>
                                    <a ng-show="!admindriver  && manVisible" href="/app/ReportofDriverCompliance?managerid={{manId}}&accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'">Tax Liability</a>
                                </p>
                                <p>
                                    <a ng-show="admindriver  && !manVisible" href="/app/ReportofDriverCompliance?accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'&admindriver=true">Tax Liability</a>
                                    <a ng-show="admindriver  && manVisible" href="/app/ReportofDriverCompliance?managerid={{manId}}&accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'&admindriver=true">Tax Liability</a>
                                </p>
                                <p>
                                    <a href="/app/AnnualComplianceReport?accid={{accid}}&showteam={{showteam}}&id={{id}}" title="This report includes details about drivers who's compliance status is yes">Annual Tax Liability Report </a>
                                </p>
                            
                            </div>
                        </div>
                        <!-- <div ng-if="chkTripStatus">
                            <p>
                                <a ng-click="editTripReportModel.open()"> Change Trip Status in mlog/Triplog</a>
                            </p>
                        </div> -->
                        <p ng-if="accid === SanguineAcc || accid === FlatWaterAcc">
                            <a ng-click="editVariableReimbursementModel.open()"> Bi-Weekly Payment Report</a>
                        </p>
                        <div ng-if="accid === AISId">
                            <p>
                                <a ng-click="editNetchexReportModel.open()">Biweekly Mileage Reimbursement Report</a>
                            </p>
                        </div>
                        <div ng-if="accid === FrampAcc">
                            <p>
                                <a ng-click="editTimeReportModel.open()"> Job Costing Summary Report</a>
                            </p>
                        </div>
                        <div ng-if="accid === ERMIAcc">
                            <p>
                                <a ng-click="editTripDetailReportModel.open()">Trip Detail Report</a>
                            </p>
                        </div>
                        <div ng-if="accid === plMAcc">
                            <p>
                                <a ng-click="editTimeCustomReportModel.open()">Bi-Weekly Reimbursement Report</a>
                            </p>
                        </div>
                        <div ng-repeat="admin in adminIDs ">
                            <div ng-if="id === admin">
                                <p>
                                    <a ng-click="editTimeReportModel.open()">Time and Attendance Detail Report</a>
                                </p>
                                <p>
                                    <a ng-click="editTimeReportSummaryModel.open()">Time, Attendance and Mileage Summary Report</a>
                                </p>
                                <p>
                                    <a ng-click="editMonthlyTaxReportModel.open()">Monthly Tax Report</a>
                                </p>
                                <!-- <p>
                                    <a ng-click="editTimeCustomReportModel.open()">Time and Attendance Report</a>
                                </p> -->

                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div ng-repeat="admin in adminIDs ">
                            <div ng-if="id === admin">
                                <h3 class="mb-10 d-block">NetChex Payable Reports</h3>
                                <p>
                                    <a ng-click="editNetchexReportModel.open()">Bi-weekly Time and Attendance Payment</a>
                                </p>
                                <p>
                                    <a ng-click="editFullTimeReportModel.open()">Bi-weekly Salary and Full Time Fixed Payment</a>
                                </p>
                                <p>
                                    <a ng-click="editMonthlyNetchexReportModel.open()">Monthly NetChex Variable Payment</a>
                                </p>
                                <p>
                                    <a ng-click="editPartTimeReportModel.open()">Monthly Part Time Fixed Amount Payment</a>
                                </p>

                                <p>
                                    <a ng-click="deleteNetchexReportModel.open()">Delete NetChex Report</a>
                                </p>
                            </div>
                        </div>
                        <!-- Added not visible to list account this report -->
                        <div ng-show="showtaxdifferently">
                            <div ng-show="accountReport">
                                <h3 class="mb-10 d-block">Tax Liability Reports</h3>
                                <p>
                                    <a ng-show="!admindriver && !manVisible" href="/app/ReportofDriverCompliance?accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'">Tax Liability</a>
                                    <a ng-show="!admindriver && manVisible" href="/app/ReportofDriverCompliance?managerid={{manId}}&accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'">Tax Liability</a>
                                </p>
                                <p>
                                    <a ng-show="admindriver && !manVisible" href="/app/ReportofDriverCompliance?accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'&admindriver=true">Tax Liability</a>
                                    <a ng-show="admindriver && manVisible" href="/app/ReportofDriverCompliance?managerid={{manId}}&accid={{accid}}&showteam={{showteam}}&id={{id}}&reportid ='compliancecalculationreport'&admindriver=true">Tax Liability</a>
                                </p>
                                <p>
                                    <a ng-click="editTaxLiabilityReportModel.open()">Annual Tax Liability Report </a>
                                </p>
                            </div>
                            <!-- <p ng-if="accid === spbsId || accid === deltaId || accid === antonpaarId">
                                                        <a href="/app/AnnualComplianceReport?accid={{accid}}&showteam={{showteam}}&id={{id}}" title="This report includes details about drivers who's compliance status is yes">Annual Tax Liability Report </a>
                                                    </p>
                                                    <p ng-if="accid === plMAcc">
                                                        <a href="/app/AnnualComplianceReportPLM?accid={{accid}}">Annual Tax Liability Report </a>
                                                    </p> -->
                        </div>
                    </div>
                </div>
            </div>
            <edit-lock-Date model="editDateModel"></edit-lock-Date>
            <edit-time-attendance-Report model="editTimeReportModel"></edit-time-attendance-Report>
            <edit-variable-reimbursement-Report model="editVariableReimbursementModel"></edit-variable-reimbursement-Report>
            <edit-tax-liability-Report model="editTaxLiabilityReportModel"></edit-tax-liability-Report>
            <edit-trip-detail-Report model="editTripDetailReportModel"></edit-trip-detail-Report>
            <edit-time-summary-Report model="editTimeReportSummaryModel"></edit-time-summary-Report>
            <edit-monthly-tax-Report model="editMonthlyTaxReportModel"></edit-monthly-tax-Report>
            <edit-time-custom-Report model="editTimeCustomReportModel"></edit-time-custom-Report>
            <edit-netchex-Report model="editNetchexReportModel"></edit-netchex-Report>
            <!-- <edit-trip-Report model="editTripReportModel"></edit-trip-Report> -->
            <edit-monthly-netchex-Report model="editMonthlyNetchexReportModel"></edit-monthly-netchex-Report>
            <edit-part-time-Report model="editPartTimeReportModel"></edit-part-time-Report>
            <edit-full-time-Report model="editFullTimeReportModel"></edit-full-time-Report>
            <delete-netchex-Report model="deleteNetchexReportModel"></delete-netchex-Report>
            <!-- <stay-time-report model="stayTimeReportModel"></stay-time-report> -->
        </section>


        <apex:include pageName="EMC_Common_footer" />
        <script type="text/javascript">
            $(document).ready(function () {
                $('#report-lockdatepicker').datepicker({
                    format: "mm/dd/yy",
                    autoclose: true,
                    todayHighlight: true
                });
                $('.reimbdatepicker').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.reimbdatepicker2').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.reimbenddatepicker2').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepicker1').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepicker2').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepickerModal').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepicker2Modal').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepickerReport1').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.datepickerReport2').datepicker({
                    format: "yyyy-mm-dd",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('.reimbdatepicker').datepicker().on('change', function () {
                    if ($(this).val() != '') {
                        $('#downloadReimBtn').prop('disabled', false);
                    }
                    else {
                        $('#downloadReimBtn').prop('disabled', true);
                    }
                });
                var minDate = new Date();
                minDate.setDate(minDate.getDate());
                var disabled = minDate;
                $('#report-lockdatepicker').datepicker('setEndDate', disabled);
                $('#report-lockdatepicker').datepicker('setStartDate', disabled);
        
                $('.reimbdatepicker2, .reimbenddatepicker2').on('change', function () {
                    var bistdateVal = $('.reimbdatepicker2').val().trim();
                    var biendateVal = $('.reimbenddatepicker2').val().trim();
                    var biweekDownload = bistdateVal.length == 0 || biendateVal.length == 0;
                    if (biweekDownload) {
                        $('#downloadBiReimReportBtn').prop('disabled', true);
                    }
                    else {
                        $('#downloadBiReimReportBtn').prop('disabled', false);
                    }

                });
                $('.datepicker1').on('change', function () {
                    enableDisableBtn();
                });
                $('.datepickerModal').on('change', function () {
                    enableModalDisableBtn();
                });
                $('.datepickerReport1, .datepickerReport2').on('change', function () {
                    enableModalBtn();
                });
            });
            function enableDisableBtn() {
                var startVal = $('.datepicker1').val().trim();
                // var endVal = $('.datepicker2').val().trim();
                // var disableBtn = startVal.length == 0 || endVal.length == 0;
                var disableBtn = startVal.length == 0;
                if (disableBtn) {
                    $('#submitPay').prop('disabled', true);
                    //  $('#deletePay').prop('disabled', true);
                }
                else {
                    $('#submitPay').prop('disabled', false);
                    //    $('#deletePay').prop('disabled', false);
                }
            }
            function enableModalDisableBtn() {
                var stVal = $('.datepickerModal').val().trim();
                //  var enVal = $('.datepicker2Modal').val().trim();
                var disableModalBtn = stVal.length == 0;
                if (disableModalBtn) {
                    $('#submitButton').prop('disabled', true);
                    // $('#deleteButton').prop('disabled', true);
                }
                else {
                    $('#submitButton').prop('disabled', false);
                    //  $('#deleteButton').prop('disabled', false);
                }
            }
            function enableModalBtn() {
                var stdateVal = $('.datepickerReport1').val().trim();
                var endateVal = $('.datepickerReport2').val().trim();
                var disableDateModalBtn = stdateVal.length == 0 || endateVal.length == 0;
                if (disableDateModalBtn) {
                    $('#submitPayButton').prop('disabled', true);
                    $('#deletePayButton').prop('disabled', true);
                }
                else {
                    $('#submitPayButton').prop('disabled', false);
                    $('#deletePayButton').prop('disabled', false);
                }
            }
        </script>
    </body>
</apex:page>