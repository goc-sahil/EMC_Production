<!--
  @Page Name          : roster.page
  @Description        : 
  @Author             : ChangeMeIn@UserSettingsUnder.SFDoc
  @Group              : 
  @Last Modified By   : ChangeMeIn@UserSettingsUnder.SFDoc
  @Last Modified On   : 7/26/2019, 7:16:44 PM
  @Modification Log   : 
  ==============================================================================
  Ver         Date                     Author                 Modification
  ==============================================================================
  1.0    7/26/2019, 5:15:41 PM   ChangeMeIn@UserSettingsUnder.SFDoc     Initial Version
-->
<apex:page showHeader="false" title="Plan Participants" sidebar="false" action="{!getRedirected}" controller="RosterController"
    docType="html-5.0">

    <head>
        <apex:include pageName="EMC_Common_Head" />
        <apex:include pageName="EMC_Common_Scripts" />
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.1.1/css/all.css"/>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/anime.min.js')}"></script>
        <!-- for complete excel download directive-->


        <script src="{!URLFOR($Resource.modelJs)}"></script>
        <script src="{!URLFOR($Resource.dirPagination)}"></script>

        <style type="text/css">
            @keyframes fadeIn { 
                0% {opacity: 0;} 
                100% {opacity: 1;} 
             }     
             @keyframes fadeInDown {
                0% {
                    opacity: 0;
                    transform: translateY(-40px);
                }
                100% {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            @keyframes fadeInUp {
                0% {
                    opacity: 0;
                    transform: translateY(40px);
                }
                100% {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            @keyframes roundB {
                0% {
                    opacity: 0;
                }
                100% {
                    opacity: 1;
                }
            }

            @keyframes xA {
                0% {
                    box-shadow:  #78bc427a 0px 0px 0px 10px;
                }

                70% {
                    box-shadow: rgb(106 120 209 / 0%) 0px 0px 0px 6px;
                } 

                100% {
                    box-shadow: rgb(106 120 209 / 0%) 0px 0px 0px 10px;
                }
            }

            .tips-container{
                position: absolute;
                width: 85%;
                top: 135px;
                right: -322px;
                z-index: 1;
            }

            .tips-button{
                cursor: pointer;
                border-radius: 50%;
                padding: 0px;
                background: #78bc42 !important;
                border: 0px;
                color: rgb(255, 255, 255);
                font-weight: 500;
                opacity: 0;
                width: 27px;
                height: 27px;
                font-size: 12px;
                line-height: 27px;
                box-shadow: rgb(106 120 209 / 0%) 0px 0px 0px 0px;
                animation: 2s ease 2.1s infinite normal none running xA, 0.5s ease 1.4s 1 normal forwards running roundB;
            }

            .tips-button::selection {
                background: none !important;
                text-shadow: none !important;
                color: none !important;
            }

            .tips-button:focus-visible{
                outline: none !important;
            }

            .tips-button:focus{
                outline: none !important;
            }

            #theBody:-webkit-full-screen {
                background-color: #ffffff;
                width: 100vw !important;
                height: 100vh !important;

            }

            #theBody:-webkit-full-screen #pills-alldrivers-roster {
                background-color: #ffffff;
                width: 100vw !important;
                height: 100vh !important;
                margin-bottom: 0rem !important;
                margin-top: 0rem !important;
                overflow: auto;
            }

            #theBody:-webkit-full-screen .container-fluid {
                padding-right: 0px !important;
                padding-left: 0px !important;
                margin-right: 0px !important;
                margin-left: 0px !important;
            }

            #theBody:-webkit-full-screen #example {
                margin-top: 40px;
            }

            #theBody:-webkit-full-screen .fullscreen_msg {
                display: inline-block;
                color: #78bc42;
                font-weight: bold;
                font-size: 1rem;
                padding-left: 1rem;
            }

            #theBody:-webkit-full-screen .pillsviewemployees {
                display: none;
            }

            #theBody:-webkit-full-screen .dropdown {
                display: none;
            }

            #theBody:-webkit-full-screen header {
                display: none;
            }

            #theBody:-webkit-full-screen #spinner {
                display: none;
            }

            #theBody:-webkit-full-screen .addroster {
                display: none;
            }

            #theBody:-webkit-full-screen #pills-importadminroster-tab {
                display: none;
            }

            #theBody:-webkit-full-screen .downloadbtn {
                display: none;
            }

            #theBody:-webkit-full-screen .fullscreen_msg .letter {
                line-height: 1em;
            }

            #theBody:-ms-fullscreen .close_fullscreen {
                display: inline-block !important;
                position: absolute;
                top: 3rem;
                right: 44rem;
            }

            #theBody:-webkit-full-screen #example_filter {
                top: 13px;
                right: 36px;
            }

            #theBody:-webkit-full-screen tbody {
                height: 502px;
            }

            #theBody:-webkit-full-screen #fullscreen_btn {
                display: none;
            }

            #theBody:-webkit-full-screen .deactivateroster {
                position: absolute;
                top: 13px;
                left: 58rem;
            }

            #theBody:-webkit-full-screen .mt-1 {
                position: relative;
                bottom: 54px;
            }

            #theBody:-webkit-full-screen .freezeroster {
                position: absolute;
                top: 13px;
                left: 52rem;
            }

            #theBody:-webkit-full-screen .Empfreezeroster {
                position: absolute;
                top: 13px;
                left: 47rem;
            }

            #theBody:-webkit-full-screen .unfreezeroster {
                position: absolute;
                top: 13px;
                left: 45rem;
            }

            #theBody:-webkit-full-screen .Empunfreezeroster {
                position: absolute;
                top: 13px;
                left: 46rem;
            }

            #theBody:-webkit-full-screen .deactivation_filter {
                top: 13px;
                left: 23rem;
            }

            #theBody:-webkit-full-screen #refreshdiv {
                height: 640px;
            }

            /* #theBody:-webkit-full-screen .btncancel {
                position: relative;
                left: 47rem;
                bottom: 3rem;
            }

            #theBody:-webkit-full-screen .btnupdate {
                position: relative;
                left: 59rem;
                bottom: 3rem;
            } */

            header {
                margin-bottom: 86px;
            }

            .popup-close-btn:disabled {
                opacity: .65 !important;
                cursor: not-allowed !important;
            }
            .span-error {
                float: right;
                color: red;
                font-family: 'Proxima Nova' !important;
            }

            .dropdown {
                background: #78bc42;
                position: absolute;
                top: 0px;
                left: 30rem;
            }

            .dropdown-toggle:focus {
                box-shadow: none !important;
            }

            .dropdown-toggle {
                font-size: 1rem !important;
                background: none !important;
                font-family: 'Proxima Nova Bold' !important;
                color: #fff !important;
                background-image: none !important;
                /* border-radius: .25rem !important; */
                width: 100%;
            }

            .mt-14 {
                margin-top: 14px;
            }

            .end-text {
                text-align: end;
            }

            .submitBtn {
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
            }

            .submitPayBtn {
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
            }
            .btn-primary:disabled {
              cursor: not-allowed !important;
            }
            .cancelbtn {
                margin-left: 8px !important;
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
            }

            .lockdate-modal-header {
                background-color: #78bc42;
                justify-content: center !important;
                padding: 0.5rem 0.5rem !important;
                border-top-left-radius: 0rem !important;
                border-top-right-radius: 0rem !important;
                box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
            }

            .close-lockdatebtn {
                margin: 0px !important;
            }

            .tagquestion2 {
                font-size: 12px !important;
                position: absolute;
                top: 1px;
            }

            .show>.btn-primary.dropdown-toggle:focus {
                box-shadow: 0 0 0 0.2rem rgba(34, 167, 34, 0.945) !important;
            }


            .dropdown-item:hover {
                cursor: pointer;
                background-color: #efefef;
            }

            .deactivation_filter {
                position: absolute;
            }

            .deactivateinput {
                background-image: none !important;
            }

            .perPageSpan {
                font-family: 'Proxima Nova' !important;
                color: #78bc42;
                font-weight: bold;
            }

            .mt-1 {
                margin-top: 1rem !important;
                position: absolute;
                bottom: 26px;
            }

            .w-5 {
                width: 6% !important;
            }

            .a_link {
                padding-left: 10px !important;
            }

            .name_link {
                white-space: normal;
            }

            .manager_td {
                white-space: normal;
            }

            .freezeuserchk {
                display: block;
                margin-left: 14px;
                margin-top: 11px;
            }

            .img-uncheck {
                height: 20px;
                margin-left: 14px;
                display: block;
            }

            .img-checked {
                height: 20px;
                margin-left: 3px;
                display: block;
            }

            .close_fullscreen {
                border-radius: 50% !important;
                display: none !important;
                background-color: #efefef!important;
                font-size: 12px !important;
                border-color: #efefef!important;
                color: #000 !important;

            }

            .processBtn {
                font-size: 1rem !important
            }

            .cancel-process {
                position: absolute;
                top: 0;
                right: 17rem;
            }

            .inputLockdate {
                padding-left: 6rem !important;
            }

            .datepickerinput {
                padding-right: 3rem !important;
            }

            .sticky-header {
                height: 375px;
            }

            .linkbtn {
                font-size: 14px !important;
            }

            .roleTh {
                padding: 10px 32px !important;
            }

            #email_td {
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .role_td {
                padding-left: 21px !important;
            }

            .roleTh_td {
                padding-left: 37px !important;
            }

            .name_td {
                padding-left: 10px !important;
            }

            .emailId_td {
                padding-left: 11px !important;
            }

            .deactivate_td {
                padding-left: 6px !important;
            }

            .zipcode_td {
                padding-left: 23px !important;
                /* width: 4rem; */
            }

            .driverType_td {
                padding: 10px 0px !important;
                /* width: 4rem; */
            }

            .dstates_td {
                padding-left: 26px !important;
                line-height: 1em !important;
            }

            .code_td {
                padding-left: 56px !important;
            }

            .district_td {
                padding-left: 26px !important;
            }

            .territory_td {
                padding-left: 26px !important;
            }

            #email_td:hover {
                overflow: visible;
            }

            #refreshdiv {
                margin-top: 1rem !important;
                height: 426px;
                overflow-x: visible;
            }

            #example tbody {
                display: block;
                overflow: auto;
                height: 350px;
                width: 100%;
            }



            #example thead,
            #example tbody tr {
                display: table;
                width: 100%;
                table-layout: fixed;
            }



            #example td {
                line-height: 2em;
            }

            .adminroster-driverstatus {
                margin-bottom: 5px;
            }

            .tagclose {
                font-size: 14px;
            }

            .drivingStateLink {
                font-size: 14px !important;
            }

            .spinner-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.8;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .spinner-load {
                position: fixed;
                top: 49%;
                left: 49%;
                z-index: 1000000;
            }

            .uppercase {
                text-transform: uppercase;
            }

            .dropdown-menu {
                z-index: 1060 !important;
            }

            .table-nodata {
                text-align: center;
            }

            .loader {
                border: 16px solid #f3f3f3;
                border-radius: 50%;
                border-top: 16px solid #3498db;
                width: 120px;
                height: 120px;
                -webkit-animation: spin 2s linear infinite;
                /* Safari */
                animation: spin 2s linear infinite;
            }

            .state-td {
                max-width: 230px;
            }

            .lodateModal{
                animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards
            }

            .modal-loa{
                animation: fadeInDown 500ms ease-in-out;
            }
            #modalofconfirmation {
                opacity: 1 !important;
            }

            #modalbackdrop {
                opacity: 0.7 !important;
            }

            .removeModelBackDrop {
                display: none !important;
            }

            .modal-backdrop.fade {
                opacity: 0.7 !important;
            }

            .fade:not(.show) {
                opacity: 1;
            }

            .modal-dialog {
                z-index: 1057;
            }

            .toast-progress {
                background-color: #000000 !important;
            }

            .toast-success {
                background-color: #78bc42 !important;
            }

            .toast-error {
                background-color: #FF0000 !important;
            }

            #toast-container>div {
                opacity: 5.8 !important;
                border-radius: 3px 3px 3px 3px !important;
                width: 100% !important;
                margin: 10px;
            }

            .modal-body {
                padding: 1rem !important;
            }

            span.requiredquestion {
                float: right;
                position: absolute;
                right: 25px;
                top: -15px;
            }

            span.tagquestion {
                float: right;
                position: absolute;
                right: 15px;
                top: -25px;
            }

            .tagquestion .fa-question:before {
                color: #78bc42;
                font-size: 12px;
            }

            span.tagquestion1 {
                float: right;
                right: 15px;
                top: -25px;
                margin-right: -5px;
                cursor: pointer;
            }

            .tagquestion1 .fa-question:before {
                color: #78bc42;
                font-size: 18px;
                padding-right: 40px !important;
            }

            .outer {
                position: relative;
                display: inline-block;
            }

            .outer button[disabled] {
                position: relative;
                z-index: -1;
            }

            .layer {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
            }

            .fontStyle {
                font-family: 'Proxima Nova Bold' !important;
                color: #ffffff !important;
            }

            .pagination {
                display: inline-block;
                padding-left: 0;
                margin: 0;
                border-radius: 4px;
            }

            .pagination>li {
                display: inline;
            }


            .pagination>li>a,
            .pagination>li>span {
                position: relative;
                float: left;
                padding: 6px 12px;
                margin-left: -1px;
                line-height: 1.42857143;
                color: #78bc42;
                text-decoration: none;
                background-color: #f7f7f7;
                border: 1px solid #ddd;
            }

            .pagination>li:first-child>a,
            .pagination>li:first-child>span {
                margin-left: 0;
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #f7f7f7;
                border-color: #ddd;
            }

            .pagination>.disabled>a,
            .pagination>.disabled>a:focus,
            .pagination>.disabled>a:hover,
            .pagination>.disabled>span,
            .pagination>.disabled>span:focus,
            .pagination>.disabled>span:hover {
                color: #78bc42;
                cursor: not-allowed;
                background-color: #f7f7f7;
                border-color: #ddd;
            }

            .pagination>.active>a,
            .pagination>.active>a:focus,
            .pagination>.active>a:hover,
            .pagination>.active>span,
            .pagination>.active>span:focus,
            .pagination>.active>span:hover {
                z-index: 3;
                color: #78bc42;
                cursor: default;
                background-color: #efefef;
                border-color: #404b5b;
            }

            .progress-background {
                width: 100%;
                height: 100%;
                background: #000;
                opacity: 0.4;
                top: 0px;
                left: 0px;
                position: fixed;
                z-index: 1000000;
            }

            .progress {
                z-index: 1000000;
                width: 100%;
            }

            .box.has-advanced-upload-error{
                outline: 2px dashed rgba(255, 0, 0, 0.897);
            }

            .box {
                font-size: 1.25rem;
                position: relative;
                padding: 25px 20px;
            }

            .box__input {
                width: 100%;
                overflow-x: visible;
            }

            .box__img{
            text-align: center;
            }

            .box__icon {
                width: 100%;
                fill: #78bc42;
                display: block;
                margin-bottom: 0px;
            }

            .box__file {
                position: absolute;
                top: 4px;
                left: 0px;
                opacity: 0;
            }

            .box__dragndrop{
                font-size: 18px !important;
                color: #000000;
                display: flex !important;
                justify-content: center;
                align-content: center;
                align-items: center;
            }

            .error-icon{
            --slds-c-icon-color-foreground: rgba(255, 0, 0, 0.897);
            }

            .error-text{
                color: rgba(255, 0, 0, 0.897);
                display: inline-block;
                font-size: 18px;
                font-weight: 600;
            }

            .file-message{
                display: inline-block;
                font-size: 18px;
                color: #000000;
            }

            .text-center {
                text-align: center;
            }

            .box__button__btn{
                color: #fff !important;
                border-color: #404e5e !important;
                background: #404e5e !important;
                margin: 0.375rem !important;
                word-wrap: break-word;
                white-space: normal;
                cursor: pointer;
                border: 0;
                border-radius: 0.125rem !important;
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%) !important;
                padding: 0.5rem 1.6rem !important;
                font-size: 15px !important;
                font-family: 'Proxima Nova' !important;
            }

            .box__container{
                margin: auto !important;
                position: relative;
                margin-top: 0.5rem !important;
                width: fit-content;
                word-wrap: break-word;
                white-space: normal;
                cursor: pointer;
                border: 0;
                border-radius: 0.125rem;
                box-shadow: 0 2px 5px 0 rgb(0 0 0 / 16%), 0 2px 10px 0 rgb(0 0 0 / 12%);
                color: #fff;
                background-color: #78bc42;
                border-color: #78bc42;
                padding: 0.4rem 1.2rem;
                font-size: 14px;
                font-family: 'Proxima Nova' !important;
            }
            .box__upload{
            margin: auto !important;
            position: relative;
            margin-top: 0.5rem !important;
            width: fit-content;
            }
            .pd-10{
            padding-top : 10px;
            }
            .pd-3{
            padding-top : 3px;
            }
            .w-100 {
                cursor: pointer;
                width: 100%;
            }

            .deactivateChkth {
                width: 3rem;
            }

            .loaChkth {
                width: 27pt;
            }
            .freezeChkth {
                width: 3rem;

            }

            .deactivateChktd {
                width: 1rem;
            }

            .freezeChktd {
                width: 1rem;

            }

            .ml-10 {
                margin-left: 10px !important;
            }

            .ml-32 {
                margin-left: 42rem !important;
            }

            .ml-35 {
                margin-left: 35rem;
            }

            #fullscreen_btn {
                font-size: 15px !important;
            }

            table.dataTable tbody th,
            table.dataTable tbody td {
                padding: 5px 20px;

            }

            .btnupdate {
                /* position: absolute; */
                /* right: 314px;
                bottom: 13px;
                margin-bottom: 5px !important; */
                font-size: 16px !important;
            }

            .btncancel {
                /* position: absolute;
                bottom: 13px;
                right: 410px; */
                font-size: 16px !important;
                /* margin-bottom: 5px !important; */
            }

            .displaynone {
                display: none;
            }

            .downloadbtn {
                padding: .3rem .75rem !important;
                font-size: 1rem !important;
            }

            .a-setcolor-pointer {
                color: #78bc42 !important;
                text-decoration: underline !important;
                cursor: pointer;
            }

            .a-hover-pointer {
                cursor: pointer;
            }

            .sync-button:disabled {
                cursor: not-allowed;
            }

            input[type=text]:disabled {
                background: #dddddd;
            }

            .city-invalid {
                border-color: #dc3545;
                padding-right: 2.25rem;
                background-repeat: no-repeat;
                background-position: center right calc(2.25rem / 4);
                background-size: calc(2.25rem / 2) calc(2.25rem / 2);
                background-image: url(data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23dc354…%3e%3ccircle cy='3' r='.5'/%3e%3ccircle cx='3' cy='3' r='.5'/%3e%3c/svg%3E');

            }

            /* AI-000236, AI-000234 - Starts */

            #filtericon {
                padding: 10px;
                right: 0;
                position: absolute;
                display: block;
                z-index: 4;
                cursor: pointer;
            }

            #example_filter {
                position: absolute;
                right: 56px;
                top: 0px;
            }

            #example_filter_modal {
                position: absolute;
                right: 56px;
                top: 9px;
            }

            .w-85 {
                width: 100% !important;
            }

            .export-item {
                background: #78bc42;
            }

            #pills-loginadminroster-tab {
                position: absolute !important;
                right: 0px !important;
                top: 0px !important;
                background: #efefef;
                cursor: pointer;
            }

            .nav-pills .nav-link.active {
                background: #78bc42;
                border-radius: 0px;
            }

            input.checkb1 {
                width: 30px;
                height: 20px;
                margin-top: 15px;
                margin-left: -4px;
            }

            span.tagquestionLink {
                position: absolute;
                left: 29px;
                top: -6px;
            }

            .tagquestionLink .fa-question:before {
                color: #78bc42;
                font-size: 12px;
            }

            .fullscreen_button {
                position: absolute;
                right: 0px;
                top: 0px;
            }

            .position-div {
                bottom: 0;
                left: 50%;
                transform: translate(-50%, -50%);
            }

            .tfooter {
                height: 37px;
            }


            @media screen and (min-width: 900px) and (max-width: 1600px) {
                #refreshdiv {
                    height: 640px;
                }
                #example tbody {
                    height: 483px;
                }
                #pills-alldrivers-roster {
                    margin-bottom: 0rem !important;
                }
                .position-div {
                    bottom: 12px;
                }
                .sticky-header {
                    height: 0px;
                }


            }

            @media screen and (min-width: 1440px) and (max-width: 2560px) {
                #refreshdiv {
                    height: 1145px;
                }
                #example tbody {
                    height: 984px;
                }
                #pills-alldrivers-roster {
                    margin-bottom: 0rem !important;
                }
                .position-div {
                    bottom: 12px;
                }
                .sticky-header {
                    height: 0px;
                }
                .tfooter-wrapper {
                    padding-top: 37px;
                }

            }

            @media screen and (min-width: 1025px) and (max-width: 1280px) {
                /* #example tbody{
                    height: 638px;
                } */
                .w-85 {
                    width: 100% !important;
                }

            }

            @media screen and (min-width: 768px) and (max-width: 1366px) {
                #refreshdiv {
                    height: 477px;
                }
                #example tbody {
                    height: 360px;
                }
                .tfooter-wrapper {
                    padding-top: 0;
                }

            }

            @media screen and (min-width: 1025px) and (max-width: 1165px) {
                #example_filter {
                    position: relative;
                    left: 5px;
                    top: 0px;
                }
            }

            @media (min-width: 768px) and (max-width: 1023px) {
                .span-tip{
                    top: 204px !important;
                    left: 106px;
                }
                .tips-container {
                    width: 139% !important;
                    top: 196px !important;
                    right: -216px !important;
                }
            }

            @media (min-width: 1024px) and (max-width: 1070px){
                .tips-container {
                    width: 100% !important;
                    top: 177px !important;
                    right: 18px !important;
                }
                .span-tip{
                    top: 185px !important;
                    left: 0 !important;
                }
            }

            @media screen and (max-width: 1024px) and (min-width: 992px) {
                #example_filter {
                    position: relative;
                    left: 5px;
                    top: 0px;
                }
                .deactivation_filter {
                    width: 95%;
                }
                .cancel-process {
                    position: absolute;
                    top: 0;
                    right: 4rem;
                }
            }

            @media screen and (max-width: 767px) and (min-width: 320px) {
                #example_filter {
                    position: relative;
                    right: 0px;
                    top: 0px;
                }
                .deactivation_filter {
                    position: relative;
                }
                .ml-32 {
                    margin-left: 0px !important;
                }
                .dropdown {
                    position: relative;
                    width: 40%;
                    top: 0;
                    left: 0;
                }
                .cancel-process {
                    position: relative;
                    top: 0;
                    right: 0;
                }
            }

            @media screen and (max-width: 991px) and (min-width: 768px) {
                #example_filter {
                    position: relative;
                    left: 4px;
                    right: 0px;
                    top: 2px;
                }
                .cancel-process {
                    position: absolute;
                    top: 57px;
                    right: 0rem;
                }
                .deactivation_filter {
                    width: 93%;
                }
                .w-85 {
                    width: 100% !important;
                }
                .ml-32 {
                    margin-left: 30rem !important;
                }
                .freezeroster {
                    position: absolute;
                    left: 164px;
                    top: 56px;
                }
                .unfreezeroster {
                    position: absolute;
                    top: 56px;
                    left: 252px;
                }
                .Empfreezeroster {
                    position: absolute;
                    left: 166px;
                    top: 58px;
                }
                .Empunfreezeroster {
                    position: absolute;
                    left: 166px;
                    top: 58px;
                }

            }

            .position-absolute {
                left: 4rem;
                width: 10% !important;
            }
        </style>
        <script type="text/javascript">

            var app = angular.module('rosterModule', ['ui.bootstrap', 'angularUtils.directives.dirPagination']);

            /* Download excel file*/
            app.directive('excelExport', function () {
                return {
                    restrict: 'A',
                    scope: {
                        fileName: "@",
                        data: "&exportData"
                    },
                    replace: true,
                    template: '<button class="btn btn-primary float-right downloadbtn" ng-click="download()" >Export Excel <i class="fa fa-download" ></i></button>',/*style="padding: .3rem .75rem"*/
                    link: function (scope, element) {

                        scope.download = function () {

                            function datenum(v, date1904) {
                                if (date1904) v += 1462;
                                var epoch = Date.parse(v);
                                return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
                            };

                            function getSheet(data, opts) {
                                var data2 = [];
                                var sheetdata2 = [];
                                var sheetdata = [];
                                sheetdata2.push(data[0]);

                                for (var i = 1; i < data.length; i++) {
                                    data2.push(data[i]);
                                }

                                var sheetdata = data2.sort();
                                sheetdata2 = [sheetdata2[0], ...sheetdata];
                                var ws = {};
                                var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };
                                for (var R = 0; R != sheetdata2.length; ++R) {
                                    for (var C = 0; C != sheetdata2[R].length; ++C) {
                                        if (range.s.r > R) range.s.r = R;
                                        if (range.s.c > C) range.s.c = C;
                                        if (range.e.r < R) range.e.r = R;
                                        if (range.e.c < C) range.e.c = C;
                                        var cell = { v: sheetdata2[R][C] };
                                        if (cell.v == null) continue;
                                        var cell_ref = XLSX.utils.encode_cell({ c: C, r: R });

                                        if (typeof cell.v === 'number') cell.t = 'n';
                                        else if (typeof cell.v === 'boolean') cell.t = 'b';
                                        else if (cell.v instanceof Date) {
                                            cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                                            cell.v = datenum(cell.v);
                                        }
                                        else cell.t = 's';

                                        ws[cell_ref] = cell;
                                    }
                                }
                                if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
                                return ws;
                            };

                            function Workbook() {
                                if (!(this instanceof Workbook)) return new Workbook();
                                this.SheetNames = [];
                                this.Sheets = {};
                            }

                            var wb = new Workbook(), ws = getSheet(scope.data());

                            /* add worksheet to workbook */
                            wb.SheetNames.push(scope.fileName);
                            wb.Sheets[scope.fileName] = ws;
                            var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'binary' });

                            function s2ab(s) {
                                var buf = new ArrayBuffer(s.length);
                                var view = new Uint8Array(buf);
                                for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
                                return buf;
                            }

                            saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), scope.fileName + '.xlsx');

                        };
                    }
                };
            });

            /*For tooltip*/
            app.directive('tooltip', function () {
                return {
                    restrict: "A",
                    link: function (scope, element) {
                        $(element).tooltip({
                            html: 'true'
                        });
                    }
                }
            })

            /* Model Directive Initalization For Driving States */
            var EditDrivingStatesModel = function () {
                this.visible = false;
            };

            EditDrivingStatesModel.prototype.open = function (emp, drivingstatesList) {
                this.emp = emp;
                this.drivingstatesList = drivingstatesList;
                this.visible = true;
            };
            EditDrivingStatesModel.prototype.close = function () {
                this.visible = false;
            };

            /* Model Directive For Driving States*/
            app.directive('editDrivingStates', [function () {
                return {
                    restrict: 'EA',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');
                            $("#drivingstate").tagsinput('destroy');
                            $("#drivingstate").tagsinput('refresh');

                        });

                        $(element).tooltip({
                            html: true
                        });
                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                                scope.model.emp.drivingStates = $("#drivingstate").tagsinput('items');
                            });
                        });
                    },
                    template: '<div class="modal fade show" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"><button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row mb-0"><label for="inputState" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Driving States <span class="tagquestion1"  data-toggle="tooltip" data-original-title="<b>Use State Abbreviations:</b><br/> {{model.drivingstatesList.join(\', \')}}" data-placement="right" data-html="true"><i class="fa fa-question"></i></span> </label> <div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><input ng-model="model.emp.drivingStates" id="drivingstate" type="text" placeholder="Enter Driving States" required="true" data-role="tagsinput" /><input ng-model="model.emp.drivingStates" id="drivingstatehidden" type="hidden" /></div></div></form></div></div></div></div></div>'
                };
            }]);


            /* Model Directive Initalization For Deactivation Date */
            var EditDeactivationDateModel = function () {
                this.visible = false;
            };

            EditDeactivationDateModel.prototype.open = function (emp) {
                this.emp = emp;
                this.visible = true;
            };
            EditDeactivationDateModel.prototype.close = function () {
                this.visible = false;
            };

            /* Model Directive For Deactivation Date*/
            app.directive('editDeactivationDate', [function () {
                return {
                    restrict: 'E',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');
                        });


                        scope.cancelModal = function () {
                            location.reload();
                        }
                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                            });
                        });
                    },
                    template: '<div class="modal fade show" tabindex="-1" role="dialog"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span> </button><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row"><label for="inputActivationdate:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Deactivation Date:</label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><div class="input-group"> <input id="adminroster-deactivationdatepicker" class="form-control rounded-0" placeholder="Select Deactivation Date" required="true" ng-model="model.emp.deactivaedDate" /><div class="input-group-prepend" id=""><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group-theme row" ng-if="accid === PLMarketing"><label for="inputActivationdate:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Final Payroll Amount:</label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><input class="form-control rounded-0 numinput" ng-model="model.emp.finalPayrollAmount" /></div></div></div><div class="form-group justify-content-center text-center"> <button type="button" class="btn btn-primary" data-dismiss="modal">Select</button> <button type="button" class="btn btn-secondary" data-dismiss="modal" ng-click="cancelModal()">Cancel</button></div></form></div></div></div></div>'
                };
            }]);


            /* Model Directive Initalization For LOA Date */
            var EditLOADateModel = function () {
                this.visible = false;
            };

            EditLOADateModel.prototype.open = function (emp) {
                this.emp = emp;
                this.visible = true;
            };
            EditLOADateModel.prototype.close = function () {
                this.visible = false;
            };

            /* Model Directive For LOA Date*/
            // app.directive('formatteddate', function ($filter) {
            //         return {
            //             link: function (scope, element, attrs, ctrl) {
            //                 ctrl.$formatters.unshift(function (modelValue) {
            //                     return $filter('date')(new Date(modelValue), 'MM/dd/yy');
            //                 });

            //                 ctrl.$parsers.unshift(function (viewValue) {
            //                     return $filter('date')(new Date(viewValue), 'MM/dd/yy');
            //                 });
            //             },
            //             restrict: 'A',
            //             require: 'ngModel'
            //         }
            // });
            app.directive('editLoaDate', ['$filter', function ($filter) {
                return {
                    restrict: 'E',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');
                        });
                
                        $('#adminroster-loadate').on('changeDate', function (selected) {
                             var input = selected;
                             scope.model.emp.LOAStartDate = $filter('date')(new Date(input.date), 'MM/dd/yy');
                        })
                        scope.cancelModal = function () {
                            location.reload();
                        }
                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                            });
                        });
                    },
                    template: '<div class="modal fade show" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="cancelModal()"><span aria-hidden="true">&times;</span> </button><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row"> <label for="inputActivationdate:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">LOA Start Date:</label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><div class="input-group"><input id="adminroster-loadate" class="form-control rounded-0 adminroster-loadate" placeholder="Select LOA Start Date"  ng-model="model.emp.LOAStartDate"   onkeypress="return false;" onkeydown="return false;"/><div class="input-group-prepend" id=""><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group justify-content-center text-center"> <button type="button" class="btn btn-primary" data-dismiss="modal">Select</button> <button type="button" class="btn btn-secondary" data-dismiss="modal" ng-click="cancelModal()">Cancel</button></div></form></div></div></div></div>'
                };
            }]);

            var EditLOAEndDateModel = function () {
                this.visible = false;
            };

            EditLOAEndDateModel.prototype.open = function (emp) {
                this.emp = emp;
                this.visible = true;
            };
            EditLOAEndDateModel.prototype.close = function () {
                this.visible = false;
            };

            /* Model Directive For LOA Date*/
            app.directive('editLoaEndDate', ['$filter', function ($filter) {
                return {
                    restrict: 'E',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');
                        });
                        $('#button-close').prop('disabled', true);
                        $('#button-select').prop('disabled', true);
                        $('#button-cancel').prop('disabled', true);

                        $('#adminroster-loaenddate').on('changeDate', function (selected) {
                            var stLOA = scope.model.emp.LOAStartDate;
                            scope.model.emp.LOAEndDate = $filter('date')(new Date(selected.date), 'MM/dd/yy');
                            if (stLOA) {
                                if (new Date(stLOA) <=  selected.date) {
                                    $('#button-close').prop('disabled', false);
                                    $('#button-select').prop('disabled', false);
                                    $('#button-cancel').prop('disabled', false);
                                } else {
                                    toastr.error("LOA End Date must be greater than or equal to LOA Start Date");
                                    $('#button-close').prop('disabled', true);
                                    $('#button-select').prop('disabled', true);
                                    $('#button-cancel').prop('disabled', true);
                                }
                            } else {
                                toastr.error("Please enter LOA Start Date");
                                $('#button-close').prop('disabled', false);
                                $('#button-select').prop('disabled', true);
                                $('#button-cancel').prop('disabled', true);
                                scope.model.emp.LOAEndDate = "";
                            }
                        })

                        scope.cancelModal = function () {
                            location.reload();
                        }
                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                $('#button-close').prop('disabled', true);
                                $('#button-select').prop('disabled', true);
                                $('#button-cancel').prop('disabled', true);
                                scope.model.visible = false;
                            });
                        });
                    },
                    template: '<div class="modal fade show" tabindex="-1" role="dialog"  data-backdrop="static" data-keyboard="false"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"> <button id="button-close" type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close"  ng-click="cancelModal()"><span aria-hidden="true">&times;</span> </button><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row"> <label for="inputActivationdate:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">LOA End Date:</label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><div class="input-group"><input id="adminroster-loaenddate" class="form-control rounded-0 ad-loa-date" placeholder="Select LOA End Date"  ng-model="model.emp.LOAEndDate"  onkeypress="return false;" onkeydown="return false;" /><div class="input-group-prepend" id=""><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group justify-content-center text-center"> <button id="button-select" type="button" class="btn btn-primary" data-dismiss="modal" >Select</button> <button id="button-cancel" type="button" class="btn btn-secondary" data-dismiss="modal"  ng-click="cancelModal()">Cancel</button></div></form></div></div></div></div>'
                };
            }]);

            var EditLockDateModel = function () {
                this.visible = false;
            };

            EditLockDateModel.prototype.open = function () {
                this.visible = true;
            };
            EditLockDateModel.prototype.close = function () {
                this.visible = false;
            };

            app.directive('editLockDate', ['$filter', function ($filter) {
                return {
                    restrict: 'E',
                    scope: {
                        model: '='
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');

                        });

                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        scope.accid = url.searchParams.get("accid");
                        scope.id = url.searchParams.get("id");
                        scope.reimbursement = '';
                        scope.defaultOption = "Select Reimbursement Month";
                        scope.dateObjArr = [];
                        scope.dateObjArr.splice(0, 0, scope.defaultOption);
                        scope.reimbursement = scope.dateObjArr[0];
                        var myDate = new Date();
                        var previousMonth = new Date(myDate);
                        previousMonth.setMonth(myDate.getMonth() - 1);
                        var nextMonth = new Date(myDate);
                        nextMonth.setMonth(myDate.getMonth() + 1);
                        var preMonth = $filter('date')(previousMonth, 'MM-yyyy');
                        var neMonth = $filter('date')(nextMonth, 'MM-yyyy');
                        var cuMonth = $filter('date')(myDate, 'MM-yyyy');
                        scope.dateObjArr.push(preMonth);
                        scope.dateObjArr.push(cuMonth);
                        scope.onreimbursementChange = function (reimb) {
                            scope.reimbursement = reimb;
                        }
                        scope.updateLockDate = function () {
                            scope.lockDate = $('#adminroster-lockdatepicker').val();
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RosterController.updateLockDate}', scope.accid, scope.lockDate, scope.reimbursement,
                                function (result, event) {
                                    if (event.status) {
                                        toastr.success("All the mileages are locked successfully.")
                                        setTimeout(() => {
                                            $('.lockdateModal').hide();
                                            //location.reload();
                                        }, 4000);

                                    }
                                    else {
                                        $('.lockdateModal').show();
                                        toastr.error('Some error has occur');

                                    }
                                });
                        }



                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                            });
                        });

                    },
                    template: '<div class="modal fade show lockdateModal" tabindex="-1" role="dialog"><div class="modal-dialog modal-dialog-centered"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn close-lockdatebtn" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span> </button><div class="modal-header lockdate-modal-header"><h5 class="modal-heading fontStyle">Mileage Lock Date</h5></div><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row"> <label for="inputLockdate:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable">Lock Date:<span class="tagquestion2" data-toggle="tooltip" data-placement="top" data-html="true" title="<b>Any changes made to mileage after the lock date will appear next month.</b>"><i class="fa fa-question"></i></span> </label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"><div class="input-group"> <input id="adminroster-lockdatepicker" class="form-control rounded-0" placeholder="Select Lock Date" required="true" ng-model="selectedlockDate" /><div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-calendar-alt"></i></span></div></div></div></div><div class="form-group-theme row"> <label for="Reimbursement:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable">Reimbursement: <span class="tagquestion2" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select reimbursement</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"> <select ng-model="reimbursement" ng-change="onreimbursementChange(reimbursement)" class="browser-default custom-select custom-select-xl"><option ng-repeat="dateobj in dateObjArr track by $index" ng-selected="{{reimbursement == dateobj}}" value="{{dateobj}}">{{dateobj}}</option> </select></div></div><div class="form-group justify-content-center text-center"> <button class="btn btn-primary submitBtn" ng-click="updateLockDate()">Submit</button> <button type="button" class="btn btn-secondary cancelbtn" data-dismiss="modal">Cancel</button></div></form></div></div></div></div>'
                };

            }]);

            /* For LOA (Leave of absence) */
            var EditLOAProcessModel = function () {
                this.visible = false;
            };

            EditLOAProcessModel.prototype.open = function () {
                this.visible = true;
            };
            EditLOAProcessModel.prototype.close = function () {
                this.visible = false;
            };

            app.directive('editLoa', ['$filter', function ($filter) {
                return {
                    restrict: 'E',
                    scope: {
                        model: '=',
                        someCtrlFn: '&callbackFn'
                    },
                    link: function (scope, element, attributes) {
                        scope.$watch('model.visible', function (newValue) {
                            var modalElement = element.find('.modal');
                            modalElement.modal(newValue ? 'show' : 'hide');

                        });

                        // Format date in yyyy-MM-dd format
                        function FormatDate(elDate) {
                            var today = new Date(elDate);
                            var dd = String(today.getDate()).padStart(2, '0');
                            var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                            var year = today.getFullYear();
                            var yy = year.toString().substr(-2);
                            // today = yyyy + '-' + mm + '-' + dd;
                            today = mm + '/' + dd + '/' + yy
                            return today;
                        }
                        function filterByYear(item) {
                            var a = item.split(' to ');
                            if (new Date(a[0]).getFullYear() === new Date().getFullYear()) {
                                return true;
                            } else {
                                if (new Date(a[1]).getFullYear() === new Date().getFullYear()) {
                                    return true;
                                }
                            }
                        }
                        function payDate(date) {
                            var st = new Date(date);
                            var today = new Date();
                            var i = 0;
                            var dateArr = [];
                            var end;
                            var pDays = scope.payPeriodDays
                            var currentYear = (new Date()).getFullYear();
                            if (date) {
                                for (i = 0; i <= dateArr.length; i++) {
                                  //  if (currentYear === st.getFullYear()) {
                                        if (st < today) {
                                            end = new Date(st);
                                            end = new Date(end.setDate(end.getDate() + pDays));
                                            let finaldate = FormatDate(st) + ' to ' + FormatDate(end)
                                            dateArr.push(finaldate);
                                            st = new Date(end.setDate(end.getDate() + 1));
                                        }

                                   // }
                                }
                                let arrByYear = dateArr.filter(filterByYear)
                                return arrByYear;
                            }
                        }
                        var url_string = $(location).attr("href");
                        var url = new URL(url_string);
                        scope.accid = url.searchParams.get("accid");
                        scope.id = url.searchParams.get("id");
                        scope.biweeklylist = '';
                        scope.defaultOption = "Select Payroll Period";
                        scope.disableSubmitBtn = true;
                        scope.payPeriodDays = {!accPayDays};
                        scope.payPeriodStDate = $filter('date')(new Date('{!accPayperiodStart}'), 'MM/dd/yy');
                        scope.payrollArr =   payDate(scope.payPeriodStDate);
                        scope.payrollArr.splice(0, 0, scope.defaultOption);
                        scope.biweeklylist = scope.payrollArr[0];
                        scope.payrollSt = "";
                        scope.payrollEnd = "";
                      
                        scope.onPayrollChange = function(payroll){
                            if(payroll != "Select Payroll Period"){
                                var payRollSt = payroll.split(" to ");
                                scope.payrollSt = $filter('date')(new Date(payRollSt[0]), 'yyyy-MM-dd');
                                scope.payrollEnd =$filter('date')(new Date(payRollSt[1]), 'yyyy-MM-dd');
                                scope.disableSubmitBtn = false;          
                            }else{
                                scope.disableSubmitBtn = true;          
                            }
                                             
                        }

                        scope.sendPayroll = function(){
                            $('#spinner').show();
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RosterController.BiweekReimRecord}', scope.payrollSt, scope.payrollEnd, scope.accid,
                                function (result, event) {
                                    if (event.status) {
                                      if(result){
                                        scope.$apply(function () {
                                            scope.someCtrlFn({list: result})
                                            scope.biweeklylist = scope.payrollArr[0];
                                            scope.disableSubmitBtn = true;
                                            scope.model.visible = false;
                                            $('#spinner').hide();
                                            var forms = document.getElementsByClassName('needs-validation');
                                            angular.forEach(forms, function (form) {
                                                $(form).removeClass('was-validated');
                                            })
                                        })
                                      }
                                    }
                                    else {
                                        $('#spinner').hide();
                                        toastr.error('Some error has occur');
                                    }
                                });
                        }
                        scope.closePayrollModal = function(){
                            scope.biweeklylist = scope.payrollArr[0];
                            scope.disableSubmitBtn = true;
                        }

                        element.on('shown.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = true;
                            });
                        });

                        element.on('hidden.bs.modal', function () {
                            scope.$apply(function () {
                                scope.model.visible = false;
                            });
                        });

                    },
                    template: '<div class="modal fade show" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false"><div class="modal-dialog modal-dialog-centered modal-loa" id="loa-modal-div"><div class="modal-content rounded-0"> <button type="button" class="close popup-close-btn close-lockdatebtn" data-dismiss="modal" aria-label="Close" ng-click="closePayrollModal()"><span aria-hidden="true">&times;</span> </button><div class="modal-header lockdate-modal-header"><h5 class="modal-heading fontStyle">Leave Of Absence</h5></div><div class="modal-body"><form name="signup" class="form" novalidate="true"><div class="form-group-theme row"> <label for="PayRoll:" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-form-label form-lable">Payroll Period: <span class="tagquestion2" data-toggle="tooltip" data-placement="top" data-html="true" title="" data-original-title="<b>Please select payroll period</b>"> <i class="fa fa-question"></i> </span> </label><div class="col-xl-7 col-lg-7 col-md-7 col-sm-7"> <select ng-model="biweeklylist" ng-change="onPayrollChange(biweeklylist)" class="browser-default custom-select custom-select-xl"><option ng-repeat="payroll in payrollArr" ng-selected="{{biweeklylist == payroll}}" value="{{payroll}}">{{payroll}}</option> </select></div></div><div class="form-group justify-content-center text-center"> <button class="btn btn-primary submitPayBtn" ng-click="sendPayroll()" ng-disabled="disableSubmitBtn">Submit</button></div></form></div></div></div></div>'
                };

            }]);
            app.controller('RosterController', ['$scope', '$modal', '$log', '$compile', '$timeout', '$window', '$filter', function ($scope, $modal, $log, $compile, $timeout, $window, $filter) {
                var url_string = $(location).attr("href");
                var url = new URL(url_string);
                var valueofreport = '{!($Label.RoleAdminDriver)}';
                var errorMsg = '{!($Label.ExceptionLabel)}';
                $scope.accountERMI = '{!($Label.ERMI_Account)}';
                $scope.accountSurfacePrep = '{!($Label.SurfacePrep_Account)}';
                $scope.solarisOilfield = '{!($Label.Solaris_Oilfield)}';
                $scope.designAIR = '{!($Label.DesignAir)}';
                $scope.NWPipe = '{!($Label.NWPipeAccount)}';
                $scope.SPBSAcc = '{!($Label.SPBS_Account)}';
                $scope.EngGypAcc = '{!($Label.NewEnglandGypsum)}';
                $scope.PLMarketing = '{!($Label.PL_Marketing)}';
                $scope.firstPayroll = ["50%", "100%"];
                $scope.manId = url.searchParams.get("managerid");
                $scope.manVisible = false;
                $scope.accTrueDialog = {!accTrueDialog}
                console.log("accTrueDialog", $scope.accTrueDialog);
                if ($scope.manId == undefined || $scope.manId == '') {
                    $scope.manVisible = false;
                } else {
                    $scope.manVisible = true;
                }
                var freezeProperty = false;
                var unfreezebtnproperty = false;
                var massResetPassword = false;
                var enabledUser = false;
                $scope.id = url.searchParams.get("id");
                $scope.accid = url.searchParams.get("accid");
                $scope.showteam = url.searchParams.get("showteam");
                $scope.admindriver = false;
                $scope.admindriver = url.searchParams.get("admindriver");
                $scope.FromDate = $filter('date')(new Date(), "MMddyyyyHHmmss");
                if ($scope.admindriver == undefined || $scope.admindriver == '') {
                    $scope.admindriver = false;
                }
                $scope.drivingStatesList = {!DrivingStates
            };
            $scope.accountId = '0013r00002EkwWMAAZ';
            $scope.isPlAccountAbsence = false;
            $scope.search = "";
            $scope.size = '10mb';
            $scope.employeeslist = [];
            $scope.employeeslistLOA = [];
            $scope.editList = [];
            $scope.inputTag = '';
            $scope.isSync = true;
            $scope.IsDisplay = false;
            $scope.editDialog = new EditDrivingStatesModel();
            $scope.editDateModel = new EditDeactivationDateModel();
            $scope.editLOAModel = new EditLOADateModel();
            $scope.editEndLOAModel = new EditLOAEndDateModel();
            $scope.editLockDateModel = new EditLockDateModel();
            $scope.editLOAProcessModel = new EditLOAProcessModel(); 
            $scope.backButton = false;
            $scope.showCancelProBtn = false;
            $scope.checkboxobjDeactivateShow = false;
            $scope.checkboxobjLoaShow = false;
            $scope.checkboxobjEnableUserShow = false;
            $scope.checkboxobjConcurShow = false;
            $scope.checkboxobjFreezeShow = false;
            $scope.showMassDeactivatebtn = false;
            $scope.showSaveLOABtn = false;
            $scope.showMassEnablebtn = false;
            $scope.showMassConcurbtn = false;
            $scope.showResetPasswordbtn = false;
            $scope.showEnableUserbtn = false;
            $scope.showMultipleAction = true;
            $scope.showMassFreezeEmployeebtn = false;
            $scope.showMassUnFreezeEmployeebtn = false;

            //Pagination
            $('#spinner').show();
            $scope.pageSizeOptions = ['15', '25', '50', '100', '200'];
            $scope.itemPerPage = $scope.pageSizeOptions[3];
            $scope.pageSizeChanged = function () {
                $scope.itemsPerPage = parseInt($scope.itemPerPage);
            }
            var choosenfileType = '';

            var beforeUpdateEmployees = [];

            /* Toaster Option */
            //this.name = 'test';
            this.setOptions = function () {
                toastr.options.positionClass = "toast-bottom-right";
                toastr.options.closeButton = true;
                toastr.options.progressBar = true;
                //  toastr.options.hideMethod = 'noop';
            };

            $scope.importedFileErrors = {};
            $scope.waiting = false;

            this.setOptions();
            this.clear = function () {
                toastr.clear();
            };

        
            // console.log(window.opener.parent.document.getElementById('hidden_user_id') )
            /* Trip Status For Sync Mileages */
            // $scope.tripStatus = [];
            // $scope.tripStatus[0] = "Choose Trip Status...";
            // $scope.tripStatus[1] = "Un Submitted";
            // $scope.tripStatus[2] =  "Submitted";
            // $scope.statusList = $scope.tripStatus[0];
            /* Sync All Mileages Based On Last month and current month */
            $scope.synMonth = [];
            $scope.synMonth[0] = "Choose Syn Month...";
            $scope.syncMonthList = $scope.synMonth[0];
            var currentDate = new Date();
            var previousDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
            var lastSyncMonth = $filter('date')(previousDate, 'MM-yyyy');
            var currentSyncMonth = $filter('date')(currentDate, 'MM-yyyy');
            $scope.synMonth.push(lastSyncMonth);
            $scope.synMonth.push(currentSyncMonth);
            /* Toaster Option Complete with clear funtion */

            $scope.contactData = ''; // For Insert And update use
            $scope.IsShow = false; // Use for Add tab Field show hide
            $scope.IsShowLinkBtn = false;
            $scope.IsVisible = true; // Visible for tab 
            $scope.companyList = {!Company}
           
            /* Remove State start*/
            $scope.removeState = function (emp, index) {
                emp.drivingStates.splice(index, 1);
            }
            /* Remove State End*/

            $scope.loadDatePicker = function (deactivateDate) { /*, lastPayDate*/
                c(deactivateDate);
                loaddatepicker(deactivateDate); /*, lastPayDate*/
                setTimeout(function () {
                    refreshForm();
                }, 10)
            }

            $scope.loadDatePickerL = function (deactivateDate) { /*, lastPayDate*/
                c(deactivateDate);
                loaddatepickerforloa(deactivateDate); /*, lastPayDate*/
                setTimeout(function () {
                    refreshForm();
                }, 10)
            }

            $scope.loadDatePickerLEnd = function (d){
                c(d);
                loaddatepickerforloaenddate(d); /*, lastPayDate*/
                setTimeout(function () {
                    refreshForm();
                }, 10)
            }
            /* For Hide Tab*/
            $scope.Hide = function () {
                $scope.IsVisible = false;
                $scope.showMultipleAction = false;
            }
            /* For Show Tab*/
            $scope.Show = function () {
                $scope.search = "";
                $scope.IsVisible = true;
                $scope.backButton = false;
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = false;
                $scope.IsVisibleLoginDriver = false;
                $scope.showMultipleAction = true;
                $scope.refreshEmployees();
            }
            $scope.editBulkDateModel = function (emp) {
                $('.modal-backdrop').show();
                $('.deactivateDatelog').show();

            }
            $scope.editSyncAllMileageModel = function (emp) {
                $scope.isPlAccountAbsence = false;
                $('.modal-backdrop').show();
                $('.synAllModal').show();
            }
            $scope.Showback = function () {
                location.reload();
            }

            $scope.hideErrorModal = function () {       
                $('.modal-backdrop').hide();
                $('.error-log').hide();
                $('.duplicate-log').hide();
                $('.deactivateDatelog').hide();
                $('.synAllModal').hide();
            }

            $scope.endProcess = function () {
                $("#dropdownMenuButton").text('Activity');
                $scope.showCancelProBtn = false;
                $scope.checkboxobjDeactivateShow = false;
                $scope.checkboxobjLoaShow = false;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjConcurShow = false;
                $scope.checkboxobjFreezeShow = false;
                $scope.showMassDeactivatebtn = false;
                $scope.showSaveLOABtn = false;
                $scope.showMassEnablebtn = false;
                $scope.showMassConcurbtn = false;
                $scope.showResetPasswordbtn = false;
                $scope.showEnableUserbtn = false;
                $scope.showMultipleAction = true;
                $scope.showMassFreezeEmployeebtn = false;
                $scope.showMassUnFreezeEmployeebtn = false;
                $scope.isPlAccountAbsence = false;
                freezeProperty = false;
                unfreezebtnproperty = false;
                enabledUser = false;
                massResetPassword = false;
            }
            $scope.refreshEmployees = function () {

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.RosterController.getlistAllEmployees}', $scope.accid, $scope.id,
                    function (result, event) {
                        if (event.status && result != null) {

                            if (result != '' && result != undefined) {

                                $scope.$apply(function () {
                                    $scope.employeeslist = JSON.parse(result);
                                    console.log('added->', $scope.employeeslist);
                                    angular.forEach($scope.employeeslist, function (e) {
                                        e.loaLabel = '';
                                    })
                                    //formatDateForEmployeeList($scope.employeeslist);
                                    $scope.addfordownload();
                                });
                            }
                            else {
                                $scope.$apply(function () {
                                    $scope.employeeslist = [];
                                    $scope.addfordownload();

                                });
                            }

                        }
                    },
                    { escape: false }
                );


            }

            //  if(window.opener === null) {
            $scope.refreshEmployees();
            //   }




            //Open Modal - AI-000179 Edited By Megha


            //  $scope.employeeDialog = new EmployeeofcurrentAdmin();

            // $scope.loginas = function () {
            //         angular.element(document.querySelector("#pills-loginadminroster-tab")).addClass(" active");
            //         //$scope.search == "";
            //         Visualforce.remoting.Manager.invokeAction(
            //             '{!$RemoteAction.RosterController.getLoginAsData}',$scope.accid,
            //             function (result, event) {
            //                 if (event.status) {
            //                     var employeeRoleList = JSON.parse(result);
            //                     $scope.$apply();

            //                 }
            //             },
            //             { escape: false }
            //         );
            // }
            // $scope.openmodalForloginas = function () {
            //         angular.element(document.querySelector("#pills-loginadminroster-tab")).addClass(" active");
            //         $scope.search == "";
            //         Visualforce.remoting.Manager.invokeAction(
            //             '{!$RemoteAction.RosterController.getLoginAsData}',$scope.accid,
            //             function (result, event) {
            //                 if (event.status) {
            //                     var employeeRoleList = JSON.parse(result);
            //                     $scope.exportEmployeeList = [];
            //                     $scope.exportEmployeeList.push(["Name", "Email"]);
            //                     angular.forEach(employeeRoleList, function (item, key) {
            //                         $scope.exportEmployeeList.push([item.Name, item.Email]);
            //                     });
            //                     $scope.$apply();
            //                     $scope.fileName = 'Employee List' +' '+ $scope.FromDate;
            //                     $scope.employeeDialog.open($scope.fileName,employeeRoleList,$scope.showteam);
            //                 }
            //             },
            //             { escape: false }
            //         );
            // }
            // AI-000179 Edited By Megha - Ends
            $scope.addfordownload = function () {
                // EmployeeList Come from Controller
                var empToUpdate = formatShortDateForEmployeeList(angular.copy($scope.employeeslist));
                $scope.ToDate = $filter('date')(new Date(), "MMddyyyy");
                $scope.fileName = "Plan Participants" + ' ' + $scope.ToDate;
                $scope.emplistfordownload = [];
                if ($scope.accid === $scope.accountERMI) {
                    $scope.emplistfordownload.push(["EmployeeID", "Status", "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "District", "Territory", "Code", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version",  "App Setting", "Business and After Hours", "Last Trip Date"]);
                    angular.forEach(empToUpdate, function (item, key) {
                        $scope.emplistfordownload.push([item.employeeId, item.driverType, item.firstName, item.lastName, item.email, item.city, item.state, item.zipCode, item.cellphone, item.district, item.territory, item.code, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                    });
                }
                else if ($scope.accid === $scope.accountId) {
                    $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "GL Code", "Sage 100 ID", "App Setting", "Business and After Hours", "Last Trip Date"]);
                    angular.forEach(empToUpdate, function (item, key) {
                        $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName, item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.glcode, item.sage100ID, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);

                    });
                }
                else if ($scope.accid === $scope.PLMarketing) {
                    $scope.emplistfordownload.push(["EmployeeID" , "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "Division", "Job Title", "Department", "App Setting", "Business and After Hours", "Last Trip Date"]);
                    angular.forEach(empToUpdate, function (item, key) {
                        $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName, item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.divison, item.jobtitle, item.deptPL, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                    });
                }
                else if($scope.accid === $scope.NWPipe){
                    $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last Name", "Company", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "App Setting", "Business and After Hours", "Last Trip Date"]);
                        angular.forEach(empToUpdate, function (item, key) {
                            $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName, item.company, item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                        });
                }
                else if($scope.accid === $scope.solarisOilfield){
                    $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Cost Code", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "App Setting", "Business and After Hours", "Last Trip Date"]);
                        angular.forEach(empToUpdate, function (item, key) {
                            $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName, item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.costCode, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                        });
                }
                else if($scope.accid === $scope.accountSurfacePrep){
                    $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Region", "Job Title", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "App Setting", "Business and After Hours", "Last Trip Date"]);
                    angular.forEach(empToUpdate, function (item, key) {
                            $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName,  item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.am, item.an, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                     });
                }
                else {
                    if ($scope.accid === $scope.designAIR) {
                        $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last Name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "Job Title", "Department", "App Setting", "Business and After Hours", "Last Trip Date"]);
                        angular.forEach(empToUpdate, function (item, key) {
                            $scope.emplistfordownload.push([ item.employeeId, item.firstName, item.lastName, item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.jobtitle, item.department, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                        });
                    } else {
                        $scope.emplistfordownload.push(["EmployeeID", "First Name", "Last name", "Email", "City", "State", "Zip Code", "Cell Phone", "Driving States", "Activation Date", "Frozen Date", "Deactivation Date", "Role", "Manager", "Standard Vehicle", "Fixed Amount", "Compliance", "Average Monthly Reimbursement", "Average Monthly Mileage", "App Version", "App Setting", "Business and After Hours", "Last Trip Date"]);
                        angular.forEach(empToUpdate, function (item, key) {
                            $scope.emplistfordownload.push([item.employeeId, item.firstName, item.lastName,  item.email, item.city, item.state, item.zipCode, item.cellphone, item.drivingStates != null ? item.drivingStates.join(';') : '', item.activationDate, item.freeze, item.deactivaedDate, item.role, item.managerName, item.vehicalType, item.fixedamount, item.compliancestatus, item.totalreimbursement, item.monthlymileageLimit, item.appVersion, item.appSetting, (item.Businesshours === null) ? "" : item.Businesshours, (item.lastSynced === "") ? "" : $filter('date')(new Date(item.lastSynced), "MM/dd/yy")]);
                        });
                    }
                }

            }


            /* File Upload Start*/
            $scope.IsVisibleUpdatebtn = false;
            $scope.filedata = '';
            $scope.fileUploadName = '';
            $scope.fileUploadSize = '';
            $scope.errorUploading = '';
            $scope.IsVisiblebtn = false;
            $scope.IsVisibleText = false;
            $scope.isError = false;
            $scope.enableBar = false;
            $scope.deProgressBarWidth = 20;
            $scope.iCount = 10;

            $scope.loadDropfile = function (files) {
                $scope.IsVisiblebtn = true;
                $scope.IsVisibleText = true;
                $scope.isError = false;
                var file = files[0]
                choosenfileType = files[0].type;
                $scope.fileUploadName = file.name;
                $scope.fileUploadSize = file.size;
                var reader = new FileReader();
                reader.onload = function (e) {
                    // handle onload
                    $scope.filedata = reader.result;

                };
                reader.readAsText(file);
                $scope.$apply();
            }

            $scope.file_changed = function (element) {
                $scope.IsVisiblebtn = true;
                $scope.IsVisibleText = true;
                $scope.isError = false;
                var file = element.files[0];
                choosenfileType = file.type;
                $scope.fileUploadName = file.name;
                $scope.fileUploadSize = file.size;
                var reader = new FileReader();
                reader.onload = function (e) {
                    // handle onload
                    $scope.filedata = reader.result;
                };
                reader.readAsText(file);
              //  reader.readAsText(file);
                $scope.$apply();
            };

            /* MM/dd/yy with '/' in string format start*/
            $scope.formateDate = function (dateString) {
                if (dateString != '' && dateString != null) {
                    let datesplit = dateString.split('/');
                    if (datesplit[2].length > 2)
                        return (datesplit[0].padStart(2, '0') + '/' + datesplit[1].padStart(2, '0') + '/' + datesplit[2].substr(2, 3));
                }

                return dateString;
            }
            /* MM/dd/yy format End*/

         
            /* full formate Start*/
            formatFulllDateForEmployeeList = function (records) {

                angular.forEach(records, function (value, key) {
                    value.deactivaedDate = fullDateFormat(value.deactivaedDate);
                    //  value.lastPayDate = fullDateFormat(value.lastPayDate);
                    value.activationDate = fullDateFormat(value.activationDate);
                    value.addedDate = fullDateFormat(value.addedDate);
                });

                return records;
            }
            /* full formate End*/

            /* full formate Start*/
            formatShortDateForEmployeeList = function (records) {
                angular.forEach(records, function (value, key) {
                    value.deactivaedDate = $scope.formateDate(value.deactivaedDate);
                    // value.lastPayDate = $scope.formateDate(value.lastPayDate);
                    value.activationDate = $scope.formateDate(value.activationDate);
                    value.addedDate = $scope.formateDate(value.addedDate);
                });

                return records;
            }
            /* full formate End*/

            /* MM/dd/yyyy format Start*/
            function fullDateFormat(strDate) {
                if (strDate != '' && strDate != null && strDate != undefined) {
                    let datesplit = strDate.split('/');
                    let year = (new Date()).getFullYear();
                    if (datesplit[2].length == 2)
                        return (datesplit[0] + '/' + datesplit[1] + '/' + year.toString().substr(0, 2) + datesplit[2]);
                }
                return strDate;
            }
            /* MM/dd/yyyy format End*/

            window.onmessage = function (event) {
                console.log("Listening");
                document.getElementById("vfFrame").removeAttribute("src");
                angular.element(document.querySelector("#vfFrame")).addClass("d-none");
            }

            $scope.intializeTips = function(){
                let messageKey = 'Roster'; 
                let iframeurl = 'https://'+window.location.host+`/app/mBurseHelpText?key=${messageKey}`;
                angular.element(document.querySelector("#vfFrame")).removeClass("d-none");
                document.getElementById("vfFrame").setAttribute("src", iframeurl);
            }

            $scope.uploadFile = function (event) {
                let filetype = '.csv,text/csv';
                if (filetype.indexOf(choosenfileType) == -1) {
                    $scope.isError = true;
                    $scope.IsVisiblebtn = false;
                    $scope.errorUploading = 'Please Choose Proper File Format.';
                    toastr.error('Please Choose Proper File Format.');
                    event.stopPropagation();
                    event.preventDefault();
                    return
                }

                $scope.enableBar = true;
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.readFromFile}', $scope.filedata, $scope.accid, $scope.id,
                    function (result, event) {
                        if (event.status) {
                            // let resultArray = result.split('::');

                            // if (resultArray[0] == 'Error') {

                            //     if (resultArray.length > 2) {
                            //         $scope.importedFileErrors = JSON.parse(resultArray[3]);
                            //         $scope.$apply();
                            //         $('.duplicate-log').show();
                            //         toastr.error(resultArray[1]);
                            //     } else {
                            //         $scope.importedFileErrors = JSON.parse(resultArray[1]);
                            //         $scope.$apply();
                            //         $('.error-log').show();
                            //     }
                            //     $('.modal-backdrop').show();

                            // } else {
                            //     toastr.success(resultArray[1]);

                            //     if (resultArray.length > 2) {
                            //         $scope.importedFileErrors = JSON.parse(resultArray[3]);
                            //         $scope.$apply();
                            //         $('.duplicate-log').show();
                            //     } else {
                            //         $('.modal-backdrop').hide();
                            //     }
                            // }
                            $scope.CheckStatus(result);
                        }
                    },
                    { escape: false }
                );
            }

            $scope.CheckStatus = function (runTime) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.RosterController.CheckStatus}', runTime,
                    function (result, event) {
                        if (event.status) {
                            console.log('Status Check', result);
                            $scope.iCount += ($scope.iCount >= 70 ? 1 : 10);
                            if (result.enablePollar) {
                                $scope.deProgressBarWidth = $scope.deProgressBarWidth == 20 ? 0 : $scope.deProgressBarWidth;
                                $scope.deProgressBarWidth = ($scope.iCount != 0 ? ($scope.iCount > 95 ? 95 :  $scope.iCount) / 100 * 100 : 0);
                                setTimeout(function () {
                                    $scope.CheckStatus(runTime);
                                }, 2000);
                            } else {
                                if(result.Message === 'Completed'){
                                    document.getElementById('file').value = '';
                                    $scope.IsVisiblebtn = false;
                                    $scope.IsVisibleText = false;
                                    toastr.success('Successfully Imported data.');
                                   $('#adminrosterImportProcess').modal('toggle');
                                    location.reload();
                                }else{
                                    toastr.error(result.Message);
                                    $('#adminrosterImportProcess').modal('toggle');
                                }
                            }
                        }
                        else {
                            toastr.error('Some error has occur');
                        }
                        $scope.$apply();
                    }, { escape: false }
                );
            }
            /* File Upload Complete*/

            /* New contact Start*/
            function obj_contactnew() {
                refreshForm();
                let dateAndVehicleList = {!PickListValuesIntoList
            }
            let tempaccdate = dateAndVehicleList[0];
            let tempdt = new Date(tempaccdate);
            let d = $filter('date')(tempdt, "MM/dd/yy")
            var splicevehiclelist = dateAndVehicleList.splice(1, 1);

            if (splicevehiclelist.length > 0) {
                $scope.vehiclelist = splicevehiclelist[0].split(";");
            }
            else {
                $scope.vehiclelist = [];
            }

            return contact = {
                //activationDate : d,
                role: '',
                managerId: '',
                vehicalType: '',
                managerName: '',

            }
                }



            /* New contact End*/
            /* Field Edit Funtion Start*/
            $scope.empupdatelist = [];
            $scope.selectedRow = null;
            // $scope.isCheckedForSync = false;
            $scope.selectedManager = function (event, emplist) {
                var name = event.target.options[event.target.options.selectedIndex].text;
                emplist.managerName = name;

            }


            // AI-000460 Starts -->
            $scope.displayCheckboxForMassResetPassword = function () {
                $scope.isPlAccountAbsence = false;
                massResetPassword = true;
                $scope.checkboxobjDeactivateShow = true;
                $scope.checkboxobjFreezeShow = false;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjConcurShow = false;
            }

            $scope.resetPassword = function () {
                $scope.massResetPasswordList = [];
                angular.forEach($scope.employeeslist, function (emp) {
                    if (emp.IsMassDeactivated === true) {
                        $scope.massResetPasswordList.push(emp.userid);
                    }
                });
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.massResetPassword}', JSON.stringify($scope.massResetPasswordList),
                    function (result, event) {
                        if (event.status) {

                            toastr.success('Reset link is successfully send to driver.');
                            massResetPassword = false;
                            $('#spinner').hide();
                            setTimeout(function () {
                                location.reload();
                            }, 2000);

                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }


            $scope.displayCheckboxForEnableUser = function () {
                $scope.checkboxobj = {} 
                $scope.checkboxobj.isCheckedAllForEnableUser = false;
                $scope.isPlAccountAbsence = false;
                $scope.checkboxobjEnableUserShow = true;
                $scope.checkboxobjDeactivateShow = false;
                $scope.checkboxobjConcurShow = false;
                $scope.checkboxobjFreezeShow = false;
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassEnable = false;
                });
            }

            $scope.CheckUncheckAllForEnableUser = function (CheckUncheckAllForEnableUser) {

                $scope.checkboxobj.isCheckedAllForEnableUser = CheckUncheckAllForEnableUser;
                if ($scope.checkboxobj.isCheckedAllForEnableUser == true) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = true;
                        $scope.showMassConcurbtn = false;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMassEnablebtn = false;
                    $scope.showMassConcurbtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassEnable = $scope.checkboxobj.isCheckedAllForEnableUser;
                    $scope.empupdatelist.push(emp);
                });

            }

            $scope.CheckUncheckForEnableUser = function (emp) {
                var mylistlen = $scope.employeeslist.length;
                var count = 0;
                angular.forEach($scope.employeeslist, function (item) {
                    if (item.IsMassEnable) {
                        count++;
                    }
                });

                if (count > 0) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showMassEnablebtn = true;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMassEnablebtn = false;
                    $scope.showMassConcurbtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                /* EMC - 133 Select all functionality of Checkbox is not working on "Activity" on Driver Page */
                if (count === mylistlen) {
                    $scope.checkboxobj.isCheckedAllForEnableUser = true;
                } else {
                    $scope.checkboxobj.isCheckedAllForEnableUser = false;
                }
                /* EMC - 133 ends */
                $scope.empupdatelist.push(emp);
            }

            $scope.enableUser = function () {
                $scope.massEnableUserList = [];
                angular.forEach($scope.employeeslist, function (emp) {
                    if (emp.IsMassEnable === true) {
                        $scope.massEnableUserList.push(emp.userid);
                    }
                });
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.massEnableUser}', JSON.stringify($scope.massEnableUserList),
                    function (result, event) {
                        if (event.status) {

                            toastr.success('Successfully Enable User.');
                            massEnableUser = false;
                            $('#spinner').hide();
                            setTimeout(function () {
                                location.reload();
                            }, 2000);

                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            // $scope.CheckUncheckForSync = function(check){
            //     $scope.isCheckedForSync = check;
            //     console.log("Check", $scope.isCheckedForSync);
            // }
            $scope.handleStatus = function (status) {
                if (status != 'Choose Trip Status...') {
                    $scope.isSync = false;
                } else {
                    $scope.isSync = true;
                }
            }
            $scope.handleMonth = function (mon) {
                if (mon != 'Choose Syn Month...') {
                    $scope.isSync = false;
                } else {
                    $scope.isSync = true;
                }
            }
            $scope.syncAllMileages = function () {
                $scope.showCancelProBtn = true;
                var syncDate = new Date();
                var syncDateMonth = $filter('date')(syncDate, 'MM-yyyy');
                if ($scope.syncMonthList === syncDateMonth) {
                    var currentMonthDate = new Date(syncDate.getFullYear(), syncDate.getMonth(), 1);
                    var lastDayCurrentMonth = new Date(syncDate.getFullYear(), syncDate.getMonth() + 1, 0);
                    $scope.startDate = $filter('date')(currentMonthDate, 'yyyy-MM-dd');
                    $scope.endDate = $filter('date')(lastDayCurrentMonth, 'yyyy-MM-dd');
                }
                else {
                    var previousMonthDate = new Date(syncDate.getFullYear(), syncDate.getMonth() - 1, 1);
                    var lastDayPreviousMonth = new Date(syncDate.getFullYear(), syncDate.getMonth(), 0);
                    $scope.startDate = $filter('date')(previousMonthDate, 'yyyy-MM-dd');
                    $scope.endDate = $filter('date')(lastDayPreviousMonth, 'yyyy-MM-dd');
                }
                // var selectedTrip = ($scope.statusList === 'Submitted') ? 'S' : ($scope.statusList === 'Un Submitted') ? 'U' : null;
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.MassSyncTrips}', $scope.accid, $scope.startDate, $scope.endDate, $scope.syncMonthList, 'U',
                    function (result, event) {
                        if (event.status) {
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.MassSyncTrips}', $scope.accid, $scope.startDate, $scope.endDate, $scope.syncMonthList, 'S',
                                function (result, event) {
                                    if (event.status) {
                                        $('#spinner').hide();
                                        toastr.success('Please wait for few minutes. mileage sync process is running in background.');
                                        setTimeout(function () {
                                            location.reload();
                                        }, 2000);
                                    }
                                })
                        }
                    },
                    { escape: false }
                );
            }
            $scope.displayCheckboxForConcur = function () {
                $scope.checkboxobj = {} 
                $scope.checkboxobj.isCheckedAllForConcur = false;
                $scope.isPlAccountAbsence = false;
                $scope.checkboxobjConcurShow = true;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjDeactivateShow = false;
                $scope.checkboxobjFreezeShow = false;
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassEnable = false;
                });
            }

            $scope.CheckUncheckAllForConcur = function (CheckUncheckAllForConcur) {
                $scope.checkboxobj.isCheckedAllForConcur = CheckUncheckAllForConcur;
                if ($scope.checkboxobj.isCheckedAllForConcur == true) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassConcurbtn = true;
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassConcurbtn = false;
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMassConcurbtn = false;
                    $scope.showMassEnablebtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassEnable = $scope.checkboxobj.isCheckedAllForConcur;
                    $scope.empupdatelist.push(emp);
                });

            }

            $scope.CheckUncheckForConcur = function () {
                var concurlistlen = $scope.employeeslist.length;
                var count = 0;
                angular.forEach($scope.employeeslist, function (item) {
                    if (item.IsMassEnable) {
                        count++;
                    }
                });

                if (count > 0) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassConcurbtn = true;
                        $scope.showMassEnablebtn = false;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMassEnablebtn = false;
                    $scope.showMassConcurbtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                /* EMC - 133 Select all functionality of Checkbox is not working on "Activity" on Driver Page */
                    if (count === concurlistlen) {
                        $scope.checkboxobj.isCheckedAllForConcur = true;
                    } else {
                        $scope.checkboxobj.isCheckedAllForConcur = false;
                    }
                 /* EMC - 133 ends */
                $scope.empupdatelist.push(emp);
            }

            $scope.ConcurConnect = function () {
                $scope.concurConnectList = [];
                angular.forEach($scope.employeeslist, function (emp) {
                    if (emp.IsMassEnable === true) {
                        $scope.concurConnectList.push(emp.email);
                    }
                });
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.putHTTPConcurConnect}', $scope.accid, JSON.stringify($scope.concurConnectList),
                    function (result, event) {
                        if (event.status) {
                            toastr.success('Successfully Concur Connect to triplog.');
                            $('#spinner').hide();
                            setTimeout(function () {
                                location.reload();
                            }, 2000);
                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }


            $scope.displayCheckboxForDeactivation = function () {
                $scope.checkboxobj = {} 
                $scope.checkboxobj.isCheckedAllForDeactivate = false;
                $scope.isPlAccountAbsence = false;
                $scope.checkboxobjDeactivateShow = true;
                $scope.checkboxobjFreezeShow = false;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjConcurShow = false;
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassDeactivated = false;
                });
            }

            $scope.CheckUncheckAllForMassDeactivate = function (CheckUncheckAllForMassDeactivate) {

                $scope.checkboxobj.isCheckedAllForDeactivate = CheckUncheckAllForMassDeactivate;
                if ($scope.checkboxobj.isCheckedAllForDeactivate == true) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassDeactivatebtn = true;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassDeactivated = $scope.checkboxobj.isCheckedAllForDeactivate;
                    $scope.empupdatelist.push(emp);
                });

            }

            $scope.CheckUncheckForMassDeactivate = function (emp) {
                var mylistlen = $scope.employeeslist.length;
                var count = 0;
                angular.forEach($scope.employeeslist, function (item) {
                    if (item.IsMassDeactivated) {
                        count++;
                    }
                });

                if (count > 0) {
                    $scope.showCancelProBtn = true;
                    if (!massResetPassword) {
                        $scope.showMassDeactivatebtn = true;
                        $scope.showResetPasswordbtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showMultipleAction = false;
                    }
                    else {
                        $scope.showMassDeactivatebtn = false;
                        $scope.showMassEnablebtn = false;
                        $scope.showMassConcurbtn = false;
                        $scope.showResetPasswordbtn = true;
                        $scope.showMultipleAction = false;
                    }
                }
                else {
                    massResetPassword = false;
                    $scope.showCancelProBtn = false;
                    $scope.showMassDeactivatebtn = false;
                    $scope.showMassEnablebtn = false;
                    $scope.showMassConcurbtn = false;
                    $scope.showMultipleAction = true;
                    $scope.checkboxobjDeactivateShow = false;
                    $scope.showResetPasswordbtn = false;
                }
                /* EMC - 133 Select all functionality of Checkbox is not working on "Activity" on Driver Page */
                    if (count === mylistlen) {
                        $scope.checkboxobj.isCheckedAllForDeactivate = true;
                    } else {
                        $scope.checkboxobj.isCheckedAllForDeactivate = false;
                    }
                 /* EMC - 133 ends */
                $scope.empupdatelist.push(emp);
            }

            $scope.deactivateChange = function (empdate, emp) {
                angular.forEach($scope.empupdatelist, function (emp) {
                    if (emp.IsMassDeactivated) {
                        emp.deactivaedDate = empdate;
                    }
                });

                $scope.hideErrorModal();
                $scope.IsVisibleUpdatebtn = true;
            }

            $scope.displayCheckboxForFreeze = function () {
                $scope.checkboxobj = {} 
                $scope.checkboxobj.isCheckedAllForFreeze = false;
                $scope.isPlAccountAbsence = false;
                $scope.checkboxobjDeactivateShow = false;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjConcurShow = false;
                $scope.checkboxobjFreezeShow = true;
                // $scope.showMassUnFreezebtn = false;
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassFreeze = false;
                });
            }

            $scope.CheckUncheckAllForFreeze = function (CheckUncheckAllForFreeze) {
                var countforfreeze = 0;
                $scope.checkboxobj.isCheckedAllForFreeze = CheckUncheckAllForFreeze;
                angular.forEach($scope.employeeslist, function (emp) {
                    emp.IsMassFreeze = $scope.checkboxobj.isCheckedAllForFreeze;
                    if (emp.IsMassFreeze === true) {
                        countforfreeze++;
                    }
                });
                if (countforfreeze > 0) {
                    $scope.showCancelProBtn = true;
                    if (!unfreezebtnproperty) {
                        $scope.showMultipleAction = false;
                        $scope.showMassFreezeEmployeebtn = true;
                    }
                    else {
                        $scope.showMultipleAction = false;
                        $scope.showMassUnFreezeEmployeebtn = true;
                    }

                    //  $scope.showMassFreezebtn = false;

                }
                else {
                    $scope.showCancelProBtn = false;
                    $scope.checkboxobjFreezeShow = false;
                    $scope.showMultipleAction = true;
                    $scope.showMassFreezeEmployeebtn = false;
                    $scope.showMassUnFreezeEmployeebtn = false;
                }
            }

            $scope.CheckUncheckForFreeze = function (emp) {
                var mylistlen = $scope.employeeslist.length;
                var count = 0;
                angular.forEach($scope.employeeslist, function (item) {
                    if (item.IsMassFreeze) {
                        count++;
                    }
                });
                if (count > 0) {
                    $scope.showCancelProBtn = true;
                    if (!unfreezebtnproperty) {
                        $scope.showMultipleAction = false;
                        $scope.showMassFreezeEmployeebtn = true;
                    }
                    else {
                        $scope.showMultipleAction = false;
                        $scope.showMassUnFreezeEmployeebtn = true;
                    }
                }
                else {
                    //$scope.showMassFreezebtn = true;
                    $scope.showCancelProBtn = false;
                    $scope.checkboxobjFreezeShow = false;
                    $scope.showMultipleAction = true;
                    $scope.showMassFreezeEmployeebtn = false;
                    $scope.showMassUnFreezeEmployeebtn = false;
                }
                /* EMC - 133 Select all functionality of Checkbox is not working on "Activity" on Driver Page */
                if (count === mylistlen) {
                    $scope.checkboxobj.isCheckedAllForFreeze = true;
                } else {
                    $scope.checkboxobj.isCheckedAllForFreeze = false;
                }
                 /* EMC - 133 ends */
            }

            $scope.FreezeEmployees = function () {
                freezeProperty = true;
                $scope.freezeEmployeeList = [];
                
                angular.forEach($scope.employeeslist, function (emp) {
                    if (emp.IsMassFreeze === true) {
                        $scope.freezeEmployeeList.push(emp.userid);
                    }
                });
                $('#spinner').show();
                console.log("Freeze", JSON.stringify($scope.freezeEmployeeList));
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.massFreeze}', JSON.stringify($scope.freezeEmployeeList), freezeProperty,
                    function (result, event) {
                   
                        if (event.status) {
                            if (!result.hasError) {
                                toastr.success('Driver Has Been Freezed Successfully.');
                                $('#spinner').hide();
                                setTimeout(function () {
                                    location.reload();
                                }, 2000);
                            } else {
                                toastr.error(result.message);
                            }
                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            $scope.sendPacketToDriver = function(){
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.sendSignatureRequestForDriver}', $scope.accid,
                    function (result, event) {
                        if (event.status) {
                                toastr.success('The driver packet was successfully sent.');
                                $('#spinner').hide();
                                setTimeout(function () {
                                    location.reload();
                                }, 3000);
                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            $scope.displayCheckboxForUnFreeze = function () {
                unfreezebtnproperty = true;
                $scope.isPlAccountAbsence = false;
                $scope.checkboxobjDeactivateShow = false;
                $scope.checkboxobjEnableUserShow = false;
                $scope.checkboxobjConcurShow = false;
                $scope.checkboxobjFreezeShow = true;
            }

            $scope.UnFreezeEmployees = function () {
                freezeProperty = false;
                $scope.freezeEmployeeList = [];
                angular.forEach($scope.employeeslist, function (emp) {
                    if (emp.IsMassFreeze === true) {
                        $scope.freezeEmployeeList.push(emp.userid);
                    }
                });
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.massFreeze}', JSON.stringify($scope.freezeEmployeeList), freezeProperty,
                    function (result, event) {
                        if (event.status) {
                            if (!result.hasError) {
                                toastr.success('Driver Has Been UnFreezed Successfully.');
                                $('#spinner').hide();
                                setTimeout(function () {
                                    location.reload();
                                }, 3000);
                            } else {
                                toastr.error(result.message);
                            }
                        }
                        else {
                            $('#spinner').hide();
                        }refreshEmployees
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }


            $scope.cancelProcess = function () {
                $('#spinner').show();
                $scope.refreshEmployees();
                $scope.endProcess();
                setTimeout(() => {
                    $('#spinner').hide();
                }, 1000)


            }

            //* EMC - 129 : "LOA" amount and "pay period" for PL marketing account on Driver Page */
            $scope.showLeaveOfAbsence = function (list) {
                $scope.isPlAccountAbsence = true;
                $scope.employeeslistLOA = list;
                angular.forEach($scope.employeeslistLOA, function (empList){
                    if(empList.LOAStartDate != undefined){
                        empList.LOAStartDate = $filter('date')(new Date(empList.LOAStartDate), 'MM/dd/yy')
                    }
                    if(empList.LOAEndDate != undefined){
                        empList.LOAEndDate = $filter('date')(new Date(empList.LOAEndDate), 'MM/dd/yy')
                    }
                    empList.isleaveofabsence = false;
                    empList.iseditable = false;
                })
                $scope.checkboxobj = {} 
                $scope.checkboxobj.isCheckedAllForLOA = false;
                $scope.IsVisibleUpdatebtn = false;
                $scope.checkboxobjLoaShow = true;
                $scope.checkboxobj.isCheckedAllForLOA = ($scope.checkboxobj.isCheckedAllForLOA == true) ? false : false;
            }

            $scope.CheckUncheckAllForLOA = function(CheckUncheckAllForLOA){
                $scope.checkboxobj.isCheckedAllForLOA = CheckUncheckAllForLOA;
                if ($scope.checkboxobj.isCheckedAllForLOA == true) {
                    $scope.showCancelProBtn = true;
                    $scope.showSaveLOABtn = true;
                    $scope.showMultipleAction = false;
                }
                else {
                    $scope.showCancelProBtn = false;
                    $scope.showSaveLOABtn = false;
                    $scope.showMultipleAction = true;
                   // $scope.checkboxobjLoaShow = false;
                }
                angular.forEach($scope.employeeslistLOA, function (emp) {
                    emp.isleaveofabsence = $scope.checkboxobj.isCheckedAllForLOA;
                    $scope.empupdatelist.push(emp);
                });
            }
            $scope.CheckUncheckForLOA = function(emp){
                var emplistlen = $scope.employeeslistLOA.length;
                var count = 0;
                angular.forEach($scope.employeeslistLOA, function (item) {
                    if (item.isleaveofabsence) {
                        count++;
                    }
                });

                if (count > 0) {
                    $scope.showMultipleAction = false;
                    $scope.showSaveLOABtn = true;
                    $scope.showCancelProBtn = true;
                }
                else {
                    $scope.showCancelProBtn = false;
                    $scope.showSaveLOABtn = false;
                    $scope.showMultipleAction = true;
                }

                /* EMC - 133 Select all functionality of Checkbox is not working on "Activity" on Driver Page */
                if (count === emplistlen) {
                    $scope.checkboxobj.isCheckedAllForLOA = true;
                } else {
                    $scope.checkboxobj.isCheckedAllForLOA = false;
                }
                /* EMC - 133 ends */
                $scope.recordindex = -1;
                if ($scope.empupdatelist.length > 0) {
                    for (i = 0; i < $scope.empupdatelist.length; i++) {
                        if ($scope.empupdatelist[i].BiweekId == emp.BiweekId) {
                            $scope.recordindex = i;
                            break;
                        }
                    }

                    if ($scope.recordindex != -1) {
                        $scope.empupdatelist.splice($scope.recordindex, 1);
                    }
                    else {
                        $scope.empupdatelist.push(emp);
                    }
                }else{
                    $scope.empupdatelist.push(emp);
                }
            }

            $scope.validateFixedAmount = function(amount) {
                var fixedValue = amount.emp.HalfFixedAmount;
                if(fixedValue){
                    amount.emp.HalfFixedAmount = amount.emp.HalfFixedAmount
                        .replace(/[^\d.]/g, '')             // numbers and decimals only
                        .replace(/(^\.*)\./g, '$1')          // single dot retricted
                        .replace(/(\..*)\./g, '$1')          // decimal can't exist more than once
                        .replace(/(\.[\d]{2})./g, '$1');
                } else{
                    amount.emp.HalfFixedAmount = 0;
                }
            }

            function getPayRollStartDate(p){
                var payroll = p.split(" to ");
                var stDate = $filter('date')(new Date(payroll[0]), 'MM/dd/yyyy')
                return stDate;
            }

            function getPayRollEndDate(p){
                var endPayroll = p.split(" to ");
                var enDate = $filter('date')(new Date(endPayroll[1]), 'MM/dd/yyyy')
                return enDate;
            }

            $scope.saveLOA = function(){
                $scope.employeeLOAList = [];
                angular.forEach($scope.empupdatelist, function (employee){
                    employee.LOAStartDate = (employee.LOAStartDate != null) ? $filter('date')(new Date(employee.LOAStartDate), 'yyyy-MM-dd') : null;
                    employee.LOAEndDate = (employee.LOAEndDate != null) ? $filter('date')(new Date(employee.LOAEndDate), 'yyyy-MM-dd') : null;
                })
                angular.forEach($scope.empupdatelist, function (employee){
                    var row = {}
                    row.BiweekId = employee.BiweekId,
                    row.ContactEmail = employee.ContactEmail,
                    row.LOAStartDate = employee.LOAStartDate,
                    row.LOAEndDate = employee.LOAEndDate,
                    row.HalfFixedAmount = employee.HalfFixedAmount,
                    row.ContactName = employee.ContactName
                    $scope.employeeLOAList.push(row);
                })
                var listToUpdate = angular.copy($scope.employeeLOAList);
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.SaveLOA}', JSON.stringify(listToUpdate),
                    function (result, event) {
                        if (event.status) {
                            if (!result.hasError) {
                                    toastr.success('Records Updated Successfully.');
                                    angular.forEach($scope.empupdatelist, function (employee) {
                                        employee.iseditable = false;
                                    });

                                    $scope.empupdatelist = [];
                                    $scope.employeeLOAList = [];
                                    $scope.selectedRow = '';
                                    $('#spinner').hide();
                                    location.reload();
                            } else {
                                $('#spinner').hide();
                                var err = result.message.split("==");
                                var toastmessage = '';
                                angular.forEach($scope.empupdatelist, function (employee) {
                                    if (employee.BiweekId === err[0]) {
                                        toastmessage = err[1] + ' for ' + employee.ContactName;
                                    }
                                });
                                console.log("toast message", result.message, err, $scope.empupdatelist);
                                // console.log("toast modified message", toastmessage);
                                toastr.error(toastmessage);
                            }
                        }
                        else {
                            $('#spinner').hide();
                        }
                        $scope.$apply();
                    },
                    { escape: false }
                );
            }

            //* EMC - 129 : Ends */
            // AI-000460 Ends -->
            $scope.edit2 = function(emp, userid){
                $scope.selectedRow = userid;
                $scope.IsVisibleUpdatebtn = ($scope.isPlAccountAbsence === true) ? false : true;
            }
            $scope.edit = function (emp, userid) {
                $scope.selectedRow = userid;
                emp.citylist = [];
                $scope.empData = obj_contactnew();
                $scope.IsVisibleUpdatebtn = ($scope.isPlAccountAbsence === true) ? false : true;
                $scope.managerlist = {!AllManagers
            }
            $scope.managerlist.sort(function (a, b) {
                var nameA = a.Name.toLowerCase(), nameB = b.Name.toLowerCase();
                if (nameA < nameB) { //sort string ascending
                    return -1;
                } else if (nameA > nameB) {
                    return 1;
                } else {
                    return 0; //default return value (no sorting)
                }
            })

      
            $scope.rolelist = {!Roles}
            if (emp.city != null && emp.city != '') {
                    emp.citylist.push(emp.city);
            }
            $scope.showcountryempedit(emp.zipCode , emp.role, emp);
            $scope.driverType = {!DriverType}
            $scope.recordfoundindex = -1;
            if (beforeUpdateEmployees.length == 0)
                beforeUpdateEmployees = angular.copy($scope.employeeslist);

            for (i = 0; i < $scope.empupdatelist.length; i++) {
                if ($scope.empupdatelist[i].userid == emp.userid) {
                    $scope.recordfoundindex = i;
                    break;
                }
                // }else{
                //     $scope.empupdatelist[i].iseditable = false;
                // }
            }
            if ($scope.recordfoundindex != -1) {
                $scope.empupdatelist.remove($scope.recordfoundindex);
            }

            else {
                $scope.empupdatelist.push(emp);
            }
            console.log("updated----", $scope.empupdatelist)
            }
            /* Field Edit Funtion Complete*/

            /*Cancel update Start */
            $scope.cancelUpdate = function () {
                $('#spinner').show();
                angular.forEach(beforeUpdateEmployees, function (employee) {
                    employee.iseditable = false;
                });

                $scope.IsVisibleUpdatebtn = false;
                $scope.employeeslist = angular.copy(beforeUpdateEmployees);
                $('#spinner').hide();

            }
            /*Cancel update End */

            /* Record Update Start*/
            $scope.update = function (form) {
                $('#spinner').show();
                var invalid = false;
                let count = 0;

                for (i = 0; i < $scope.empupdatelist.length; i++) {
                    if ($scope.accid === $scope.accountERMI) {
                        if (form['role_' + $scope.empupdatelist[i].userid].$invalid) {
                            invalid = true;
                            if (form['role_' + $scope.empupdatelist[i].userid].$invalid)
                                count++;
                            if (count > 1)
                                break;
                        }
                    } else {
                        if (form['email_' + $scope.empupdatelist[i].userid].$invalid
                            || form['role_' + $scope.empupdatelist[i].userid].$invalid
                            || form['city_' +  $scope.empupdatelist[i].userid].$invalid
                            //  ||  form['dept_' +  $scope.empupdatelist[i].userid].$invalid
                            //   || form['manager_' + $scope.empupdatelist[i].userid ].$invalid
                            || form['zip_' + $scope.empupdatelist[i].userid].$invalid) {
                            invalid = true;
                            if (form['email_' + $scope.empupdatelist[i].userid].$invalid)
                                count++;
                            if (form['role_' + $scope.empupdatelist[i].userid].$invalid)
                                count++;
                            if (form['city_' + $scope.empupdatelist[i].userid].$invalid)
                                count++;
                            //  if(form['manager_' + $scope.empupdatelist[i].userid ].$invalid)
                            // count ++;
                            //  if(form['job_' +  $scope.empupdatelist[i].userid].$invalid)
                            // count++;
                            // if(form['dept_' +  $scope.empupdatelist[i].userid].$invalid)invalid
                            //  count++;
                            if (form['zip_' + $scope.empupdatelist[i].userid].$invalid)
                                count++;
                            if (count > 1)
                                break;
                        }
                    }
                }

                c(count);
                if (invalid) {
                    $('#spinner').hide();
                    if (count > 1)
                        $scope.showToast('Please Complete Required Fields.');
                    else
                        $scope.showToast('Please Complete Required Field.');
                    return;
                }

                var empToUpdate = formatFulllDateForEmployeeList(angular.copy($scope.empupdatelist));
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.editInlineNewEmployee}', JSON.stringify(empToUpdate), $scope.accid, $scope.id,
                    function (result, event) {

                        if (event.status) {

                            if (!result.hasError) {
                                beforeUpdateEmployees = [];


                                if ($scope.empupdatelist.length > 1) {
                                    toastr.success('Records Updated Successfully.');
                                } else {
                                    toastr.success('Record Updated Successfully.');
                                }
                                angular.forEach($scope.empupdatelist, function (employee) {
                                    employee.iseditable = false;
                                });
                                angular.forEach(  $scope.employeeslist, function(emp){
                                    emp.iseditable = false;
                                })
                                
                                $scope.empupdatelist = [];
                                $scope.IsVisibleUpdatebtn = false;
                                $scope.selectedRow = null;
                                $scope.$apply();
                            } else {
                                var err = result.message.split("==");
                                var toastmessage = '';
                                angular.forEach($scope.empupdatelist, function (employee) {
                                    if (employee.userid === err[0]) {
                                        toastmessage = err[1] + ' for ' + employee.name;
                                    }
                                });
                                console.log("toast message", result.message, err, $scope.empupdatelist);
                                // console.log("toast modified message", toastmessage);
                                toastr.error(toastmessage);
                            }
                            refreshForm();

                            $('#spinner').hide();
                        } else {
                            $('#spinner').hide();
                        }
                    },
                    { escape: false }
                );
            };
            /* Record Update Complete*/


            $scope.resendLink = function (contact) {
                $scope.contactID = contact.userid;
                $('#spinner').show();
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.resetPassword}', $scope.contactID,
                    function (result, event) {
                        if (event.status) {
                            toastr.success('Please check your email id for reset password');
                            $('#spinner').hide();
                        }
                        else {
                            $('#spinner').hide();
                            toastr.error('Something Went Wrong.');
                        }

                    },
                    { escape: false }
                );
            }
            function refreshForm() {
                var forms = document.getElementsByClassName('needs-validation');
                angular.forEach(forms, function (form) {
                    $(form).removeClass('was-validated');
                })
            }

            /* Export Excel Tab Hide */
            $scope.tabs = [{ active: true }, { active: false }, { active: false }, { active: false }];
            $scope.showForm = function () {
                $('#spinner').show();
                //  $scope.IsVisibleLogin = true;
                $scope.relatedcitylist = [];
                $scope.isZipValid = false;
                $scope.contactData = obj_contactnew();
                $scope.employeesList = [];
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = false;
                $scope.IsVisibleLoginDriver = false;
                //$scope.showMassFreezebtn = false;
                $scope.showMassFreezeEmployeebtn = false;
                // $scope.showMassUnFreezebtn = false;
                $scope.showMassUnFreezeEmployeebtn = false;
                $scope.showMassEnablebtn = false;
                $scope.showMassConcurbtn = false;
                $scope.showCancelProBtn = false;
                $scope.showMassDeactivatebtn = false;
                $scope.showResetPasswordbtn = false;
                $scope.showMultipleAction = false;
                $scope.contactData.addedDate = $filter('date')(new Date(), "MM/dd/yy")
                $("#drivingstatenew").tagsinput('removeAll');
                $scope.IsShow = false;
                $scope.IsShowLinkBtn = false;
                $scope.managerlist = {!AllManagers
            }
            $scope.driverType = {!DriverType}
            $scope.jobTitleList = {!JobTitle}
            $scope.departmentList = {!Department}
          
            $scope.managerlist.sort(function (a, b) {
                var nameA = a.Name.toLowerCase(), nameB = b.Name.toLowerCase();
                if (nameA < nameB) { //sort string ascending
                    return -1;
                } else if (nameA > nameB) {
                    return 1;
                } else {
                    return 0; //default return value (no sorting)
                }
            })
            $scope.rolelist = {!Roles}
            $scope.driverType = {!DriverType}

            $scope.tabs[1].active = true;
            angular.element(document.querySelector("#pills-alldrivers-tab")).removeClass("active");
            angular.element(document.querySelector("#pills-alldrivers-tab-back")).removeClass("active");
            angular.element(document.querySelector("#pills-importadminroster-tab")).removeClass("active");
            angular.element(document.querySelector("#pills-loginadminroster-tab")).removeClass(" active");
            angular.element(document.querySelector("#pills-addadminroster-tab")).addClass(" active");

            angular.element(document.querySelector("#form1")).removeClass("is-invalid");
            $('#spinner').hide();
            }

            $scope.optionshowObj = { isshow: false };
            $scope.showcitycountry = function (zipcode, role) {
                if (role == 'Admin' || role == 'Manager') {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                if (role == 'Driver' || role == 'Driver/Manager' || role == valueofreport) {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                c('zipcode:--' + zipcode + 'role:--' + role);

                if (zipcode != undefined && zipcode != '' && zipcode != null) {
                    $('#spinner').show();
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.getCountryStateCity}', zipcode,
                        function (result, event) {
                            if (event.status && result != null && result != '') {
                                let address = JSON.parse(result);
                                $scope.relatedcitylist = [];

                                if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                    for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                                        if ($scope.drivingStatesList[i] == $scope.contactData.state) {
                                            $('#drivingstatenew').tagsinput('remove', $scope.contactData.state);
                                        }
                                    }
                                }
                                $scope.$apply(function () {
                                    $scope.contactData.state = '';
                                    $scope.contactData.city = '';
                                    angular.forEach(address, function (item) {
                                        $scope.relatedcitylist.push(item.City__c);
                                        if($scope.form1.zip_1.$dirty){
                                            $scope.isZipValid = $scope.relatedcitylist.length > 1 ? true : false;
                                        }
                                        $scope.contactData.state = item.Abbreviation__c;
                                        $scope.contactData.city = $scope.relatedcitylist[0];
                                    });
                                })
                                if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                    if ($scope.contactData.state != undefined || $scope.contactData.state != '') {
                                        $scope.contactData.drivingStates = $scope.contactData.state;
                                        $('#drivingstatenew').tagsinput('add', $scope.contactData.state);
                                    }
                                }
                                $('#spinner').hide();
                            }
                            else {
                                $('#spinner').hide();
                                toastr.error('Please insert valid zipcode.');
                            }
                        },
                        { escape: false }
                    );
                }
                if (zipcode == '' || zipcode == undefined || zipcode == null) {
                    if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                        for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                            if ($scope.drivingStatesList[i] == $scope.contactData.state) {
                                $('#drivingstatenew').tagsinput('remove', $scope.contactData.state);
                            }
                        }
                    }
                    $scope.contactData.state = '';
                    $scope.relatedcitylist = [];
                    $scope.isZipValid = false;
                    $scope.contactData.city = '';
                }

            }

            $scope.showcountryempedit = function(zipcode, role, emp){
                if (Array.isArray($scope.empData)) {
                    if (!emp.zipCode || emp.zipCode.length < 5) {
                        return;
                    }
                } 
                c('zipcode:--' + zipcode + 'role:--' + role);
                if (role == 'Admin' || role == 'Manager') {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                if (role == 'Driver' || role == 'Driver/Manager' || role == valueofreport) {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                if (zipcode != undefined && zipcode != '' && zipcode != null) {
                    $('#spinner').show();
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.getCountryStateCity}', zipcode,
                        function (result, event) {
                            if (event.status && result != null && result != '') {
                                let address = JSON.parse(result);
                                emp.citylist = [];
                                $scope.$apply(function () {
                                    c('remove drivingStates:--' + emp.state);
                                    if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                        for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                                            if ($scope.drivingStatesList[i] == emp.state) {
                                                $('#drivingstateContact').tagsinput('remove', emp.state);
                                            }
                                        }
                                    }
                                    //$scope.contactData[0].state = '';
                                    //$scope.contactData[0].city = '';


                                    angular.forEach(address, function (item) {
                                        emp.citylist.push(item.City__c);
                                        emp.state = item.Abbreviation__c;
                                       // emp.city =  $scope.citylist[0];
                                    });
                                })
                                if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                    if (emp.state != undefined || emp.state != '') {
                                         emp.drivingStates = emp.state;
                                        $('#drivingstateContact').tagsinput('add', emp.state);
                                    }
                                }
                                $('#spinner').hide();
                            }
                            else {
                                $('#spinner').hide();
                                toastr.error('Please insert valid zipcode.');
                            }
                        },
                        { escape: false }
                    );
                }

                if (zipcode == '' || zipcode == undefined || zipcode == null) {
                    if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                        for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                            if ($scope.drivingStatesList[i] == emp.state) {
                                $('#drivingstateContact').tagsinput('remove', emp.state);
                            }
                        }
                    }
                    //emp.citylist = [];
                    $('#spinner').hide();
                }
            }

            $scope.showcitycountryedit = function (zipcode, role) {
                if (Array.isArray($scope.contactData)) {
                    if (!$scope.contactData[0].zipCode || $scope.contactData[0].zipCode.length < 5) {
                        $scope.isZipValid = false;
                        return;
                    }
                } else {
                    if (!Array.isArray($scope.contactData) && ($scope.contactData.zipCode && $scope.contactData.zipCode.length < 5)) {
                        $scope.isZipValid = false;
                        return;
                    }
                }
                c('zipcode:--' + zipcode + 'role:--' + role);
                if (role == 'Admin' || role == 'Manager') {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                if (role == 'Driver' || role == 'Driver/Manager' || role == valueofreport) {
                    $scope.stateabrivationObj.drivingstatefordriver == false;
                }
                if (zipcode != undefined && zipcode != '' && zipcode != null) {
                    $('#spinner').show();
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.getCountryStateCity}', zipcode,
                        function (result, event) {
                            if (event.status && result != null && result != '') {
                                let address = JSON.parse(result);
                                $scope.relatedcitylist = [];
                                $scope.$apply(function () {
                                    c('remove drivingStates:--' + $scope.contactData[0].state);
                                    if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                        for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                                            if ($scope.drivingStatesList[i] == $scope.contactData[0].state) {
                                                $('#drivingstateContact').tagsinput('remove', $scope.contactData[0].state);
                                            }
                                        }
                                    }
                                    //$scope.contactData[0].state = '';
                                    //$scope.contactData[0].city = '';


                                    angular.forEach(address, function (item) {
                                        $scope.relatedcitylist.push(item.City__c);
                                        if($scope.form1.zip_0.$dirty){
                                            $scope.isZipValid = $scope.relatedcitylist.length > 1 ? true : false;
                                            $scope.contactData[0].city =   $scope.relatedcitylist.length === 1 ? $scope.relatedcitylist[0] : '';
                                        }
                                        $scope.contactData[0].state = item.Abbreviation__c;
                                      //  $scope.contactData[0].city =  $scope.relatedcitylist[0];
                                    });
                                })
                                if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                                    if ($scope.contactData[0].state != undefined || $scope.contactData[0].state != '') {
                                        $scope.contactData[0].drivingStates = $scope.contactData[0].state;
                                        $('#drivingstateContact').tagsinput('add', $scope.contactData[0].state);
                                    }
                                }
                                $('#spinner').hide();
                            }
                            else {
                                $('#spinner').hide();
                                toastr.error('Please insert valid zipcode.');
                            }
                        },
                        { escape: false }
                    );
                }

                if (zipcode == '' || zipcode == undefined || zipcode == null) {
                    if ($scope.stateabrivationObj.drivingstatefordriver == true) {
                        for (var i = 0; i < $scope.drivingStatesList.length; i++) {
                            if ($scope.drivingStatesList[i] == $scope.contactData[0].state) {
                                $('#drivingstateContact').tagsinput('remove', $scope.contactData[0].state);
                            }
                        }
                    }
                    $scope.relatedcitylist = [];
                    $scope.isZipValid = false;
                    $scope.contactData[0].city = '';
                    $scope.contactData[0].state = '';
                    $('#spinner').hide();
                }
            }
            $scope.stateabrivationObj = { drivingstatefordriver: false };
            $scope.rolewisevalidation = function (role) {
                if (role == 'Driver' || role == 'Driver/Manager' || role == 'Manager' || role == 'Driver/Admin') {
                    $scope.showmanagervalidation = true;
                }
                if (role == 'Driver' || role == 'Driver/Manager' || role == 'Driver/Admin') {
                    $scope.showvalidation = true;
                    $scope.isFieldRequired = true;
                }
                if (role == 'Driver' || role == 'Driver/Manager') {
                    // $scope.showvalidation = true;
                    /*$scope.showrequiredfield = true;*/
                    $scope.stateabrivationObj.drivingstatefordriver = true;
                }
                if (role == 'Admin' || role == 'Manager') {
                    $scope.showvalidation = false;
                    $scope.isFieldRequired = false;
                    /*$scope.showrequiredfield = false;*/
                    $scope.stateabrivationObj.drivingstatefordriver = false;
                }

                if (role == 'Admin') {
                    $scope.showmanagervalidation = false;
                }
            }
            /* Value Pass in Add(Form)tab */

            $scope.passData = function (empId) {
                $('#spinner').show();
                $scope.IsShow = true;
                $scope.IsShowLinkBtn = true;
                $scope.isZipValid = false;
                // $scope.showMassFreezebtn = false;
                $scope.showSaveLOABtn = false;
                $scope.showMassFreezeEmployeebtn = false;
                $scope.showMassUnFreezebtn = false;
                $scope.showMassUnFreezeEmployeebtn = false;
                $scope.showMassEnablebtn = false;
                $scope.showMassConcurbtn = false;
                $scope.showCancelProBtn = false;
                $scope.showMassDeactivatebtn = false;
                $scope.showResetPasswordbtn = false;
                $scope.showMultipleAction = false;
                $scope.managerlist = {!AllManagers
            }
            $scope.managerlist.sort(function (a, b) {
                var nameA = a.Name.toLowerCase(), nameB = b.Name.toLowerCase();
                if (nameA < nameB) { //sort string ascending
                    return -1;
                } else if (nameA > nameB) {
                    return 1;
                } else {
                    return 0; //default return value (no sorting)
                }
            })

            // AI-000179 Edited By Megha -->
            if (empId.role === 'Driver') {
                $scope.IsVisibleLoginDriver = true;
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = false;
                $scope.isFieldRequired = true;
                $scope.showmanagervalidation = true;
                $scope.showvalidation = true;
                $scope.userid = empId.userid;
                $scope.Role = empId.role;
            }
            else if (empId.role === 'Manager') {
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = true;
                $scope.IsVisibleLoginDriverManager = false;
                $scope.userid = empId.userid;
                $scope.Role = empId.role;
                $scope.showmanagervalidation = true;
            }
            else if (empId.role === 'Driver/Manager') {
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = true;
                $scope.showvalidation = true;
                $scope.userid = empId.userid;
                $scope.Role = empId.role;
                $scope.isFieldRequired = true;
                $scope.showmanagervalidation = true;
            }
            else if (empId.role === valueofreport) {
                $scope.isFieldRequired = true;
                $scope.showvalidation = true;
                $scope.showmanagervalidation = true;
            }
            else {
                $scope.isFieldRequired = false;
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = false;
                $scope.showvalidation = false;
                $scope.showmanagervalidation = false;
            }
            // AI-000179 Edited By Megha -->
            $scope.rolelist = {!Roles}
            $scope.jobTitleList = {!JobTitle}
            $scope.driverType = {!DriverType}
            $scope.departmentList = {!Department}
            $scope.Hide();
            angular.element(document.querySelector("#pills-alldrivers-tab")).removeClass("active");
            angular.element(document.querySelector("#pills-alldrivers-tab-back")).removeClass("active");
            angular.element(document.querySelector("#pills-addadminroster-tab")).addClass(" active");
            $scope.tabs[1].active = true;

            $scope.editUserID = empId.userid;
            let dateAndVehicleList = {!PickListValuesIntoList}
            let tempaccdate = dateAndVehicleList[0];
            let tempdt = new Date(tempaccdate);
            let d = $filter('date')(tempdt, "MM/dd/yy")
            var splicevehiclelist = dateAndVehicleList.splice(1, 1);
            $scope.vehiclelist = splicevehiclelist[0].split(";");
           
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.editEmployeeDetails}', $scope.editUserID,
                function (result, event) {
                    $scope.contactData = [];
                    $scope.relatedcitylist = [];
                    /*$scope.statelist = [];*/
                    $scope.contactData = JSON.parse(result);
                    $scope.editList = JSON.parse(result);
                    console.log('contact->', $scope.contactData);
                    // if(empId){
                    //     angular.forEach($scope.contactData,function(item){
                    //         item.managerName = empId.managerName;
                    //         item.managerId = empId.managerId;
                    // });
                    // }

                    angular.forEach($scope.contactData, function (item) {
                        c('item:--' + item.role);
                        if (item.IsMassDeactivated == "" || item.IsMassDeactivated == null) {
                            item.IsMassDeactivated = false;
                        }
                        if (item.IsMassFreeze == "" || item.IsMassFreeze == null) {
                            item.IsMassFreeze = false;
                        }
                        if (item.addedDate != null && item.addedDate != '') {
                            item.addedDate = $scope.formateDate(item.addedDate);
                        }
                        else {
                            item.addedDate = $filter('date')(new Date(), "MM/dd/yy");
                        }

                        if (item.activationDate != null && item.activationDate != '') {
                            item.activationDate = $scope.formateDate(item.activationDate);
                        }
                        if (item.city != null && item.city != '') {
                            $scope.relatedcitylist.push(item.city);
                        }
                        if (item.role == 'Admin' || item.role == 'Manager') {
                            $scope.showrequiredfield = false;
                        }
                        if (item.role == 'Driver/Manager' || item.role == 'Driver' || item.role == valueofreport) {
                            $scope.showrequiredfield = true;
                        }
                    });
                    if($scope.contactData[0] != undefined){
                        $scope.showcitycountryedit($scope.contactData[0].zipCode, $scope.contactData[0].role)
                    }
                    $('#spinner').hide();
                    $scope.backButton = true;
                    $scope.$apply();
                    $("#drivingstateContact").tagsinput('destroy');
                    $("#drivingstateContact").tagsinput('refresh');

                }, { escape: false }
            );
                }


            $scope.passInfoData = function (empId) {
                $('#spinner').show();
                window.opener = null;
                $scope.IsShow = true;
                $scope.IsShowLinkBtn = true;
                $scope.isZipValid = false;
                // $scope.showMassFreezebtn = false;
                $scope.showSaveLOABtn = false;
                $scope.showMassFreezeEmployeebtn = false;
                $scope.showMassUnFreezebtn = false;
                $scope.showMassUnFreezeEmployeebtn = false;
                $scope.showMassEnablebtn = false;
                $scope.showMassConcurbtn = false;
                $scope.showCancelProBtn = false;
                $scope.showMassDeactivatebtn = false;
                $scope.showResetPasswordbtn = false;
                $scope.showMultipleAction = false;
                $scope.managerlist = {!AllManagers
            }
            $scope.managerlist.sort(function (a, b) {
                var nameA = a.Name.toLowerCase(), nameB = b.Name.toLowerCase();
                if (nameA < nameB) { //sort string ascending
                    return -1;
                } else if (nameA > nameB) {
                    return 1;
                } else {
                    return 0; //default return value (no sorting)
                }
            })

            // AI-000179 Edited By Megha -->
            if (empId.role === 'Driver') {
                $scope.IsVisibleLoginDriver = true;
                $scope.IsVisibleLoginManager = false;
                $scope.isFieldRequired = true;
                $scope.showvalidation = true;
                $scope.showmanagervalidation = true;
                $scope.userid = empId.contactId;
                $scope.Role = empId.role;
            }
            else if (empId.role === 'Manager') {
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = true;
                $scope.showmanagervalidation = true;
                $scope.userid = empId.userid;
                $scope.Role = empId.role;
            }
            else if (empId.role === 'Driver/Manager') {
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = true;
                $scope.showvalidation = true;
                $scope.showmanagervalidation = true;
                $scope.userid = empId.userid;
                $scope.Role = empId.role;
                $scope.isFieldRequired = true;
            }
            else if (empId.role === valueofreport) {
                $scope.isFieldRequired = true;
                $scope.showvalidation = true;
                $scope.showmanagervalidation = true;
            }
            else {
                $scope.isFieldRequired = false;
                $scope.showvalidation = false;
                $scope.IsVisibleLoginDriver = false;
                $scope.IsVisibleLoginManager = false;
                $scope.IsVisibleLoginDriverManager = false;
            }

            // AI-000179 Edited By Megha -->
            $scope.rolelist = {!Roles}
            $scope.jobTitleList = {!JobTitle}
            $scope.driverType = {!DriverType}
            $scope.departmentList = {!Department}
            $scope.Hide();
            $scope.tabs[1].active = true;

            $scope.editUserID = empId.contactId;
            let dateAndVehicleList = {!PickListValuesIntoList}
            let tempaccdate = dateAndVehicleList[0];
            let tempdt = new Date(tempaccdate);
            let d = $filter('date')(tempdt, "MM/dd/yy")
            var splicevehiclelist = dateAndVehicleList.splice(1, 1);
            $scope.vehiclelist = splicevehiclelist[0].split(";");

            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.editEmployeeDetails}', $scope.editUserID,
                function (result, event) {
                    $scope.contactData = [];
                    $scope.relatedcitylist = [];
                    /*$scope.statelist = [];*/
                    $scope.contactData = JSON.parse(result);
                    $scope.editList = JSON.parse(result);
                    console.log('contact->', $scope.contactData);

                    angular.forEach($scope.contactData, function (item) {
                        c('item:--' + item.role);
                        if (item.IsMassDeactivated == "" || item.IsMassDeactivated == null) {
                            item.IsMassDeactivated = false;
                        }
                        if (item.IsMassFreeze == "" || item.IsMassFreeze == null) {
                            item.IsMassFreeze = false;
                        }
                        if (item.addedDate != null && item.addedDate != '') {
                            item.addedDate = $scope.formateDate(item.addedDate);
                        }
                        else {
                            item.addedDate = $filter('date')(new Date(), "MM/dd/yy");
                        }

                        if (item.activationDate != null && item.activationDate != '') {
                            item.activationDate = $scope.formateDate(item.activationDate);
                        }
                        if (item.city != null && item.city != '') {
                            $scope.relatedcitylist.push(item.city);
                        }
                        if (item.role == 'Admin' || item.role == 'Manager') {
                            $scope.showrequiredfield = false;
                        }
                        if (item.role == 'Driver/Manager' || item.role == 'Driver' || item.role == valueofreport) {
                            $scope.showrequiredfield = true;
                        }
                    });

                    $scope.showcitycountryedit($scope.contactData[0].zipCode, $scope.contactData[0].role)
                    $scope.backButton = true;
                    angular.element(document.querySelector("#pills-addadminroster-tab")).addClass(" active");
                    angular.element(document.querySelector("#pills-addadminroster")).addClass("active");
                    setTimeout(() => {
                        $('#spinner').hide();
                    }, 2000)
                    $scope.$apply();
                    $("#drivingstateContact").tagsinput('destroy');
                    $("#drivingstateContact").tagsinput('refresh');

                }, { escape: false }
            );
                }

            if (window.opener != null) {
                if (window.opener.location.pathname === "/app/ManageNotification") {
                    angular.element(document.querySelector("#pills-alldrivers-tab")).removeClass("active");
                    angular.element(document.querySelector("#pills-alldrivers")).removeClass("active");
                    angular.element(document.querySelector("#pills-alldrivers-tab-back")).removeClass("active");

                    var userEmpId = window.opener.parent.document.getElementById('hidden_user_id').value;
                    var userEmpObj = JSON.parse(userEmpId);
                    // console.log("user emp id: " + userEmpObj);
                    $scope.passInfoData(userEmpObj);

                }
            }

            function findCommon(a, b) {
                    return a === b;
                }

            /* Contact Insert Before Check Is already available or not */
                $scope.createUpdateContact = function (con, elementId, sourceId, suffix, form, update) {
                debugger
                            con.drivingStates = (con.drivingStates === undefined) ? [''] : con.drivingStates
                            $scope.editList.push(con)
                            let arrayInput = $scope.editList[0].drivingStates;
                            let inputToArray = (typeof arrayInput != 'string') ? arrayInput.join() : arrayInput;
                            $scope.inputTag = (update === true) ?  $("#drivingstateContact").val() : $("#drivingstatenew").val();
                            let inputToCheck = ($scope.editList[0] != undefined) ? findCommon(inputToArray, $scope.inputTag) : true;
                            if(con.userid != "" && con.userid != undefined){
                                con.monthlyReimbursement = true
                            }
                            if (form.$dirty != true && inputToCheck === true) {
                                    toastr.error("There is no change to update");
                                    setTimeout(function () {
                                        refreshForm();
                                    }, 10)
                        } else {
                        $('#spinner').show();
                        if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                            $scope.showrequiredfield = true;
                            $scope.isFieldRequired = true;
                            $scope.showvalidation = true;
                        }

                        if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == 'Manager' || con.role == valueofreport) {
                            $scope.showmanagervalidation = true;

                        }
                        if (con.role == 'Admin') /*Mobio*/ {
                            $scope.showmanagervalidation = false;
                        }

                        if (con.role == 'Admin' || con.role == 'Manager') {
                            $scope.showrequiredfield = false;
                            $scope.isFieldRequired = false;
                            $scope.showvalidation = false;
                        }

                        /* if($scope.showrequiredfield == true) {
                             if(con.city == '') {
                                 angular.element(document.querySelector("#city")).addClass("city-invalid");
                                 angular.element(document.querySelector("#city")).addClass("city-invalid");
                             }
                         }*/
                        $scope.addfilds = '';
                        document.getElementById(elementId).value = $("#" + sourceId).tagsinput('items');
                        $scope.cont = con;
                       // console.log($scope.contactData[0].city, $scope.contactData.city);
                        con.drivingStates = $("#" + sourceId).tagsinput('items');
                        let inputtovalidate;
                        if ($scope.accid === $scope.designAIR) {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "jobtitle", "cellphone","department", "deptDesign", "manager", "vehicalType", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "jobtitle","department", "deptDesign", "manager", "vehicalType", "activedate"];
                                }
                            }
                        }
                        else if($scope.accid === $scope.NWPipe){
                            if($scope.accTrueDialog){
                                inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "company", "cellphone","manager", "vehicalType", "activedate"];
                            }else{
                                inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "company","manager", "vehicalType", "activedate"];
                            }
                        }
                        else if ($scope.accid === $scope.PLMarketing) {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                     inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "jobtitle", "divison", "deptPL", "cellphone", "manager", "vehicalType", "firstPayrollPer", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "jobtitle", "divison", "deptPL", "manager", "vehicalType", "firstPayrollPer", "activedate"];
                                }
                            }
                        }
                        else if ($scope.accid === $scope.accountERMI) {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "netchexEmployeeID", "code", "district", "territory","cellphone", "manager", "vehicalType", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "netchexEmployeeID", "code", "district", "territory", "manager", "vehicalType", "activedate"];
                                }
                            }
                        }
                        else if ($scope.accid === $scope.solarisOilfield) {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "cellphone", "manager", "vehicalType", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "costCode" , "manager", "vehicalType","activedate"];
                                }
                            }
                        }
                        else if ($scope.accid === $scope.accountSurfacePrep) {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                     inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "manager", "vehicalType","cellphone","region","job", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "manager", "vehicalType","region","job","activedate"];
                                }
                            }
                        }
                        else {
                            if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                if($scope.accTrueDialog){
                                     inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "manager", "vehicalType","cellphone", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "city", "state", "zip", "role", "manager", "vehicalType","activedate"];
                                }
                            }
                        }

                        if ($scope.accid === $scope.designAIR) {
                            if (con.role == 'Admin' || con.role == 'Manager') {
                                if($scope.accTrueDialog){
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "jobtitle", "department","cellphone", "deptDesign", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "jobtitle", "department", "deptDesign", "activedate"];
                                }
                            }
                        }
                        else if ($scope.accid === $scope.PLMarketing) {
                            if (con.role == 'Admin' || con.role == 'Manager') {
                                if ($scope.accTrueDialog) {
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "jobtitle", "cellphone", "deptPL", "divison", "activedate"];
                                } else {
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "jobtitle", "deptPL", "divison", "activedate"];
                                }
                            }
                        }
                        else if ($scope.accid === $scope.accountERMI) {
                            if (con.role == 'Admin' || con.role == 'Manager') {
                                if ($scope.accTrueDialog) {
                                    inputtovalidate = ["firstname", "lastname", "email","cellphone", "role", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "activedate"];
                                }
                            }
                        }
                        else {
                            if (con.role == 'Admin' || con.role == 'Manager') {
                                if ($scope.accTrueDialog) {
                                    inputtovalidate = ["firstname", "lastname", "email","cellphone", "role", "activedate"];
                                }else{
                                    inputtovalidate = ["firstname", "lastname", "email", "role", "activedate"];
                                }
                            }
                        }

                        let count = 0;
                        angular.forEach(inputtovalidate, function (item) {
                            if (form[item + suffix].$invalid) {
                                count++;
                                console.log(form[item + suffix], count);
                                if (count < 10) {
                                    if ($scope.addfilds == '') {
                                        $scope.addfilds = ((item === 'deptPL') ? 'department' : item);
                                    }
                                    else {
                                        $scope.addfilds = $scope.addfilds + ', ' + ((item === 'deptPL') ? 'department' : (item === 'firstPayrollPer') ? 'first payroll' : item);
                                    }
                                }
                                else {
                                    $scope.addfilds = '';
                                }
                            }
                        });
                        if (count > 0) {
                            $('#spinner').hide();
                            let message = count > 1 ? 'Please complete ' + $scope.addfilds + ' required fields.' : 'Please complete required field.';
                            toastr.error(message);
                            return;
                        }
                        if (con == "" || con.length == 0) {
                            toastr.error('Please fill the required field');
                            $('#spinner').hide();
                        }
                        else {
                            if ((con.firstName != '' && con.firstName != undefined && con.firstName != null) && (con.lastName != '' && con.lastName != undefined && con.lastName != null) && (con.email != '' && con.email != undefined && con.email != null) && (con.role != '' && con.role != undefined && con.role != null)) {
                                if (con.role == 'Driver' || con.role == 'Driver/Manager' || con.role == valueofreport) {
                                    if ((con.zipCode != '' && con.zipCode != undefined && con.zipCode != null) && (con.city != '' && con.city != undefined && con.city != null) && (con.state != '' && con.state != undefined && con.state != null) && (con.activationDate != '' && con.activationDate != undefined && con.activationDate != null) && (con.addedDate != '' && con.addedDate != undefined && con.addedDate != null) && (con.role != '' && con.role != undefined && con.role != null) && (con.managerId != '' && con.managerId != undefined && con.managerId != null) && (con.vehicalType != '' && con.vehicalType != undefined && con.vehicalType != null)) {
                                        $scope.showrequiredfield = true;
                                        $scope.editUserEmail = con.email;
                                        $scope.conForUpdateInsertfordateformate = [];
                                        $scope.conForUpdateInsertfordateformate.push(con);
                                        
                                        $scope.contactListForUpdateInsert = '';
                                        $scope.contactListForUpdateInsert = formatFulllDateForEmployeeList(angular.copy($scope.conForUpdateInsertfordateformate));

                                        /*c('Before:--'+JSON.stringify($scope.contactListForUpdateInsert));*/

                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.getContactByEmailAddress}', $scope.editUserEmail,
                                            function (result, event) {
                                                if (event.status && result != null) {
                                                    if (result != "Fail") {

                                                        $scope.contactListForUpdateInsert.userid = result;

                                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.manageEmployee}', JSON.stringify($scope.contactListForUpdateInsert), $scope.accid, $scope.id,
                                                            function (result, event) {
                                                            debugger
                                                                if (event.status && result != null) {
                                                                    if (!result.hasError) {
                                                                        if (update)
                                                                            $scope.contactData[0].userid = $scope.contactListForUpdateInsert.userid;
                                                                        else
                                                                            $scope.contactData.userid = $scope.contactListForUpdateInsert.userid;

                                                                        //  $scope.employeeslist = JSON.parse(result); 

                                                                        $scope.employeesList = angular.copy($scope.employeeslist);

                                                                        $scope.updateContact();
                                                                        $scope.$apply();
                                                                    }
                                                                    else {
                                                                        // toastr.error('Something went wrong.');
                                                                        //toastr.error(errorMsg);
                                                                        $('#spinner').hide();
                                                                        toastr.error(result.message);
                                                                    }
                                                                }
                                                                else {
                                                                    $('#spinner').hide();

                                                                }
                                                            },
                                                            { escape: false }
                                                        );
                                                    }
                                                    else {
                                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.manageEmployee}', JSON.stringify($scope.contactListForUpdateInsert), $scope.accid, $scope.id,
                                                            function (result, event) {
                                                            debugger
                                                                if (event.status && result != null) {
                                                                    if (!result.hasError) {
                                                                        $scope.IsShow = false;
                                                                        $scope.employeeslist = JSON.parse(result.result);
                                                                        $scope.employeesList = angular.copy($scope.employeeslist);
                                                                        if ($scope.contactListForUpdateInsert.userid != undefined && $scope.contactListForUpdateInsert.userid != '')
                                                                            $scope.updateContact();
                                                                        else
                                                                            $scope.insertContact(form);

                                                                        let conData = update ? $scope.contactData[0] : $scope.contactData;
                                                                        angular.forEach($scope.employeeslist, function (value, key) {

                                                                            if (value.email === conData.email) {
                                                                                if (update)
                                                                                    $scope.contactData[0].userid = value.userid;
                                                                                else
                                                                                    $scope.contactData.userid = value.userid;
                                                                            }
                                                                        });
                                                                        $('#spinner').hide();
                                                                        $scope.contactData = {};
                                                                        $scope.isZipValid = false;
                                                                        $scope.contactData = obj_contactnew();
                                                                        $scope.contactData.addedDate = $filter('date')(new Date(), "MM/dd/yy");
                                                                        form.$setPristine();
                                                                        form.$setValidity();
                                                                        $scope.$apply();
                                                                    }
                                                                    else {
                                                                        $('#spinner').hide();
                                                                        $scope.isZipValid = false;
                                                                        // toastr.error('Something went wrong.');    
                                                                        // toastr.error(errorMsg);
                                                                        toastr.error(result.message);
                                                                    }
                                                                } else {
                                                                    $('#spinner').hide();
                                                                    $scope.isZipValid = false;
                                                                    //toastr.error('Something went wrong.');
                                                                    toastr.error(errorMsg);
                                                                }
                                                            },
                                                            { escape: false }
                                                        );
                                                    }
                                                } else {
                                                    $scope.isZipValid = false;
                                                    $('#spinner').hide();
                                                    toastr.error('Something went wrong. ');
                                                }
                                            }, { escape: false });
                                    }
                                    else {
                                        $('#spinner').hide();
                                        toastr.error('Please fill the required field ');
                                    }
                                }
                                if (con.role == 'Admin' || con.role == 'Manager') {
                                    if ((con.activationDate != '' && con.activationDate != undefined && con.activationDate != null) && (con.addedDate != '' && con.addedDate != undefined && con.addedDate != null) && (con.role != '' && con.role != undefined && con.role != null)) {
                                        $scope.showmanagervalidation = false;
                                        $scope.isFieldRequired = false;
                                        $scope.showrequiredfield = false;
                                        $scope.editUserEmail = con.email;
                                        $scope.conForUpdateInsertfordateformate = [];
                                        $scope.conForUpdateInsertfordateformate.push(con);
                                        $scope.contactListForUpdateInsert = '';
                                        $scope.contactListForUpdateInsert = formatFulllDateForEmployeeList(angular.copy($scope.conForUpdateInsertfordateformate));
                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.getContactByEmailAddress}', $scope.editUserEmail,
                                            function (result, event) {
                                                if (event.status && result != null) {
                                                    if (result != "Fail") {
                                                        $scope.contactListForUpdateInsert.userid = result;
                                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.manageEmployee}', JSON.stringify($scope.contactListForUpdateInsert), $scope.accid, $scope.id,
                                                            function (result, event) {
                                                            debugger
                                                                if (event.status && result != null) {
                                                                    if (!result.hasError) {
                                                                        if (update)
                                                                            $scope.contactData[0].userid = $scope.contactListForUpdateInsert.userid;
                                                                        else
                                                                            $scope.contactData.userid = $scope.contactListForUpdateInsert.userid;
                                                                        // $scope.employeeslist = JSON.parse(result); 
                                                                        $scope.updateContact();
                                                                        $scope.$apply();
                                                                    }
                                                                    else {
                                                                        $('#spinner').hide();
                                                                        // toastr.error('Something went wrong.');
                                                                        //  toastr.error(errorMsg);
                                                                        toastr.error(result.message);
                                                                    }
                                                                }
                                                                else {
                                                                    $('#spinner').hide();

                                                                }
                                                            },
                                                            { escape: false }
                                                        );
                                                    }
                                                    else {
                                                        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.manageEmployee}', JSON.stringify($scope.contactListForUpdateInsert), $scope.accid, $scope.id,
                                                            function (result, event) {
                                                                if (event.status && result != null) {
                                                                debugger
                                                                    if (!result.hasError) {
                                                                        $scope.IsShow = false;
                                                                        $scope.employeeslist = JSON.parse(result.result);
                                                                        if ($scope.contactListForUpdateInsert.userid != undefined && $scope.contactListForUpdateInsert.userid != '')
                                                                            $scope.updateContact();
                                                                        else
                                                                            $scope.insertContact(form);

                                                                        let conData = update ? $scope.contactData[0] : $scope.contactData;
                                                                        angular.forEach($scope.employeeslist, function (value, key) {

                                                                            if (value.email === conData.email) {
                                                                                if (update)
                                                                                    $scope.contactData[0].userid = value.userid;
                                                                                else
                                                                                    $scope.contactData.userid = value.userid;
                                                                            }
                                                                        });
                                                                        $scope.contactData = {};
                                                                        $scope.isZipValid = false;
                                                                        $scope.contactData = obj_contactnew();
                                                                        $scope.contactData.addedDate = $filter('date')(new Date(), "MM/dd/yy");
                                                                        form.$setPristine();
                                                                        form.$setValidity();

                                                                        $scope.$apply();
                                                                    }
                                                                    else {
                                                                        $scope.isZipValid = false;
                                                                        $('#spinner').hide();
                                                                        //   toastr.error('Something went wrong. result'+result);    
                                                                        // toastr.error(errorMsg + result);
                                                                        toastr.error(result.message);
                                                                    }
                                                                } else {
                                                                    $scope.isZipValid = false;
                                                                    $('#spinner').hide();
                                                                    //toastr.error('Something went wrong.');
                                                                    toastr.error(errorMsg);
                                                                }
                                                            },
                                                            { escape: false }
                                                        );
                                                    }
                                                } else {
                                                    $('#spinner').hide();
                                                    $scope.isZipValid = false;
                                                    //  toastr.error('Something went wrong. ');
                                                    toastr.error(errorMsg);
                                                }
                                            }, { escape: false });
                                    }
                                    else {
                                        $('#spinner').hide();
                                        $scope.isZipValid = false;
                                        toastr.error('Please fill the required field ');
                                    }
                                }
                            }
                            else {
                                $('#spinner').hide();
                                $scope.isZipValid = false;
                                toastr.error('Please fill the required field ');
                            }
                        }
                        /*$('#spinner').hide();*/
                    }
          
                }


            $scope.sendEmailContact = function (con) {
                $('#spinner').show();
                if (con.email != '' && con.email != undefined && con.email != null) {
                    $scope.emailContact = con.email;
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.RosterController.putHTTP}', $scope.accid, JSON.stringify($scope.emailContact),
                        function (result, event) {
                            if (event.status) {
                                if (result === "\"OK\"") {
                                    $('#spinner').hide();
                                    toastr.success('Email has been successfully send to ' + con.firstName + ' ' + con.lastName);
                                } else {
                                    $('#spinner').hide();
                                    toastr.success(result);
                                }

                            }
                            else {
                                $('#spinner').hide();
                                toastr.error('Something went wrong. ');
                            }
                        },
                        { escape: false }
                    );
                }
                else {
                    $('#spinner').hide();
                    toastr.error('Email Address Is Required. ');
                }
            }
            /* reset Form start*/
            var pristineFormTemplate = $('#form1').html();
            $scope.resetForm = function () {
                $('#form1').empty().append($compile(pristineFormTemplate)($scope));
            }
            /* reset Form complete*/

            $scope.updateContact = function () {
                $('#spinner').hide();
                $scope.isZipValid = false;
                toastr.success('Success! You Just Updated ' + $scope.contactListForUpdateInsert[0].firstName + '\'s Details.');
                refreshForm();
            }

            $scope.insertContact = function () {
                $('#spinner').hide();
                $scope.isZipValid = false;
                toastr.success('Success! You Just Added ' + $scope.contactListForUpdateInsert[0].firstName);
                refreshForm();
                $("#drivingstatenew").tagsinput('removeAll');
            }

            /* show toast */
            $scope.showToast = function (message) {
                toastr.error(message);
            }

            /* Sorting For table */
            $scope.sortKey = 'firstName';
            $scope.reverse = false;
            $scope.sort = function (keyname) {

                $scope.reverse = ($scope.sortKey === keyname) ? !$scope.reverse : false;
                $scope.sortKey = keyname;
                if (keyname === 'firstName' || keyname === 'ContactName' || keyname === 'managerName' || keyname === 'role' || keyname === 'ContactEmail' || keyname === 'email' || keyname === 'appVersion' || keyname === 'district' || keyname === 'territory' || keyname === 'employeeId' || keyname === 'driverType' || keyname === 'deactivationBy' || keyname === 'payRollPeriod') {
                    $scope.employeeslist.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : a[keyname].toLowerCase(),
                            nameB = (b[keyname] === null) ? '' : b[keyname].toLowerCase()
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'drivingStates') {
                    $scope.employeeslist.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : a[keyname],
                            nameB = (b[keyname] === null) ? '' : b[keyname]
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'zipCode' || keyname === 'code' || keyname === 'HalfFixedAmount') {
                    $scope.employeeslist.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : parseInt(a[keyname]),
                            nameB = (b[keyname] === null) ? '' : parseInt(b[keyname])
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return valuscope.model.mileageList=e (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'deactivaedDate' || keyname === 'freeze') {
                    $scope.employeeslist.sort(function (a, b) {
                        var nameA = (a[keyname] === null) ? '' : new Date(a[keyname].toLowerCase()),
                            nameB = (b[keyname] === null) ? '' : new Date(b[keyname].toLowerCase())
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })

                }
            }

            $scope.sortForLOA = function (keyname) {
                $scope.reverse = ($scope.sortKey === keyname) ? !$scope.reverse : false;
                $scope.sortKey = keyname;
                if (keyname === 'firstName' || keyname === 'ContactName' || keyname === 'managerName' || keyname === 'role' || keyname === 'ContactEmail' || keyname === 'email' || keyname === 'appVersion' || keyname === 'district' || keyname === 'territory' || keyname === 'employeeId' || keyname === 'driverType' || keyname === 'deactivationBy' || keyname === 'payRollPeriod') {
                    $scope.employeeslistLOA.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : a[keyname].toLowerCase(),
                            nameB = (b[keyname] === null) ? '' : b[keyname].toLowerCase()
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'drivingStates') {
                    $scope.employeeslistLOA.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : a[keyname],
                            nameB = (b[keyname] === null) ? '' : b[keyname]
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'zipCode' || keyname === 'code' || keyname === 'HalfFixedAmount') {
                    $scope.employeeslistLOA.sort(function (a, b) {

                        var nameA = (a[keyname] === null) ? '' : parseInt(a[keyname]),
                            nameB = (b[keyname] === null) ? '' : parseInt(b[keyname])
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return valuscope.model.mileageList=e (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })
                }
                if (keyname === 'deactivaedDate' || keyname === 'freeze' || keyname === 'LOAStartDate' || keyname === 'LOAEndDate') {
                    $scope.employeeslistLOA.sort(function (a, b) {
                        var nameA = (a[keyname] === null || a[keyname] === undefined) ? '' : new Date(a[keyname].toLowerCase()),
                            nameB = (b[keyname] === null || b[keyname] === undefined) ? '' : new Date(b[keyname].toLowerCase())
                        if ($scope.reverse) {
                            if (nameA < nameB) //sort string ascending
                                return -1
                            if (nameA > nameB)
                                return 1
                            return 0 //default return value (no sorting)
                        } else {
                            if (nameA < nameB) //sort string ascending
                                return 1
                            if (nameA > nameB)
                                return -1
                            return 0 //default return value (no sorting)
                        }
                    })

                }
            }
            $scope.keyPressed = function (keyEvent, len) {
                if (keyEvent.keyCode == 13 || (keyEvent.keyCode == 32 && !len)) {
                    event.preventDefault();
                }
                // return keyEvent.which !== 32;
            };
            $('#spinner').hide();
            $scope.hideErrorModal();
            }]);
        </script>
    </head>

    <body ng-app="rosterModule" ng-controller="RosterController" id="theBody">
        <header>
            <div class="main-header sticky" id="myHeader">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <nav class="navbar navbar-expand-md my-0 my-md-1 px-0">
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="!admindriver" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <a class="navbar-brand col-6 col-sm-6 col-md-3 col-lg-3 col-xl-3 px-0" ng-show="admindriver" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">
                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/logo/mBurse-logo_rev.png')}" class="img-fluid" href="javascript:void(0)"
                                        alt="logo" />
                                </a>
                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                                    <span class="navbar-toggler-icon">
                                        <i class="fa fa-bars"></i>
                                    </span>
                                </button>
                                <div class="collapse navbar-collapse flex-column col-12 col-sm-6 col-md-9 col-lg-9 col-xl-9 ml-3 ml-sm-0 ml-lg-0 align-items-end"
                                    id="collapsibleNavbar">
                                    <ul class="navbar-nav flex-row">
                                        <li class="nav-item">
                                            <a class="nav-link text-white" ng-show="!admindriver && !manVisible" href="/app/admindashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver && !manVisible" href="/app/admindriverdashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="!admindriver && manVisible" href="/app/managerdashboardfromadmin?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Dashboard</a>
                                            <a class="nav-link text-white" ng-show="admindriver && manVisible" href="/app/managerdashboardfromadmindriver?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Dashboard</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}">Mileage</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/MileageDashboard?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Mileage</a>
                                        </li>
                                        <li class="nav-item active" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Drivers</a>
                                        </li>
                                        <li class="nav-item active" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/roster?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Drivers</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/roster?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Drivers</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}">Communications</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/ManageNotification?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Communications</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible && accid === PLMarketing">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/ManageNotification?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Communications</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/ManageNotification?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Communications</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="!admindriver" href="/app/reportlist?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}">Reports</a>
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/reportlist?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">Reports</a>
                                        </li>
                                        <li class="nav-item" ng-show="manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?managerid={{manId}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">My Details</a>
                                        </li>
                                        <li class="nav-item" ng-show="!manVisible">
                                            <a class="nav-link text-white" ng-show="admindriver" href="/app/driveradminmanagermydetail?accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true">My Details</a>
                                        </li>
                                        <li class="nav-item">
                                            <a class="nav-link text-white" href="/app/secur/logout.jsp">Logout</a>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </header>
        <div id="spinner">
            <div class="spinner-background"></div>
            <div class="spinner-load">
                <div class="spinner-border text-light" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
        <section class="container-fluid">
            <div class="my-3 admin-roster-tab-section" id="pills-alldrivers-roster">
                <ul class="nav nav-pills mb-3 pad-b" id="adminroster-pills-tab" role="tablist">
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" id="pills-alldrivers-tab-back" data-toggle="pill" href="#pills-alldrivers" role="tab" aria-controls="pills-home"
                            aria-selected="true" ng-show="backButton" ng-click="Showback()">Back</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link active pillsviewemployees" id="pills-alldrivers-tab" data-toggle="pill" href="#pills-alldrivers" role="tab"
                            aria-controls="pills-home" aria-selected="true" ng-attr-active="tabs[1].active" ng-click="Show()">View All Employees</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link addroster" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-addadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-addadminroster" ng-attr-active="tabs[2].active" ng-click="Hide();showForm()">Add</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0">
                        <a class="nav-link" id="pills-importadminroster-tab" data-toggle="pill" href="#pills-importadminroster" role="tab" aria-controls="pills-importadminroster"
                            aria-selected="false" ng-attr-active="tabs[3].active" ng-click="Hide()">Import</a>
                    </li>
                    <li class="mb-2 mb-sm-0 mb-md-0 export-item" ng-show="IsVisible">
                        <div excel-export="true" export-data="emplistfordownload" file-name="{{fileName}}" />
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 deactivateroster ml-10" ng-show="showMassDeactivatebtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-massadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-massadminroster" ng-attr-active="tabs[4].active" ng-click="editBulkDateModel(emp)">Deactivate
                            <i class="fa fa-edit a-hover-pointer"></i>
                        </a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 Empfreezeroster ml-10" ng-show="showMassFreezeEmployeebtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-freezeadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-freezeadminroster" ng-attr-active="tabs[5].active" ng-click="FreezeEmployees()">Freeze Employees</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 Empunfreezeroster ml-10" ng-show="showMassUnFreezeEmployeebtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-freezeadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-freezeadminroster" ng-attr-active="tabs[6].active" ng-click="UnFreezeEmployees()">UnFreeze Employees</a>
                    </li>
                    <!-- AI-000328 : Mass Send Reset Link to Users of Community IF Possible. -->
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 deactivateroster ml-10" ng-show="showResetPasswordbtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-massadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-massadminroster" ng-attr-active="tabs[7].active" ng-click="resetPassword()">Reset Password
                            <i class="fa fa-unlock-alt a-hover-pointer"></i>
                        </a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 deactivateroster ml-10" ng-show="showMassEnablebtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-massadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-massadminroster" ng-attr-active="tabs[8].active" ng-click="enableUser()">Enable User
                        </a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 deactivateroster ml-10" ng-show="showMassConcurbtn" ng-if="accid === SPBSAcc || accid === EngGypAcc">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-massadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-massadminroster" ng-attr-active="tabs[9].active" ng-click="ConcurConnect()">Concur Connect
                        </a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0 loaroster ml-10" ng-show="showSaveLOABtn">
                        <a class="nav-link" id="pills-addadminroster-tab" data-toggle="pill" href="#pills-loaadminroster" role="tab" aria-controls="pills-addadminroster"
                            data-target="#pills-loaadminroster" ng-attr-active="tabs[10].active" ng-click="saveLOA()">Save LOA
                        </a>
                    </li>
                    <!-- AI-000179 Edited By Megha -->
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" ng-show="IsVisibleLoginDriverManager">
                        <a class="nav-link" id="pills-loginadminroster-tab" ng-show="admindriver" href="/app/drivermanagerdriverdetails?accid={{accid}}&id={{userid}}&manid={{id}}&showteam={{showteam}}&admindriver=true&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                            <a class="nav-link" id="pills-loginadminroster-tab" ng-show="!admindriver" href="/app/drivermanagerdriverdetails?accid={{accid}}&id={{userid}}&manid={{id}}&showteam={{showteam}}&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" ng-show="IsVisibleLoginManager && !admindriver">
                        <a class="nav-link" id="pills-loginadminroster-tab" href="/app/managerdashboardfromadmin?managerid={{userid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" ng-show="IsVisibleLoginManager && admindriver">
                        <a class="nav-link" id="pills-loginadminroster-tab" href="/app/managerdashboardfromadmindriver?managerid={{userid}}&accid={{accid}}&id={{id}}&showteam={{showteam}}&admindriver=true&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" ng-show="IsVisibleLoginDriver && !admindriver">
                        <a class="nav-link" id="pills-loginadminroster-tab" href="/app/driverdashboardfromadminmanager?accid={{accid}}&id={{userid}}&adminid={{id}}&showteam={{showteam}}&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                    </li>
                    <li class="nav-item mb-2 mb-sm-0 mb-md-0" ng-show="IsVisibleLoginDriver && admindriver">
                        <a class="nav-link" id="pills-loginadminroster-tab" href="/app/admindriverdashboardfromadminmanager?accid={{accid}}&id={{userid}}&adminid={{id}}&showteam={{showteam}}&admindriver=true&loginAS=true"
                            role="tab" ng-attr-active="tabs[9].active">Login As</a>
                    </li>
                    <!-- AI-000179 Edited By Megha -->
                </ul>

                <!-- AI-000460 -->
                <div class="dropdown" ng-show="showMultipleAction">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Activity
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" ng-click="displayCheckboxForDeactivation()">Mass Deactivate</a>
                        <a class="dropdown-item" ng-click="displayCheckboxForFreeze()">Freeze</a>
                        <a class="dropdown-item" ng-click="displayCheckboxForUnFreeze()">UnFreeze</a>
                        <a class="dropdown-item" ng-click="sendPacketToDriver()">Send Driver Packet</a>
                        <a class="dropdown-item" ng-click="editLOAProcessModel.open()" ng-if="accid === PLMarketing">Leave of Absence</a><!-- editLOAProcessModel.open() -->
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" ng-click="displayCheckboxForConcur()" ng-if="accid === SPBSAcc || accid === EngGypAcc">Concur Connect</a>
                        <a class="dropdown-item" ng-click="editSyncAllMileageModel()" ng-if="accid === accountERMI">Sync All</a>
                        <a class="dropdown-item" ng-click="displayCheckboxForMassResetPassword()">Mass Reset Password</a>
                        <a class="dropdown-item" ng-click="displayCheckboxForEnableUser()">Enable User</a>
                        <a class="dropdown-item" ng-click="editLockDateModel.open();">Mileage Lock Date</a>
                    </div>
                </div>
                <div class="cancel-process" ng-show="showCancelProBtn">
                    <button class="btn btn-secondary processBtn" ng-click="cancelProcess()">Cancel Process</button>
                </div>

                <!-- AI-000460  Ends -->
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-alldrivers" role="tabpanel" aria-labelledby="pills-alldrivers-tab">
                        <span class="fullscreen_msg displaynone">Press ESC To Exit FullScreen</span>

                        <button class="btn btn-secondary close_fullscreen float-right" onclick="exitFullscreen()">
                            <i class="fa fa-times"></i>
                        </button>

                        <form id="form2" name="myform" class="needs-validation" novalidate="true">
                            <div class=" table-responsive" id="refreshdiv">
                                <!-- height: 462px -->
                                <!-- AI-000206 - Start-->

                                <div id="example_filter" class="dataTables_filter pull-left d-block">

                                    <div class="input-group w-85">
                                        <i id="filtericon" class="fa fa-search" ng-if="search.length===0"></i>
                                        <input class="form-control py-2 border-right-0 border" type="search" ng-model="search" placeholder="Search" aria-controls="example"
                                            ng-keypress="keyPressed($event, search.length)" id="example-search-input" />
                                    </div>
                                </div>
                                <!-- AI-000206 - End-->
                                <div class="fullscreen_button d-block">
                                    <button class="btn btn-secondary float-right" onclick="openFullscreen()" id="fullscreen_btn">
                                        <i class="fa fa-expand" aria-hidden="true"></i>
                                    </button>
                                </div>
                                <table id="example" ng-show="!isPlAccountAbsence" class="table table-striped dt-responsive nowrap dataTable sticky-header"
                                    cellspacing="0" width="100%" ng-cloak="true">
                                    <!-- height : 375px -->
                                    <thead>
                                        <tr>
                                            <th class="deactivateChkth" ng-show="checkboxobjDeactivateShow">
                                                <input type="checkbox" ng-model="checkboxobj.isCheckedAllForDeactivate" class="deactivateCheck ml-10" ng-click="CheckUncheckAllForMassDeactivate(checkboxobj.isCheckedAllForDeactivate,emp);"
                                                />
                                            </th>
                                            <th class="deactivateChkth" ng-show="checkboxobjEnableUserShow">
                                                <input type="checkbox" ng-model="checkboxobj.isCheckedAllForEnableUser" class="deactivateCheck ml-10" ng-click="CheckUncheckAllForEnableUser(checkboxobj.isCheckedAllForEnableUser,emp);"
                                                />
                                            </th>
                                            <th class="deactivateChkth" ng-show="checkboxobjConcurShow">
                                                <input type="checkbox" ng-model="checkboxobj.isCheckedAllForConcur" class="deactivateCheck ml-10" ng-click="CheckUncheckAllForConcur(checkboxobj.isCheckedAllForConcur,emp);"
                                                />
                                            </th>
                                            <th class="freezeChkth" ng-show="checkboxobjFreezeShow">
                                                <input type="checkbox" ng-model="checkboxobj.isCheckedAllForFreeze" class="freezeCheck ml-10" ng-click="CheckUncheckAllForFreeze(checkboxobj.isCheckedAllForFreeze,emp);"
                                                />
                                            </th>
                                            <th ng-click="sort('firstName')">Name
                                                <span class="sort-icon pull-right" ng-show="sortKey=='firstName'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid != accountERMI" ng-click="sort('email')">Email
                                                <span class="sort-icon pull-right" ng-show="sortKey=='email'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                </span>
                                            </th>
                                            <th ng-click="sort('deactivaedDate')">Deactivation
                                                <span class="sort-icon pull-right" ng-show="sortKey=='deactivaedDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('deactivationBy')">Deactivation By
                                                <span class="sort-icon pull-right" ng-show="sortKey=='deactivationBy'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('role')" class="roleTh">Role
                                                <span class="sort-icon pull-right" ng-show="sortKey=='role'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid != accountERMI" ng-click="sort('role')">Role
                                                <span class="sort-icon pull-right" ng-show="sortKey=='role'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-click="sort('freeze')">Freeze
                                                <span class="sort-icon pull-right" ng-show="sortKey=='freeze'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-click="sort('managerName')">Manager
                                                <span class="sort-icon pull-right" ng-show="sortKey=='managerName'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid != accountERMI" ng-click="sort('zipCode')">Zip Code
                                                <span class="sort-icon pull-right" ng-show="sortKey=='zipCode'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('driverType')" class="driverType_td">Driver Type
                                                <span class="sort-icon pull-right" ng-show="sortKey=='driverType'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('employeeId')">Employee ID
                                                <span class="sort-icon pull-right" ng-show="sortKey=='employeeId'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('code')" style="text-align:center">Code
                                                <span class="sort-icon pull-right" ng-show="sortKey=='code'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('district')">District
                                                <span class="sort-icon pull-right" ng-show="sortKey=='district'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid === accountERMI" ng-click="sort('territory')">Territory
                                                <span class="sort-icon pull-right" ng-show="sortKey=='territory'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid != accountERMI" ng-click="sort('appVersion')">App Version
                                                <span class="sort-icon pull-right" ng-show="sortKey=='appVersion'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-if="accid != accountERMI" ng-click="sort('drivingStates')">Driving States
                                                <span class="sort-icon pull-right" ng-show="sortKey=='drivingStates'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- height : 350px -->
                                        <tr dir-paginate="emp in employeeslist| filter:search |itemsPerPage: itemPerPage" ng-class="{'selected':emp.userid == selectedRow}"
                                            ng-model="emp" pagination-id="employees">
                                            <td ng-model="emp.check" class="deactivateChktd" ng-show="checkboxobjDeactivateShow">
                                                <input type="checkbox" ng-model="emp.IsMassDeactivated" class="deactivateCheck" ng-change="CheckUncheckForMassDeactivate(emp);"
                                                />
                                            </td>
                                            <td ng-model="emp.checkforenable" class="deactivateChktd" ng-show="checkboxobjEnableUserShow">
                                                <input type="checkbox" ng-model="emp.IsMassEnable" class="deactivateCheck" ng-change="CheckUncheckForEnableUser(emp);" />
                                            </td>
                                            <td ng-model="emp.checkforconcur" class="deactivateChktd" ng-show="checkboxobjConcurShow">
                                                <input type="checkbox" ng-model="emp.IsMassEnable" class="deactivateCheck" ng-change="CheckUncheckForConcur(emp);" />
                                            </td>
                                            <td ng-model="emp.checkforfreeze" class="freezeChktd" ng-show="checkboxobjFreezeShow">
                                                <input type="checkbox" ng-model="emp.IsMassFreeze" class="freezeCheck" ng-change="CheckUncheckForFreeze(emp);" />
                                            </td>
                                            <td ng-model="emp.name" class="name_td">
                                                <a data-toggle="pill" class="a-setcolor-pointer name_link" data-target="#pills-addadminroster" ng-click="passData(emp)">{{emp.firstName}} {{emp.lastName}}</a>

                                            </td>
                                            <td ng-if="accid != accountERMI" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer emailId_td" id="email_td">
                                                {{emp.email}}
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-show="emp.iseditable" class="emailId_td">
                                                <input type="email" name="email_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer" ng-model="emp.email" pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,12})+$"
                                                    required="true" />
                                            </td>
                                            <td ng-show="emp.iseditable" class="deactivate_td">
                                                <!-- <a ng-click="editDateModel.open(emp);loadDatePicker(emp.deactivaedDate,emp.lastPayDate);" class="a-hover-pointer a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.deactivaedDate)}}
                                                </a> -->
                                                <a ng-click="editDateModel.open(emp);loadDatePicker(emp.deactivaedDate);" class="a-hover-pointer a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.deactivaedDate)}}
                                                </a>
                                            </td>
                                            <td ng-model="emp.deactivaedDate" ng-show="!emp.iseditable" class="deactivate_td">
                                                <!-- <a ng-click="edit(emp,emp.userid);editDateModel.open(emp);loadDatePicker(emp.deactivaedDate,emp.lastPayDate);" class="a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.deactivaedDate)}}
                                                </a> -->
                                                <a ng-click="edit(emp,emp.userid);editDateModel.open(emp);loadDatePicker(emp.deactivaedDate);" class="a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.deactivaedDate)}}
                                                </a>
                                            </td>

                                            <!-- <td style="display: none" ng-model="emp.lastPayDate">
                                                <a ng-click="editDateModel.open(emp)" class="a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i> {{emp.lastPayDate}}</a>
                                            </td> -->
                                            <td ng-if="accid === accountERMI" ng-model="emp.deactivationBy" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer role_td">
                                                {{emp.deactivationBy}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.role" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer roleTh_td">
                                                {{emp.role}}
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-model="emp.role" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer role_td">
                                                {{emp.role}}
                                            </td>
                                            <td ng-model="emp.role" ng-show="emp.iseditable">

                                                <select ng-model="emp.role" required="true" name="role_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer">
                                                    <option ng-selected="{{emp.role == role}}" ng-repeat="role in rolelist" value="{{role}}">{{role}}</option>
                                                </select>
                                            </td>
                                            <td ng-model="emp.freeze" class="a-hover-pointer">
                                                {{formateDate(emp.freeze)}}
                                                <!-- <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/checked.png')}" title="Freezed Users" ng-show="{{emp.freeze == true}}" class="img-checked" href="javascript:void(0)" alt="checkbox-img"/>
                                                    <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/uncheck.png')}"  title="Unfreezed Users" ng-show="{{emp.freeze == false}}" class="img-uncheck" href="javascript:void(0)" alt="checkbox-img"/> -->
                                            </td>
                                            <td ng-model="emp.managerId" ng-show="!emp.iseditable && emp.deactivaedDate == null" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer">
                                                <span class="manager_td">{{emp.managerName}}</span>
                                            </td>
                                            <td ng-model="emp.managerId" ng-show="!emp.iseditable && emp.deactivaedDate != null" class="a-hover-pointer">
                                                <span class="manager_td">{{emp.managerName}}</span>
                                            </td>
                                            <td ng-model="emp.managerId" ng-show="emp.iseditable">
                                                <select id="selectemp" ng-model="emp.managerId" required="true" name="manager_{{emp.userid}}" ng-click="event = $event" class="form-control rounded-0 a-hover-pointer"
                                                    ng-change="selectedManager(event,emp)">
                                                    <option ng-selected="{{emp.managerId == manager.Id}}" ng-repeat="manager in managerlist" value="{{manager.Id}}" name="{{manager.Name}}">{{manager.Name}}</option>
                                                </select>
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.driverType" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer pl-1">
                                                {{emp.driverType}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-show="emp.iseditable">
                                                <select ng-model="emp.driverType" name="driverType_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer pl-1">
                                                    <option ng-selected="{{emp.driverType == driver}}" ng-repeat="driver in driverType" value="{{driver}}">{{driver}}</option>
                                                </select>
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-model="emp.zipCode" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer zipcode_td">{{emp.zipCode}}
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-model="emp.zipCode" ng-show="emp.iseditable" class="zipcode_td">
                                                <input ng-model="emp.zipCode" style="margin-bottom: 14px" size="5" maxlength="5" pattern="^[0-9]{5}$" ng-required="emp.role!=='Manager' && emp.role!=='Admin'"
                                                    name="zip_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer"
                                                    type="text"  ng-change="showcountryempedit(emp.zipCode, emp.role, emp)"/>
                                                <select id="city" ng-model="emp.city" ng-show="emp.iseditable" class="form-control rounded-0" ng-required="emp.role!=='Manager' && emp.role!=='Admin'"
                                                        name="city_{{emp.userid}}"  ng-options="city for city in emp.citylist">
                                                    <option value=""></option>
                                                    <!-- <option ng-selected="{{city == contactData[0].city}}" ng-repeat="city in relatedcitylist" value="{{city}}" >{{city}}</option> --> 
                                                </select>
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.employeeId" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer employeeId_td">
                                                {{emp.employeeId}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-show="emp.iseditable" class="employeeId_td">
                                                <input type="text" name="employeeId_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer" ng-model="emp.employeeId"
                                                />
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.code" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer code_td">
                                                {{emp.code}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-show="emp.iseditable" class="code_td">
                                                <input type="text" name="code_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer" ng-model="emp.code" />
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.district" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer district_td">
                                                {{emp.district}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-show="emp.iseditable" class="district_td">
                                                <input type="text" name="district_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer" ng-model="emp.district"
                                                />
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-model="emp.territory" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer territory_td">
                                                {{emp.territory}}
                                            </td>
                                            <td ng-if="accid === accountERMI" ng-show="emp.iseditable" class="territory_td">
                                                <input type="text" name="territory{{emp.userid}}" class="form-control rounded-0 a-hover-pointer" ng-model="emp.territory"
                                                />
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-model="emp.appVersion" class="a-hover-pointer">
                                                {{emp.appVersion}}
                                            </td>
                                            <td ng-if="accid != accountERMI" ng-model="emp.drivingStates" class="dstates_td">

                                                <div>
                                                    <div class="adminroster-driverstatus" ng-model="emp.drivingStates" ng-if="emp.drivingStates" ng-repeat="state in emp.drivingStates">
                                                        <span class="tagclose" ng-click="edit(emp,emp.userid);removeState(emp,$index);">
                                                            <i class="fa fa-close"></i>
                                                        </span>
                                                        <a href=".adminrosterDriverstatesModal" data-toggle="modal" data-target="adminrosterDriverstatesModal" class="drivingStateLink">{{state}}</a>
                                                    </div>
                                                </div>
                                                <a ng-if="emp.role!=='Manager' && emp.role!=='Admin'" class="adminroster-add-driverstatus" ng-click="edit(emp,emp.userid);editDialog.open(emp,drivingStatesList)">
                                                    <i class="fa fa-plus"></i>
                                                </a>
                                            </td>


                                        </tr>
                                        <tr ng-show="(employeeslist|filter:search).length==0">
                                            <td colspan="6" class="table-nodata">No Data Available</td>
                                        </tr>
                                    </tbody>
                                </table>

                                <table id="example" ng-show="isPlAccountAbsence" class="table table-striped dt-responsive nowrap dataTable sticky-header"
                                    cellspacing="0" width="100%" ng-cloak="true">
                                    <!-- height : 375px -->
                                    <thead>
                                        <tr>
                                            <th class="loaChkth" ng-show="checkboxobjLoaShow">
                                                <input type="checkbox" ng-model="checkboxobj.isCheckedAllForLOA" class="loaCheck ml-10" ng-click="CheckUncheckAllForLOA(checkboxobj.isCheckedAllForLOA,emp);"
                                                />
                                            </th>
                                            <th ng-click="sortForLOA('ContactName')">Name
                                                <span class="sort-icon pull-right" ng-show="sortKey=='ContactName'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-click="sortForLOA('ContactEmail')">Email
                                                <span class="sort-icon pull-right" ng-show="sortKey=='ContactEmail'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}">
                                                </span>
                                            </th>
                                            <th ng-click="sortForLOA('LOAStartDate')" style="padding-left: 24px;">LOA Start Date
                                                <span class="sort-icon pull-right" ng-show="sortKey=='LOAStartDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-click="sortForLOA('LOAEndDate')" style="padding-left: 21px;">LOA End Date
                                                <span class="sort-icon pull-right" ng-show="sortKey=='LOAEndDate'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>
                                            <th ng-click="sortForLOA('HalfFixedAmount')">LOA Fixed Amount
                                                <span class="sort-icon pull-right" ng-show="sortKey=='HalfFixedAmount'" ng-class="{'fa fa-chevron-up':reverse,'fa fa-chevron-down':!reverse}"></span>
                                            </th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- height : 350px -->
                                        <tr dir-paginate="emp in employeeslistLOA| filter:search |itemsPerPage: itemPerPage" ng-class="{'selected':emp.BiweekId == selectedRow}"
                                            ng-model="emp" pagination-id="employees">
                                            <td ng-model="emp.loacheck"  ng-show="checkboxobjLoaShow" class="deactivateChktd">
                                                <input type="checkbox" ng-model="emp.isleaveofabsence" class="loaCheck" ng-change="CheckUncheckForLOA(emp);" />
                                            </td>
                                            <td ng-model="emp.ContactName" class="name_td">
                                              {{emp.ContactName}}
                                            </td>
                                            <td class="a-hover-pointer emailId_td"
                                                id="email_td">
                                                {{emp.ContactEmail}}
                                            </td>
                                          
                                            <td ng-show="emp.iseditable">
                                                <!-- <a ng-click="editDateModel.open(emp);loadDatePicker(emp.deactivaedDate,emp.lastPayDate);" class="a-hover-pointer a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.deactivaedDate)}}
                                                </a> -->
                                                <a ng-click="editLOAModel.open(emp, 'loaStartDate');loadDatePickerL(emp.LOAStartDate);" class="a-hover-pointer a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.LOAStartDate)}}
                                                </a>
                                            </td>
                                            <td ng-model="emp.LOAStartDate" ng-show="!emp.iseditable">
                                                <a ng-click="edit2(emp,emp.BiweekId);editLOAModel.open(emp);loadDatePickerL(emp.LOAStartDate);" class="a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.LOAStartDate)}}
                                                </a>
                                            </td>
                                            <td ng-show="emp.iseditable">
                                                <a ng-click="editEndLOAModel.open(emp);loadDatePickerLEnd(emp.LOAEndDate);" class="a-hover-pointer a_link" data-backdrop="static" data-keyboard="false">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.LOAEndDate)}}
                                                </a>
                                            </td>
                                            <td ng-model="emp.LOAEndDate" ng-show="!emp.iseditable">
                                                <a ng-click="edit2(emp,emp.BiweekId);editEndLOAModel.open(emp);loadDatePickerLEnd(emp.LOAEndDate);" class="a_link">
                                                    <i class="fa fa-edit a-hover-pointer"></i>
                                                    {{formateDate(emp.LOAEndDate)}}
                                                </a>
                                            </td>
                                            <!-- <td ng-model="emp.payRollPeriod" ng-show="emp.iseditable">
                                                <select ng-model="emp.payRollPeriod" name="payRollPeriod_{{emp.Id}}" class="form-control rounded-0 a-hover-pointer">
                                                    <option ng-selected="{{emp.payRollPeriod == pay}}" ng-repeat="pay in biweeklylist" value="{{pay}}">{{pay}}</option>
                                                </select>
                                            </td>
                                            <td ng-model="emp.payRollPeriod" ng-show="!emp.iseditable" ng-click="edit(emp,emp.userid);emp.iseditable = !emp.iseditable"
                                                class="a-hover-pointer">
                                                <select ng-model="emp.payRollPeriod" name="payRollPeriod_{{emp.userid}}" class="form-control rounded-0 a-hover-pointer">
                                                    <option ng-selected="{{emp.payRollPeriod == pay}}" ng-repeat="pay in biweeklylist" value="{{pay}}">{{pay}}</option>
                                                </select>
                                                <span>{{emp.payRollPeriod}}</span>
                                            </td> -->
                                            <td ng-model="emp.HalfFixedAmount" ng-show="emp.iseditable">
                                                <input type="text" ng-model="emp.HalfFixedAmount" id="numberinput" class="numdivisioninput form-control rounded-0 col-md-12" ng-change="validateFixedAmount(this)" onkeydown="if(event.keyCode === 32) return false;" />
                                            </td>
                                            <td ng-model="emp.HalfFixedAmount" ng-show="!emp.iseditable" ng-click="edit2(emp,emp.BiweekId);emp.iseditable = !emp.iseditable">
                                                <span class="manager_td">{{emp.HalfFixedAmount}}</span>
                                            </td>
                                        </tr>
                                        <tr ng-show="(employeeslistLOA|filter:search).length==0">
                                            <td colspan="6" class="table-nodata">No Data Available</td>
                                        </tr>
                                    </tbody>
                                </table>
                                <div class="row my-4 tfooter-wrapper">
                                    <div class="col-12 d-flex justify-content-between align-items-center tfooter">
                                        <div class="d-flex align-items-center">
                                            <span class="perPageSpan">Show </span>
                                            <select class="browser-default custom-select custom-select-sm position-absolute" name="recordsPerPage" ng-model="itemPerPage"
                                                ng-options="page for page in pageSizeOptions" ng-change="pageSizeChanged()"></select>
                                        </div>
                                        <div class="d-flex align-items-center position-fixed position-div">
                                            <button class="btn btn-secondary rounded-0 btnupdate" type="submit" ng-show="IsVisibleUpdatebtn" ng-click="update(myform)">Update</button>
                                            <button class="btn btn-secondary rounded-0 btncancel" type="submit" ng-show="IsVisibleUpdatebtn" ng-click="cancelUpdate()">Cancel</button>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" autoHide="false" responsive="true" class="pull-right d-flex align-items-center"
                                                pagination-id="employees"></dir-pagination-controls>
                                        </div>

                                    </div>
                                </div>
                                <!-- <dir-pagination-controls max-size="1" direction-links="true" boundary-links="true" autoHide="false" responsive="true" class="pull-right"
                                    pagination-id="employees"></dir-pagination-controls> -->

                                <edit-Driving-States model="editDialog"></edit-Driving-States>
                                <edit-Deactivation-Date model="editDateModel"></edit-deactivation-date>
                                <edit-Loa-Date model="editLOAModel"></edit-Loa-Date>
                                <edit-Loa-End-Date model="editEndLOAModel"></edit-Loa-End-Date>
                                <edit-lock-Date model="editLockDateModel"></edit-lock-Date>
                                <edit-loa model="editLOAProcessModel" callback-fn="showLeaveOfAbsence(list)"></edit-loa>
                                <!-- <edit-Bulk-Deactivation-Date model="editBulkDateModel"></edit-bulk-deactivation-date>    -->
                            </div>
                            <!-- <button class="btn btn-secondary rounded-0 btnupdate" type="submit" ng-show="IsVisibleUpdatebtn" ng-click="update(myform)">Update</button>
                            <button class="btn btn-secondary rounded-0 btncancel" type="submit" ng-show="IsVisibleUpdatebtn" ng-click="cancelUpdate()">Cancel</button> -->
                        </form>
                        <!-- <div class="col-md-6 mt-1">
                            <span class="perPageSpan">Show </span>
                            <select class="browser-default custom-select custom-select-sm position-absolute" name="recordsPerPage" ng-model="itemPerPage"
                                ng-options="page for page in pageSizeOptions" ng-change="pageSizeChanged()"></select>
                        </div> -->
                    </div>
                    <div class="tab-pane fade" id="pills-addadminroster" role="tabpanel" aria-labelledby="pills-addadminroster-tab">
                        <div class="form-divider"></div>
                        <div class="container-fluid">
                            <div class="row">
                                <toaster-container toaster-options="{'time-out': 1000}"></toaster-container>
                                <form id="form1" name="form1" class="needs-validation col-xl-12 col-lg-12 col-md-12 col-sm-12" novalidate="true">
                                    <div class="row">
                                        <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">
                                            <h1 class="form-heading mb-4 mb-sm-0 mb-md-4 mb-lg-4 d-block">Personal Details</h1>
                                            <div class="form-group-theme row">
                                                <label for="inputFirstname" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">First Name:
                                                </label>

                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <input id="firstName" type="text" ng-model="contactData[0].firstName" ng-show="IsShow" class="form-control rounded-0" ng-value="contactData[0].firstName"
                                                        placeholder="" required="true" name="firstname_0"></input>

                                                    <input id="firstName" type="text" ng-model="contactData.firstName" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" name="firstname_1"></input>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputLastname" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Last Name:
                                                </label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <input id="lastName" type="text" ng-model="contactData[0].lastName" ng-show="IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" name="lastname_0" />
                                                    <input id="lastName" type="text" ng-model="contactData.lastName" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" name="lastname_1" />

                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputEmail" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Email:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <input type="email" id="email" ng-model="contactData[0].email" ng-show="IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" name="email_0" pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,12})+$"
                                                    />
                                                    <span class="span-error" ng-show="form1.email_0.$error.pattern">Please Enter Valid Email</span>
                                                    <input type="email" id="email" ng-model="contactData.email" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" name="email_1" pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,12})+$"
                                                    />
                                                    <span class="span-error" ng-show="form1.email_1.$error.pattern">Please Enter Valid Email</span>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputRole:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Role:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <select id="role" ng-model="contactData[0].role" ng-show="IsShow" class="form-control rounded-0" required="true" name="role_0"
                                                        ng-change="rolewisevalidation(contactData[0].role)">
                                                        <!--  -->
                                                        <option value=""></option>
                                                        <option ng-selected="{{contactData[0].role}}" ng-repeat="role in rolelist" value="{{role}}">{{role}}</option>
                                                    </select>
                                                    <select id="role" ng-model="contactData.role" ng-show="!IsShow" class="form-control rounded-0" required="true" name="role_1"
                                                        ng-change="rolewisevalidation(contactData.role)">
                                                        <!--  -->
                                                        <option value=""></option>
                                                        <option ng-repeat="role in rolelist" value="{{role}}">{{role}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputManager" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Manager:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="showmanagervalidation">*</span>
                                                    <select id="managerid" class="form-control rounded-0" ng-model="contactData[0].managerId" ng-show="IsShow" ng-required="showmanagervalidation"
                                                        name="manager_0">
                                                        <option value=""></option>
                                                        <option ng-selected="{{contactData[0].managerId == manager.Id}}" ng-repeat="manager in managerlist" value="{{manager.Id}}">{{manager.Name}}</option>
                                                    </select>
                                                    <select id="managerid" class="form-control rounded-0" ng-model="contactData.managerId" ng-show="!IsShow" ng-required="showmanagervalidation"
                                                        name="manager_1">
                                                        <option value=""></option>
                                                        <option ng-repeat="manager in managerlist" value="{{manager.Id}}">{{manager.Name}}</option>
                                                    </select>

                                                </div>
                                            </div>

                                            <!-- <div class="form-group-theme row">
                                                <label for="inputCity" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Approval Threshold</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                                                    <input type="text" id="threshold" ng-model="contactData[0].approvalThreshold" ng-show="IsShow" class="numinput form-control rounded-0"
                                                        placeholder="" name="threshold_0" />
                                                    <input type="text" id="threshold" ng-model="contactData.approvalThreshold" ng-show="!IsShow" class="numinput form-control rounded-0"
                                                        placeholder="" name="threshold_1" />
                                                </div>
                                            </div> -->
                                            <div class="form-group-theme row">
                                                <label for="inputEmployeeid" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Employee ID:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                                                    <input type="text" id="employeeId1" ng-model="contactData[0].employeeId" ng-show="IsShow" class="form-control rounded-0 employeeIDinput"
                                                        placeholder="" />
                                                    <input type="text" id="employeeId1" ng-model="contactData.employeeId" ng-show="!IsShow" class="bootstrap-tagsinput rounded-0 employeeIDinput"
                                                        placeholder="" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === PLMarketing">
                                                <label for="inputdivison" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Division:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="divison" ng-model="contactData[0].divison" ng-show="IsShow" class="numdivisioninput form-control rounded-0 divison"
                                                        ng-required="isFieldRequired" placeholder="" name="divison_0" />
                                                    <input type="text" id="divison" ng-model="contactData.divison" ng-show="!IsShow" class="numdivisioninput form-control rounded-0 divison"
                                                        ng-required="isFieldRequired" placeholder="" name="divison_1" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === designAIR || accid === PLMarketing">
                                                <label for="inputjobTitle" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Job Title:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <select id="job_name" ng-model="contactData[0].jobtitle" ng-show="IsShow" class="form-control rounded-0" name="jobtitle_0"
                                                        ng-required="isFieldRequired">
                                                        <option value=""></option>
                                                        <option ng-repeat="jobtitle in jobTitleList" ng-selected="{{contactData[0].jobtitle}}" value="{{jobtitle}}">{{jobtitle}}</option>
                                                    </select>
                                                    <select id="job_name" ng-model="contactData.jobtitle" ng-show="!IsShow" class="form-control rounded-0" ng-required="isFieldRequired"
                                                        name="jobtitle_1">
                                                        <option value=""></option>
                                                        <option ng-repeat="jobtitle in jobTitleList" value="{{jobtitle}}">{{jobtitle}}</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="form-group-theme row">
                                                <label for="inputCellphone" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Cell Phone:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation requiredquestion" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="accTrueDialog">*</span>
                                                    <span class="tagquestion" data-toggle="tooltip" title="Cell Phone Number" data-html="true" data-placement="top">
                                                        <i class="fa fa-question"></i>
                                                    </span>
                                                    <input type="text" id="cellphone" ng-model="contactData[0].cellphone" ng-show="IsShow" class="cellphoneinput form-control rounded-0"
                                                        data-mask="000-000-0000" placeholder="Enter Cell Phone Number" name="cellphone_0"  ng-required="accTrueDialog" />
                                                    <input type="text" id="cellphone" ng-model="contactData.cellphone" class="cellphoneinput form-control rounded-0" ng-show="!IsShow"
                                                        data-mask="000-000-0000" placeholder="Enter Cell Phone Number" name="cellphone_1" ng-required="accTrueDialog" />
                                                </div>
                                            </div>

                                            <div class="form-group-theme row" ng-if="accid === solarisOilfield">
                                                <label for="inputCostcode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Cost Code:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="costcode" ng-model="contactData[0].costCode" ng-show="IsShow" class="costcodeinput form-control rounded-0"
                                                        placeholder="Enter Cost Code" name="costCode_0"  ng-required="isFieldRequired" />
                                                    <input type="text" id="costcode" ng-model="contactData.costCode" class="costcodeinput form-control rounded-0" ng-show="!IsShow"
                                                        placeholder="Enter Cost Code" name="costCode_1" ng-required="isFieldRequired" />
                                                </div>
                                            </div>

                                            <div class="form-group-theme row" ng-if="accid === designAIR">
                                                <label for="inputDepartmentDesign" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Department Design:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <input ng-model="contactData[0].deptDesign" id="deptDesign" required="true" type="text" placeholder="" name="deptDesign_0"
                                                        class="deptDesign form-control rounded-0" />
                                                    <input ng-model="contactData[0].deptDesign" id="deptDesign" required="true" type="hidden" name="deptDesign_1" class="form-control rounded-0"
                                                    />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountId">
                                                <label for="inputGLCode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">GL Code:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <input type="text" id="glcode" ng-model="contactData[0].glcode" ng-show="IsShow" class="form-control rounded-0" required="true"
                                                        placeholder="Enter GL Code" />
                                                    <input type="text" id="glcode" ng-model="contactData.glcode" class="form-control rounded-0" ng-show="!IsShow" required="true"
                                                        placeholder="Enter GL Code" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountERMI">
                                                <label for="inputnetchexid" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Employee Netchex Id:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="netchexEmployeeID" ng-model="contactData[0].netchexEmployeeID" ng-show="IsShow" class="form-control rounded-0"
                                                    ng-required="isFieldRequired" placeholder="" name="netchexEmployeeID_0"
                                                    />
                                                    <!-- <input type="text" id="netchexEmployeeID" ng-model="contactData[0].netchexEmployeeID" ng-show="IsShow" class="form-control rounded-0"
                                                        ng-if="!showrequiredfield" placeholder="" name="netchexEmployeeID_0"
                                                    /> -->
                                                    <input type="text" id="netchexEmployeeID" ng-model="contactData.netchexEmployeeID" ng-show="!IsShow" class="form-control rounded-0"
                                                    ng-required="isFieldRequired" placeholder="" name="netchexEmployeeID_1"
                                                    />
                                                    <!-- <input type="text" id="netchexEmployeeID" ng-model="contactData.netchexEmployeeID" ng-show="!IsShow" class="form-control rounded-0"
                                                        ng-if="!showrequiredfield" placeholder="" name="netchexEmployeeID_1"
                                                    /> -->
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountERMI">
                                                <label for="inputCode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Code:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="code" ng-model="contactData[0].code" ng-show="IsShow" class="form-control rounded-0"  ng-required="isFieldRequired" placeholder="" name="code_0" />
                                                    <!-- <input type="text" id="code" ng-model="contactData[0].code" ng-show="IsShow" class="form-control rounded-0" ng-if="!showrequiredfield"
                                                        placeholder="" name="code_0" /> -->
                                                    <input type="text" id="code" ng-model="contactData.code" ng-show="!IsShow" class="form-control rounded-0"  ng-required="isFieldRequired" placeholder="" name="code_1" />
                                                    <!-- <input type="text" id="code" ng-model="contactData.code" ng-show="!IsShow" class="form-control rounded-0" ng-if="!showrequiredfield"
                                                        placeholder="" name="code_1" /> -->
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountERMI">
                                                <label for="inputdriverType" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Driver Type:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                                                    <!-- <span class="span-validation" data-toggle="tooltip" data-placement="top"
                                                    title="Required field">*</span> -->
                                                    <select id="role_name" ng-model="contactData[0].driverType" ng-show="IsShow" class="form-control rounded-0" name="driverType_0">
                                                        <option value=""></option>
                                                        <option ng-repeat="driver in driverType" value="{{driver}}">{{driver}}</option>
                                                    </select>
                                                    <select id="role_name" ng-model="contactData.driverType" ng-show="!IsShow" class="form-control rounded-0" name="driverType_1">
                                                        <option value=""></option>
                                                        <option ng-repeat="driver in driverType" value="{{driver}}">{{driver}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountSurfacePrep">
                                                <label for="inputCode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Region:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="am" ng-model="contactData[0].am" ng-show="IsShow" class="form-control rounded-0 nonuminput"  ng-required="isFieldRequired" placeholder="" name="region_0" />
                                                    <input type="text" id="am" ng-model="contactData.am" ng-show="!IsShow" class="form-control rounded-0 nonuminput"  ng-required="isFieldRequired" placeholder="" name="region_1" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountSurfacePrep">
                                                <label for="inputCode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Job Title:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="an" ng-model="contactData[0].an" ng-show="IsShow" class="form-control rounded-0 nonuminput"  ng-required="isFieldRequired" placeholder="" name="job_0" />
                                                    <input type="text" id="an" ng-model="contactData.an" ng-show="!IsShow" class="form-control rounded-0 nonuminput"  ng-required="isFieldRequired" placeholder="" name="job_1" />
                                                </div>
                                            </div>

                                            <!-- <div class="form-group-theme row">
                                                <label for="resetmBursementLink"
                                                    class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Reset mBursement Link :</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
                                                    <span class="tagquestionLink" data-toggle="tooltip" title="Reset Link For mBursement"  data-html="true" data-placement="top"><i class="fa fa-question"></i></span> 
                                                            <input type="checkbox" class="checkb1" ng-show="IsShow" ng-model="contactData[0].resetReimbursementLink"/>  
                                                            <input type="checkbox" class="checkb1" ng-show="!IsShow" ng-model="contactData.resetReimbursementLink"/>             
                                                </div>
                                            </div> -->
                                        </div>
                                        <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">
                                            <h1 class="form-heading mb-4 mb-sm-0 mb-md-4 mb-lg-4  mt-4 mt-sm-0 mt-md-0 d-block">Plan Details</h1>

                                            <div class="form-group-theme row">
                                                <label for="inputActivationdate:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Activation Date:

                                                </label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>

                                                    <div class="input-group">
                                                        <input type="text" ng-model="contactData[0].activationDate" id="activedate_0" ng-show="IsShow" class="form-control rounded-0"
                                                            placeholder="" required="true" name="activedate_0" />
                                                        <input type="text" ng-model="contactData.activationDate" id="activedate_1" ng-show="!IsShow" class="form-control rounded-0"
                                                            placeholder="" required="true" name="activedate_1" />

                                                        <div class="input-group-prepend" id="">
                                                            <span class="input-group-text">
                                                                <i class="fas fa-calendar-alt"></i>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputActivationdate:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Added Date:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <div class="input-group">
                                                        <input type="text" ng-model="contactData[0].addedDate" id="activedate_0" ng-show="IsShow" class="form-control rounded-0"
                                                            placeholder="" name="activedate_0" disabled="disabled"></input>
                                                        <input type="text" ng-model="contactData.addedDate" id="activedate_1" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                            name="activedate_1" disabled="disabled">
                                                        </input>
                                                        <div class="input-group-prepend" id="">
                                                            <span class="input-group-text">
                                                                <i class="fas fa-calendar-alt"></i>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputVehicletype" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Vehicle Type:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="showvalidation">*</span>
                                                    <select id="vehicalType" ng-model="contactData[0].vehicalType" class="form-control rounded-0" required="true" ng-show="IsShow"
                                                        name="vehicalType_0" ng-if="showrequiredfield">
                                                        <option value=""></option>
                                                        <option ng-selected="{{vehical == contactData[0].vehicalType}}" ng-repeat="vehical in vehiclelist track by $index" value="{{vehical}}">{{vehical}}</option>
                                                    </select>
                                                    <select id="vehicalType" ng-model="contactData[0].vehicalType" class="form-control rounded-0" ng-show="IsShow" name="vehicalType_0"
                                                        ng-if="!showrequiredfield">
                                                        <option value=""></option>
                                                        <option ng-selected="{{vehical == contactData[0].vehicalType}}" ng-repeat="vehical in vehiclelist track by $index" value="{{vehical}}">{{vehical}}</option>
                                                    </select>
                                                    <select id="vehicalType" ng-model="contactData.vehicalType" class="form-control rounded-0" ng-show="!IsShow" ng-if="showrequiredfield"
                                                        name="vehicalType_1" required="true">
                                                        <option value=""></option>
                                                        <option ng-selected="{{vehicle == contactData.vehicalType}}" ng-repeat="vehicle in vehiclelist" value="{{vehicle}}">{{vehicle}}</option>
                                                    </select>
                                                    <select id="vehicalType" ng-model="contactData.vehicalType" class="form-control rounded-0" ng-show="!IsShow" ng-if="!showrequiredfield"
                                                        name="vehicalType_1">
                                                        <option value=""></option>
                                                        <option ng-selected="{{vehicle == contactData.vehicalType}}" ng-repeat="vehicle in vehiclelist" value="{{vehicle}}">{{vehicle}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputZipCode" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Zip Code:
                                                </label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="showvalidation">*</span>
                                                    <input type="text" id="zipCode" ng-model="contactData[0].zipCode" ng-show="IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" maxlength="5" name="zip_0" pattern="^[0-9]{5}$" ng-change="showcitycountryedit(contactData[0].zipCode,contactData[0].role)"
                                                        ng-if="showrequiredfield" />
                                                    <input type="text" id="zipCode" ng-model="contactData[0].zipCode" ng-show="IsShow" class="form-control rounded-0" placeholder=""
                                                        maxlength="5" name="zip_0" pattern="^[0-9]{5}$" ng-change="showcitycountryedit(contactData[0].zipCode,contactData[0].role)"
                                                        ng-if="!showrequiredfield" />
                                                    <input type="text" id="zipCode" ng-model="contactData.zipCode" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                        required="true" maxlength="5" name="zip_1" pattern="^[0-9]{5}$" ng-change="showcitycountry(contactData.zipCode,contactData.role)"
                                                        ng-if="showrequiredfield" />
                                                    <input type="text" id="zipCode" ng-model="contactData.zipCode" ng-show="!IsShow" class="form-control rounded-0" placeholder=""
                                                        maxlength="5" name="zip_1" pattern="^[0-9]{5}$" ng-if="!showrequiredfield"
                                                        ng-change="showcitycountry(contactData.zipCode,contactData.role)" />
                                                    <span class="span-error" ng-show="isZipValid">There are multiple cities associated with this zip code. Select the dropdown below</span>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputCity:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">City:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="showvalidation">*</span>
                                                    <select id="city" ng-model="contactData[0].city" ng-show="IsShow" class="form-control rounded-0" required="true" name="city_0"
                                                       ng-if="showrequiredfield" ng-change="showcityedit(contactData[0].zipCode,contactData[0].city)" ng-options="city for city in relatedcitylist">
                                                        <option value=""></option>
                                                        <!--<option ng-selected="{{city == contactData[0].city}}" ng-repeat="city in relatedcitylist" value="{{city}}" >{{city}}</option> -->
                                                    </select>
                                                    <select id="city" ng-model="contactData[0].city" ng-show="IsShow" class="form-control rounded-0" name="city_0" ng-if="!showrequiredfield" 
                                                    ng-options="city for city in relatedcitylist">
                                                    <option value=""></option>
                                                        <!--<option ng-selected="{{city == contactData[0].city}}" ng-repeat="city in relatedcitylist" value="{{city}}">{{city}}</option> -->
                                                    </select>
                                                    <select id="city" ng-model="contactData.city" ng-show="!IsShow" class="form-control rounded-0" required="true" name="city_1"
                                                        ng-if="showrequiredfield" ng-options="city for city in relatedcitylist" ng-change="showcityedit(contactData.zipCode,contactData.city)">
                                                        <option value=""></option>
                                                        <!-- <option value=""></option>
                                                        <option ng-selected="{{city == contactData.city}}" ng-repeat="city in relatedcitylist" value="{{city}}">{{city}}</option> -->
                                                    </select>
                                                    <select id="city" ng-model="contactData.city" ng-show="!IsShow" class="form-control rounded-0" name="city_1" ng-if="!showrequiredfield" 
                                                        ng-options="city for city in relatedcitylist" ng-change="showcityedit(contactData.zipCode,contactData.city)">
                                                         <option value=""></option>
                                                        <!--<option ng-selected="{{city == contactData.city}}" ng-repeat="city in relatedcitylist" value="{{city}}">{{city}}</option> -->
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputState:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">State:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="showvalidation">*</span>
                                                    <input type="text" id="state" ng-model="contactData[0].state" ng-show="IsShow" class="form-control rounded-0 uppercase" placeholder=""
                                                        required="true" maxlength="2" name="state_0" pattern="^[A-Za-z]{2}$"
                                                        disabled="disabled" ng-if="showrequiredfield" />
                                                    <input type="text" id="state" ng-model="contactData[0].state" ng-show="IsShow" class="form-control rounded-0 uppercase" placeholder=""
                                                        required="true" maxlength="2" name="state_0" pattern="^[A-Za-z]{2}$"
                                                        disabled="disabled" ng-if="!showrequiredfield" />
                                                    <input type="text" id="state" ng-model="contactData.state" ng-show="!IsShow" class="form-control rounded-0 uppercase" placeholder=""
                                                        required="true" name="state_1" maxlength="2" pattern="^[A-Za-z]{2}$"
                                                        disabled="disabled" ng-if="showrequiredfield" />
                                                    <input type="text" id="state" ng-model="contactData.state" ng-show="!IsShow" class="form-control rounded-0 uppercase" placeholder=""
                                                        required="true" name="state_1" maxlength="2" pattern="^[A-Za-z]{2}$"
                                                        disabled="disabled" ng-if="!showrequiredfield" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputDrivingstates:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Driving States:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="IsShow">
                                                    <span class="tagquestion" data-toggle="tooltip" title="<b>Use State Abbreviations:</b><br/> {{drivingStatesList.join(', ')}}"
                                                        data-html="true" data-placement="top">
                                                        <i class="fa fa-question"></i>
                                                    </span>
                                                    <input ng-model="contactData[0].drivingStates" id="drivingstateContact"  type="text" placeholder="Enter Driving States" data-role="tagsinput"
                                                    />
                                                    <input ng-model="contactData[0].drivingStates" id="hiddenConState" type="hidden" />
                                                </div>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="!IsShow">
                                                    <span class="tagquestion" data-toggle="tooltip" title="<b>Use State Abbreviations:</b><br/> {{drivingStatesList.join(', ')}}"
                                                        data-html="true" data-placement="top">
                                                        <i class="fa fa-question"></i>
                                                    </span>
                                                    <input ng-model="contactData.drivingStates" id="drivingstatenew" type="text" placeholder="Enter Driving States" data-role="tagsinput"
                                                        value="{{contactData.drivingStates}}" />
                                                    <input ng-model="contactData.drivingStates"  id="hiddennewConState" type="hidden" />
                                                </div>

                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountId">
                                                <label for="inputSageID:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Sage 100 ID:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="IsShow">
                                                    <input ng-model="contactData[0].sage100ID" id="sage100ID_0" type="text" placeholder="Enter Sage 100 ID" class="form-control rounded-0"
                                                    />
                                                    <input ng-model="contactData[0].sage100ID" id="sage100ID_1" type="hidden" class="form-control rounded-0" />
                                                </div>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="!IsShow">
                                                    <input ng-model="contactData.sage100ID" id="sage100ID_0" type="text" value="{{contactData.sage100ID}}" placeholder="Enter Sage 100 ID"
                                                        class="form-control rounded-0" />
                                                    <input ng-model="contactData.sage100ID" id="sage100ID_1" type="hidden" class="form-control rounded-0" />
                                                </div>

                                            </div>
                                            <div class="form-group-theme row">
                                                <label for="inputMonthlyMileage:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Monthly Mileage:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="IsShow">
                                                    <input ng-model="contactData[0].monthlymileage" id="monthlymileage_0" type="text" placeholder="Enter Monthly Mileage" class="mileageinput form-control rounded-0"
                                                    />
                                                    <input ng-model="contactData[0].monthlymileage" id="monthlymileage_1" type="hidden" class="form-control rounded-0" />
                                                </div>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8" ng-show="!IsShow">
                                                    <input ng-model="contactData.monthlymileage" id="monthlymileage_0" type="text" value="{{contactData.monthlymileage}}" placeholder="Enter Monthly Mileage"
                                                        class="mileageinput form-control rounded-0" />
                                                    <input ng-model="contactData.monthlymileage" id="monthlymileage_1" type="hidden" class="form-control rounded-0" />
                                                </div>

                                            </div>

                                            <div class="form-group-theme row" ng-if="accid === PLMarketing">
                                                <label for="inputdeptPL" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Department:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="deptPL" ng-model="contactData[0].deptPL" ng-show="IsShow" class="form-control rounded-0 numinput deptPL"
                                                        ng-required="isFieldRequired" placeholder="" name="deptPL_0" />
                                                    <input type="text" id="deptPL" ng-model="contactData.deptPL" ng-show="!IsShow" class="form-control rounded-0 numinput deptPL"
                                                        ng-required="isFieldRequired" placeholder="" name="deptPL_1" />
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === PLMarketing">
                                                <label for="inputpayroll" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">First Payroll:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <select id="firstPayrollPer" ng-model="contactData[0].firstPayrollPer" class="form-control rounded-0"  ng-show="IsShow"
                                                        name="firstPayrollPer_0" ng-required="isFieldRequired">
                                                        <option value="" disabled="true"></option>
                                                        <option ng-selected="{{payroll == contactData[0].firstPayrollPer}}" ng-repeat="payroll in firstPayroll" value="{{payroll}}">{{payroll}}</option>
                                                    </select>
                                                    <select id="firstPayrollPer" ng-model="contactData.firstPayrollPer" class="form-control rounded-0" ng-show="!IsShow" ng-required="isFieldRequired"
                                                        name="firstPayrollPer_1">
                                                        <option value="" disabled="true"></option>
                                                        <option ng-selected="{{payroll == contactData.firstPayrollPer}}" ng-repeat="payroll in firstPayroll" value="{{payroll}}">{{payroll}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === designAIR">
                                                <label for="inputDepartment" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Department:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <select id="department" ng-model="contactData[0].department" ng-show="IsShow" class="form-control rounded-0" required="true"
                                                        name="department_0">
                                                        <option value=""></option>
                                                        <option ng-repeat="department in departmentList" ng-selected="{{department == contactData[0].department}}" value="{{department}}">{{department}}</option>
                                                    </select>
                                                    <select id="department" ng-model="contactData.department" ng-show="!IsShow" class="form-control rounded-0" required="true"
                                                        name="department_1">
                                                        <option value=""></option>
                                                        <option ng-repeat="department in departmentList" value="{{department}}">{{department}}</option>
                                                    </select>
                                                </div>
                                            </div>

                                            <div class="form-group-theme row" ng-if="accid === accountERMI">
                                                <label for="inputDistrict:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">District:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="district" ng-model="contactData[0].district" ng-show="IsShow" class="form-control rounded-0 districtInput"
                                                        ng-required="isFieldRequired" name="district_0" placeholder=""
                                                    />
                                                    <!-- <input type="text" id="district" ng-model="contactData[0].district" ng-show="IsShow" class="form-control rounded-0 districtInput"
                                                        ng-if="!showrequiredfield" name="district_0" placeholder="" /> -->
                                                    <input type="text" id="district" ng-model="contactData.district" ng-show="!IsShow" class="form-control rounded-0 districtInput"
                                                        ng-required="isFieldRequired" name="district_1" placeholder=""
                                                    />
                                                    <!-- <input type="text" id="district" ng-model="contactData.district" ng-show="!IsShow" class="form-control rounded-0 districtInput"
                                                        name="district_1" placeholder="" ng-if="!showrequiredfield" /> -->
                                                </div>
                                            </div>
                                            <div class="form-group-theme row" ng-if="accid === accountERMI">
                                                <label for="inputTerritory:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Territory:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field" ng-if="isFieldRequired">*</span>
                                                    <input type="text" id="territory" ng-model="contactData[0].territory" ng-show="IsShow" class="form-control rounded-0 territoryInput"
                                                        ng-required="isFieldRequired" name="territory_0" placeholder=""
                                                    />
                                                    <!-- <input type="text" id="territory" ng-model="contactData[0].territory" ng-show="IsShow" class="form-control rounded-0 territoryInput"
                                                        name="territory_0" ng-if="!showrequiredfield" placeholder="" /> -->
                                                    <input type="text" id="territory" ng-model="contactData.territory" ng-show="!IsShow" class="form-control rounded-0 territoryInput"
                                                    ng-required="isFieldRequired" name="territory_1"  placeholder=""
                                                    />
                                                    <!-- <input type="text" id="territory" ng-model="contactData.territory" ng-show="!IsShow" class="form-control rounded-0 territoryInput"
                                                        name="territory_1" ng-if="!showrequiredfield" placeholder="" /> -->
                                                </div>
                                            </div>

                                            <div class="form-group-theme row" ng-if="accid === NWPipe">
                                                <label for="inputCompany:" class="col-xl-4 col-lg-3 col-md-3 col-sm-3 col-form-label form-lable">Company:</label>
                                                <div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 validate-div">
                                                    <span class="span-validation" data-toggle="tooltip" data-placement="top" title="Required field">*</span>
                                                    <select id="role" ng-model="contactData[0].company" ng-show="IsShow" class="form-control rounded-0" required="true" name="company_0">
                                                        <option value=""></option>
                                                        <option ng-selected="{{contactData[0].company}}" ng-repeat="company in companyList" value="{{company}}">{{company}}</option>
                                                    </select>
                                                    <select id="company" ng-model="contactData.company" ng-show="!IsShow" class="form-control rounded-0" required="true" name="company_1">
                                                        <option value=""></option>
                                                        <option ng-repeat="company in companyList" value="{{company}}">{{company}}</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <button class="btn btn-primary float-right linkbtn" data-toggle="modal" ng-click="createUpdateContact(contactData[0],'hiddenConState','drivingstateContact','_0',form1,true)"
                                        ng-show="IsShow">Submit</button>
                                    <button class="btn btn-primary float-right linkbtn" data-toggle="modal" ng-click="createUpdateContact(contactData,'hiddennewConState','drivingstatenew','_1',form1,false)"
                                        ng-show="!IsShow">Submit</button>
                                    <button class="btn btn-primary linkbtn" data-toggle="modal" ng-click="sendEmailContact(contactData[0])" ng-show="IsShowLinkBtn">Resend mLog App Link</button>
                                    <!-- <button class="btn btn-primary linkbtn" data-toggle="modal" ng-click="sendEmailContact(contactData)" ng-show="!IsShowLinkBtn">Resend mLog App Link</button> -->
                                    <button class="btn btn-primary linkbtn" data-toggle="modal" ng-show="IsShowLinkBtn" ng-click="resendLink(contactData[0])">Resend mBurse Link</button>
                                    <!-- <button class="btn btn-primary linkbtn" data-toggle="modal" ng-show="!IsShowLinkBtn" ng-click="resendLink(contactData)">Resend mBurse Link</button> -->
                                </form>
                            </div>
                        </div>
                        <div class="form-divider"></div>

                    </div>
                    <div class="tab-pane fade" id="pills-importadminroster" role="tabpanel" aria-labelledby="pills-importadminroster-tab">
                        <div class="container">
                            <div class="row">
                                <div class="offset-md-3 offset-lg-3 offset-xl-3 col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 px-0">
                                    <div class="rcorners">
                                        <div class="text-center my-3 my-sm-3 my-md-3 my-lg-3">
                                            <div class=" my-3 my-sm-3 my-md-3 my-lg-3">
                                                <p class="fileupload-title">
                                                    <span class="font-weight-bold">Instructions &amp; Tips</span>
                                                </p>

                                            </div>
                                        </div>
                                        <div class="text-left">
                                            <p class="font-weight-bold">Step 1. Download the template
                                                <a onclick="window.open('{!$Label.Sample_csv_url}')" class="a-setcolor-pointer"> HERE.</a>
                                            </p>
                                            <p class="font-weight-bold mt-4">Step 2. Make sure to complete the data is complete and accurate.</p>
                                            <div  class="tips-container">
                                                <iframe id="vfFrame" height="300" width="100%"  style="border: 0" class="vf-iframe d-none"></iframe>
                                            </div>
                                            <p class="font-weight-bold mt-4 mb-5">Step 3. The formatting is important! Please see these pro-tips.
                                                <span style="position: absolute;top: 144px;" class="span-tip">
                                                    <button class="tips-button" ng-click="intializeTips()">
                                                        <i class="fa-solid fa-info"></i>
                                                    </button>
                                                </span>
                                            </p>
                                        </div>
                                        <form method="post" action="" enctype="multipart/form-data" novalidate="true" class="box">
                                            <div class="box__input" accept=".csv, text/csv"
                                                id="box__input">
                                                <div class="box__img" ng-show="IsVisiblebtn">
                                                    <img style="height: 70px" src="{!URLFOR($Resource.EmcCSS,'/emc-design/assets/images/file-uploaded.png')}" />
                                                </div>
                                                <svg height="43" viewBox="0 0 566.93 566.93" width="50" class="box__icon" ng-show="!IsVisiblebtn">
                                                    <path class="b"
                                                        d="M51.12,332.94c-10.67,.11-20.45,9.83-20.24,20.47v139.22c0,10.57,9.64,20.18,20.24,20.18h464.68c10.59,0,20.24-9.62,20.24-20.18v-139.22c.16-10.67-9.54-20.47-20.24-20.47s-20.39,9.8-20.24,20.47v119.03H71.36v-119.03c.24-10.78-9.43-20.58-20.24-20.47Z">
                                                    </path>
                                                    <path class="b"
                                                        d="M283.44,38.12c-4.82,.18-10.41,2.19-13.91,5.48l-114.67,107.93c-6.56,7.32-9.27,21.34-1.69,29.51,7.48,8.06,22,7.8,29.51-.21l80.53-75.89V394.14c0,11.17,9.06,20.24,20.24,20.24s20.24-9.06,20.24-20.24V104.94l80.53,75.89c6.93,6.9,21.95,8.19,29.51,.21,7.56-7.96,5.14-22.5-1.69-29.51l-114.67-107.93c-3.93-3.69-8.54-5.48-13.91-5.48h0Z">
                                                    </path>
                                                </svg>
                                                <div class="box__container" ng-show="!IsVisiblebtn">
                                                    <span>Choose file to upload</span>
                                                    <input type="file" name="file" id="file" class="box__file" multiple="false" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel,text/csv "
                                                    onchange="angular.element(this).scope().file_changed(this);" />
                                                </div>
                                                <div class="box__upload" ng-show="IsVisiblebtn">
                                                    <button type="submit" class="btn justify-content-center box__button__btn" ng-click="uploadFile($event)"
                                                    data-toggle="modal" data-target="#adminrosterImportProcess">Upload</button>
                                                </div>
                                                <div ng-show="IsVisibleText">
                                                    <label class="w-100 text-center pd-10 file-message" for="file">{{fileUploadName}}
                                                        <span style="color: #8b8686; margin-left: 14px;">{{fileUploadSize}}</span>
                                                    </label>
                                                    <label class="w-100 text-center error-text" for="file-error" ng-show="isError">
                                                        <i class="fa fa-exclamation-circle"></i>  {{errorUploading}}
                                                    </label>
                                                </div>
                                            </div>
                                            <span class="box__dragndrop text-center pt-3"> or drag and drop files here</span>
                                        </form>
                                        <!-- <div class="text-left">
                                            <p class="font-weight-bold">Pro Tips:</p>
                                            <p>A. All fields are mandatory with the exception of the driver ID. You can edit
                                                any of the fields after users have been created. </p>
                                            <p>B. Please use the proper date format. If the Activation Date is December 11,
                                                2019 it should be entered as 12/11/2019.</p>
                                            <p>C. Use two letter abbreviations when entering states, e.g. Colorado = CO</p>
                                            <p>D. Remember the old saying garbage in garbage out, so recheck your data before
                                                uploading.
                                            </p>
                                            <p>
                                                Keep imports to 100 new drivers or less at once. If importing more 100 new drivers repeat the upload process or contact your
                                                Account Manager.
                                            </p>
                                        </div> -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <div class="modal fade" id="removeBackDrop">

        </div>
        <!-- Sync All Mileages Modal-->
        <div class="modal fade synAllModal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-md modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <button type="button" class="close popup-close-btn" aria-label="Close" ng-click="hideErrorModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="modal-body">
                        <form name="signup" class="form" novalidate="true">
                            <div class="form-group-theme row">
                                <label for="inputsync" class="col-xl-4 col-lg-2 col-md-4 col-sm-4 col-form-label form-lable">Sync Month:</label>
                                <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6">
                                    <select class="custom-select" ng-model="syncMonthList" ng-change="handleMonth(syncMonthList)">
                                        <option ng-repeat="month in synMonth" ng-selected="{{syncMonthList == month}}" value="{{month}}">{{month}}</option>
                                    </select>
                                </div>
                                <!-- <label for="inputstatus" class="col-xl-2 col-lg-2 col-md-2 col-sm-2 col-form-label form-lable">Trip Status:</label>
                                <div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
                                    <select class="custom-select" ng-model="statusList" ng-change="handleStatus(statusList)">
                                        <option ng-repeat="trip in tripStatus" ng-selected="{{statusList == trip}}" value="{{trip}}" >{{trip}}</option>
                                    </select>
                                </div> -->
                            </div>
                            <!-- <div class="form-group-theme row">
                                <label for="inputsynccheck" class="col-xl-8 col-lg-8 col-md-8 col-sm-8 col-form-label form-lable">Do you want to change status of trip to mLog system ?</label>
                                <div class="col-xl-3 col-lg-3 col-md-3 col-sm-3">
                                    <input type="checkbox" ng-model="isCheckedForSync"  ng-click="CheckUncheckForSync(isCheckedForSync)" class="mt-14"
                                    />
                                </div>
                            </div> -->
                            <div class="form-group  justify-content-center text-center">
                                <button type="button" class="btn btn-primary sync-button" ng-click="syncAllMileages()" ng-disabled="isSync">Submit</button>
                                <button type="button" class="btn btn-secondary" ng-click="hideErrorModal()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade deactivateDatelog" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <button type="button" class="close popup-close-btn" aria-label="Close" ng-click="hideErrorModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="modal-body">
                        <form name="signup" class="form" novalidate="true">
                            <div class="form-group-theme row">
                                <label for="inputdeActivationdate:" class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-form-label form-lable">Deactivation Date:</label>
                                <div class="col-xl-7 col-lg-7 col-md-7 col-sm-7">
                                    <div class="input-group">
                                        <input id="adminroster-deactivationdatepicker" class="form-control rounded-0 deactivateinput" placeholder="Select Deactivation Date"
                                            ng-model="emp.deactivateDate" />
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">
                                                <i class="fas fa-calendar-alt"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group  justify-content-center text-center">
                                <button type="button" class="btn btn-primary" ng-click="deactivateChange(emp.deactivateDate,emp)">Select</button>
                                <button type="button" class="btn btn-secondary" ng-click="hideErrorModal()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- The Import file Modal -->
        <div class="modal fade adminrosterImportProcess" tabindex="-1" role="dialog" aria-labelledby="adminrosterImportProcess" id="adminrosterImportProcess">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="modal-body text-center">
                        <h4 class="fileupload-title">
                            <span>Importing is in process.</span>
                        </h4>
                        <br />
                        <h3 class="fileupload-title">
                            <span>It may take 10 - 20 seconds to complete the import.If any driver is not inserted than you can get error file on your registered email.</span>
                        </h3>
                        <div class="w-100" style="padding: 30px">
                          <div class="progress" ng-show="enableBar"><div class="progress-bar progress-bar-striped  bg-success active" role="progressbar" aria-valuenow="{{deProgressBarWidth}}" aria-valuemin="0" aria-valuemax="100" ng-style="{ width: ( deProgressBarWidth + '%' )}">{{deProgressBarWidth}}%</div></div>
                            <!-- <img src="{!URLFOR($Resource.EmcCSS,'emc-design/assets/images/adminroster-importfile-loader.svg')}" width="15%" class="img-fluid"
                                alt="Admin roster import file loader" /> -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade error-log" tabindex="-1" role="dialog" aria-labelledby="error-log" id="errorlog">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="hideErrorModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="modal-body text-center">
                        <h4 class="fileupload-title">
                            <span>Imported file errors</span>
                        </h4>
                        <table id="error-table" class="table table-striped dt-responsive nowrap" cellspacing="0" width="100%" ng-cloak="true">
                            <thead class="">
                                <tr>
                                    <th>
                                        Employee Id
                                    </th>
                                    <th>
                                        Description
                                    </th>
                                </tr>
                            </thead>
                            <tbody dir-paginate="key in importedFileErrors | itemsPerPage:5" pagination-id="error">
                                <tr>
                                    <td>
                                        <span ng-if="$index > 0 && importedFileErrors[$index -1].employeeId != key.employeeId">{{key.employeeId}}</span>
                                        <span ng-if="$index == 0 ">{{key.employeeId}}</span>
                                    </td>
                                    <td>
                                        {{key.errorMessge}}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <dir-pagination-controls max-size="5" direction-links="true" boundary-links="true" autoHide="true" responsive="true" class="pull-right"
                            pagination-id="error"></dir-pagination-controls>
                    </div>
                </div>
            </div>
        </div>
        <div class="fade modal-backdrop"></div>

        <!-- Duplicate Record Modal START-->
        <div class="modal fade duplicate-log" tabindex="-1" role="dialog" aria-labelledby="duplicate-log" id="duplicatelog">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content rounded-0">
                    <button type="button" class="close popup-close-btn" data-dismiss="modal" aria-label="Close" ng-click="hideErrorModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="modal-body text-center">
                        <h4 class="fileupload-title">
                            <span>Duplicate data found</span>
                        </h4>
                        <table id="error-table" class="table table-striped dt-responsive nowrap" cellspacing="0" width="100%" ng-cloak="true">
                            <thead class="">
                                <tr>
                                    <th>
                                        Employee Id
                                    </th>
                                    <th>
                                        Email
                                    </th>
                                </tr>
                            </thead>
                            <tbody dir-paginate="key in importedFileErrors | itemsPerPage:5">
                                <tr>
                                    <td>
                                        <span ng-if="$index > 0 && importedFileErrors[$index -1].employeeId != key.employeeId">{{key.employeeId}}</span>
                                        <span ng-if="$index == 0 ">{{key.employeeId}}</span>
                                    </td>
                                    <td>
                                        {{key.errorMessge}}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <dir-pagination-controls max-size="5" direction-links="true" boundary-links="true" autoHide="true" responsive="true" class="pull-right"></dir-pagination-controls>
                    </div>
                </div>
            </div>
        </div>
        <!-- Duplicate Record Modal END-->

        <!-- AI-000179 Edited By Megha -->
        <!-- <employee-dialog-directive model="employeeDialog" export-data="exportEmployeeList" ></employee-dialog-directive> -->
        <!-- AI-000179 Edited Ends -->
        <apex:include pageName="EMC_Common_footer" />
        <!-- for cellphone field masking -->
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/jquery.mask.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/jquery.mask.min.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/selectize.js')}"></script>
        <script src="{!URLFOR($Resource.EMC_Header_Scripts,'EMC_Header_Scripts/js/selectize.min.js')}"></script>
        <!-- End of cellphone field masking -->
        <script type="text/javascript">
            $(document).ready(function () {
                $('.costcodeinput').mask('00-0000-000');
                $('#adminroster-loadate').bind("cut copy paste",function(e) {
                    e.preventDefault();
                });
                $('#adminroster-lockdatepicker').datepicker({
                    format: "mm/dd/yy",
                    autoclose: true,
                    todayHighlight: true
                });
                $('#adminroster-loadate').datepicker({
                    format: "mm/dd/yy",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left"
                });
                $('#adminroster-loaenddate').datepicker({
                    format: "mm/dd/yy",
                    autoclose: true,
                    todayHighlight: true,
                    orientation: "bottom left",
                });
          
                var minDate = new Date();
                minDate.setDate(minDate.getDate());
                var disabledLockDate = minDate;
                $('#adminroster-lockdatepicker').datepicker('setEndDate', disabledLockDate);
                $('#adminroster-lockdatepicker').datepicker('setStartDate', disabledLockDate);
                $('.dropdown-toggle').dropdown();
                $('.dropdown').on('show.bs.dropdown', function () {
                    $('.dropdown-menu').css({
                        "top": "117px"
                    });
                })
                $(".dropdown-menu a").click(function () {
                    $("#dropdownMenuButton").text($(this).text());
                });
                let day60today = new Date();
                day60today.setDate(day60today.getDate() - 60);

                // $('#adminroster-deactivationdatepicker').datepicker('setStartDate',day60today);
                $('#adminroster-deactivationdatepicker').datepicker();
               
                //$('#adminroster-lastpaydatepicker').datepicker('setStartDate', new Date());

                var drivingStates = JSON.parse('{!DrivingStates}');
                var isFirst = true;


                $('input').on('beforeItemAdd', function (event) {

                    if (drivingStates.indexOf(event.item.toUpperCase()) == -1) {
                        event.cancel = true;

                        angular.element("#theBody").scope().showToast('<b>' + event.item.toUpperCase() + '</b> is a invalid state. Please enter an valid state.');
                    } else {
                        if (event.item != event.item.toUpperCase()) {
                            event.cancel = true;
                            $(this).tagsinput('add', event.item.toUpperCase());
                        }
                    }
                });

                $('.box').bind('drop', function (evt) {
                    evt.stopPropagation();
                    evt.preventDefault();
                    let filetype = '.csv,text/csv';
                    if (evt.originalEvent.dataTransfer.files.length > 1) {
                        angular.element('#theBody').scope().showToast('Please select only one file.');
                        return;
                    }
                    var files = evt.originalEvent.dataTransfer.files;
                    if (filetype.indexOf(files[0].type) == -1) {
                        angular.element('#theBody').scope().showToast('Please select valid file.');
                        return;
                    }
                    angular.element('#theBody').scope().loadDropfile(files);
                    $('#file').files = files;
                })
            });

            function loaddatepickerforloaenddate(dactivate){
                if (dactivate != null) {
                    let deactdate = new Date(dactivate);
                    let day60todayloa = new Date();
                    day60todayloa.setDate(day60todayloa.getDate() - 60);

                    $('#adminroster-loaenddate').datepicker('setStartDate', day60todayloa);
                    if (deactdate < day60todayloa) {
                        $('#adminroster-loaenddate').datepicker('setStartDate', day60todayloa);
                    }

                    $("#adminroster-loaenddate").datepicker("setDate", deactdate);

                }
            }

            function loaddatepickerforloa(deactivateDate) { /* , lastPayDate */
                if (deactivateDate != null) {
                    loaStartDate = deactivateDate;
                    let deactivationdate = new Date(deactivateDate);
                    let day60today = new Date();
                    day60today.setDate(day60today.getDate() - 60);
                    $('#adminroster-loadate').datepicker('setStartDate', day60today);
                    if (deactivationdate < day60today) {
                        $('#adminroster-loadate').datepicker('setStartDate', deactivationdate);
                    }
                    $("#adminroster-loadate").datepicker("setDate", deactivationdate);
                }
            }
            function loaddatepicker(deactivateDate) { /* , lastPayDate */
                if (deactivateDate != null) {
                    let deactivationdate = new Date(deactivateDate);
                    let day60today = new Date();
                    day60today.setDate(day60today.getDate() - 60);

                    $('#adminroster-deactivationdatepicker').datepicker('setStartDate', day60today);

                    if (deactivationdate < day60today) {
                        $('#adminroster-deactivationdatepicker').datepicker('setStartDate', deactivationdate);
                    }

                    $("#adminroster-deactivationdatepicker").datepicker("setDate", deactivationdate);

                    // $('#adminroster-lastpaydatepicker').datepicker('setStartDate', new Date());

                    //     if (lastPayDate != null) {

                    //         if (new Date(lastPayDate) < new Date()) {
                    //             $('#adminroster-lastpaydatepicker').datepicker('setStartDate', new Date(lastPayDate));

                    //         }
                    //         $("#adminroster-lastpaydatepicker").datepicker("setDate", new Date(lastPayDate));
                    //     }
                    // } else {
                    // let day60today = new Date();
                    // day60today.setDate(day60today.getDate() - 60);

                    // $('#adminroster-lastpaydatepicker').datepicker('setStartDate', new Date());

                    // if (lastPayDate != null) {
                    //     if (new Date(lastPayDate) < new Date()) {

                    //         $('#adminroster-lastpaydatepicker').datepicker('setStartDate', new Date(lastPayDate));
                    //     }
                    //     $("#adminroster-lastpaydatepicker").datepicker("setDate", new Date(lastPayDate));
                    // }
                }
            }

            function c(msg) {

            }

            $(function () {
                $('.numdivisioninput').on('input', function () {
                    this.value = this.value
                        .replace(/[^\d.]/g, '')             // numbers and decimals only
                        .replace(/(^\.*)\./g, '$1')          // single dot retricted
                        .replace(/(\..*)\./g, '$1')          // decimal can't exist more than once
                        .replace(/(\.[\d]{2})./g, '$1');    // not more than 2 digits after decimal
                });

                $('.nonuminput').on('input', function() {
                    this.value = this.value
                            .replace( /[^a-zA-Z]/g, '');
                });

                $('.numinput').on('input', function () {
                    this.value = this.value
                        .replace(/[^\d.]/g, '')             // numbers and decimals only
                        .replace(/(^\.*)\./g, '$1')          // single dot retricted
                        .replace(/(^[\d]{4})[\d]/g, '$1')   // not more than 4 digits at the beginning
                        .replace(/(\..*)\./g, '$1')          // decimal can't exist more than once
                        .replace(/(\.[\d]{2})./g, '$1');    // not more than 2 digits after decimal
                });

                $('.mileageinput').on('input', function () {
                    this.value = this.value
                        .replace(/[^\d.]/g, '')             // numbers and decimals only
                        .replace(/(^\.*)\./g, '$1')                 // single dot is restricted
                        .replace(/(^[\d]{6})[\d]/g, '$1')   // not more than 4 digits at the beginning
                        .replace(/(\..*)\./g, '$1')         // decimal can't exist more than once
                        .replace(/(\.[\d]{2})./g, '$1');    // not more than 2 digits after decimal
                });

                $('.employeeIDinput').on('input', function () {
                    this.value = this.value
                        .replace(/(^\.*)\./g, '$1')                 // single dot is restricted
                });

                // $('.deptPL').on('input', function () {
                //     let alpha = /^[A-Za-z ]+$/;
                //     this.value =  this.value.replace(/(^[\s])/g, '');
                //     this.value = this.value
                //         .replace(/(^\.*)\./g, '$1')        // single dot is restricted

                //     this.value = (this.value.match(alpha)) ? this.value : '';
                // });

            });

            var textWrapper = document.querySelector('.fullscreen_msg');
            textWrapper.innerHTML = textWrapper.textContent.replace(/\S/g, "<span class='letter'>$&</span>");

            anime.timeline({ loop: true })
                .add({
                    targets: '.fullscreen_msg .letter',
                    scale: [4, 1],
                    opacity: [0, 1],
                    translateZ: 0,
                    easing: "easeOutExpo",
                    duration: 950,
                    delay: (el, i) => 70 * i
                }).add({
                    targets: '.fullscreen_msg',
                    opacity: 0,
                    duration: 1000,
                    easing: "easeOutExpo",
                    delay: 1000
                });
            var tablediv = document.getElementById("theBody");

            function openFullscreen() {
                if (tablediv.webkitRequestFullscreen) {
                    tablediv.webkitRequestFullscreen();
                }

            }

            function exitFullscreen() {
                if (tablediv.webkitExitFullscreen) {
                    tablediv.webkitExitFullscreen();
                }
            }
        </script>

    </body>
</apex:page>